{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/concise/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/concise/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/concise/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/concise/source/js/scrollspy.min.js","path":"js/scrollspy.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"4a05f045e8b6a2bb242c1fa1afa1a2710b04a4d5","modified":1677856702247},{"_id":"source/_posts/CSS/01-Flex布局.md","hash":"88c753a66f2d89275ac1e66dd75b9027fa5ea43b","modified":1677601373389},{"_id":"source/_posts/JS/02-手写axios.md","hash":"49a91dd7256fd138e643281a9eb71fa5528a8d2e","modified":1677601415435},{"_id":"source/_posts/JS/01-手写Promise.md","hash":"d7bd093d886f30cedb8714512b5c25343c6707bf","modified":1677601392748},{"_id":"source/_posts/JS/03-手写瀑布流.md","hash":"e53912afedda8dc0fb026c4f047203b7fd9e0e51","modified":1677856434537},{"_id":"source/_posts/Vue/01-Vue的Reactivity.md","hash":"6d4fe3d50014cd5648d53ec0e23979b93f8df8d8","modified":1677601424468},{"_id":"source/_posts/Vue/02-虚拟列表.md","hash":"bccca2136e2c15673594ff841b53df4a7d702718","modified":1677599693639},{"_id":"source/_posts/网络/02-浏览器如何运作.md","hash":"b02a09b8a196f7e18307de81f2118dee38246e80","modified":1677601439104},{"_id":"source/_posts/网络/01-互联网如何运作.md","hash":"f663bda267512a60b1aa94374fb447f385b38de9","modified":1677601433947},{"_id":"source/_posts/网络/03-前端性能优化.md","hash":"ffe285902bd9348418e1ccb29118618dea2aab5a","modified":1677854115277},{"_id":"themes/concise/.gitignore","hash":"fdaed0efe3b13878965b76ef9489b74d20bccbe6","modified":1677638637114},{"_id":"themes/concise/README.md","hash":"83ec4c89c96a979812b2e01d5b76956a78725194","modified":1677638637115},{"_id":"themes/concise/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1677638637114},{"_id":"themes/concise/_config.yml","hash":"67f3f3a2facbead4b22bd082ba7a35bcc7375bd6","modified":1677639031543},{"_id":"themes/concise/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1677638637116},{"_id":"themes/concise/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1677638637116},{"_id":"themes/concise/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1677638637116},{"_id":"themes/concise/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1677638637117},{"_id":"themes/concise/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1677638637117},{"_id":"themes/concise/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1677638637116},{"_id":"themes/concise/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1677638637117},{"_id":"themes/concise/layout/category.ejs","hash":"e29542322fe798281a40eed476468aa8afba7d50","modified":1677638637121},{"_id":"themes/concise/layout/index.ejs","hash":"e29542322fe798281a40eed476468aa8afba7d50","modified":1677638637122},{"_id":"themes/concise/layout/page.ejs","hash":"890b1c8413d7da9cf3e670d7d5296749ecf043a3","modified":1677638637122},{"_id":"themes/concise/layout/layout.ejs","hash":"b09bdfeedd5e85ad492d648738fc3d4f44e5ec13","modified":1677638637122},{"_id":"themes/concise/layout/post.ejs","hash":"890b1c8413d7da9cf3e670d7d5296749ecf043a3","modified":1677638637123},{"_id":"themes/concise/layout/archive.ejs","hash":"5417c76f89e39198d55417995b199ac945ebd5be","modified":1677638637121},{"_id":"themes/concise/layout/tag.ejs","hash":"0ef29619219277632a221155e51a85673011e248","modified":1677638637123},{"_id":"themes/concise/layout/tags.ejs","hash":"43fd00a1e3f75b7e2411047345b9091257920752","modified":1677638637123},{"_id":"themes/concise/scripts/md5.js","hash":"b5666ba437df5de15633f8ec640e804bd4ee3320","modified":1677638637126},{"_id":"themes/concise/scripts/include.js","hash":"9d97efe4e3bd0db142ee17275f2431c7238ece80","modified":1677638637126},{"_id":"themes/concise/layout/_partial/archive.ejs","hash":"67891e427712e39d73058f3001eabd8758dd0bbf","modified":1677638637118},{"_id":"themes/concise/layout/_partial/article.ejs","hash":"40cff2943bda22e0ad6ffc5b4a24917d1a797bea","modified":1677638637118},{"_id":"themes/concise/layout/categories.ejs","hash":"ef218e3cc31eb521be1729987d1bf1cccfd799df","modified":1677638637121},{"_id":"themes/concise/layout/_partial/articles.ejs","hash":"73c0e73d7ba9c75ee7750e891d797ea0c6f43bd6","modified":1677638637118},{"_id":"themes/concise/layout/_partial/aside.ejs","hash":"5607cfd592e3c593941e6c7e7e24ad85bdc653a1","modified":1677638637119},{"_id":"themes/concise/layout/_partial/comments.ejs","hash":"59e229425e21d1459eb4b801717f37e99bfee7b1","modified":1677638637119},{"_id":"themes/concise/layout/_partial/footer.ejs","hash":"fdc8922e49eb754e5bccb881f76b7c8b08c233ba","modified":1677638637119},{"_id":"themes/concise/layout/_partial/header.ejs","hash":"740d7291b058f99626f6fca568a1b92c092079f2","modified":1677638637120},{"_id":"themes/concise/layout/_partial/nav.ejs","hash":"c87ed02859a3e826dfc990af7e9a0564958a2c1c","modified":1677638637120},{"_id":"themes/concise/source/css/_archive.less","hash":"eeb86137568533fae120e00ef912213e07690724","modified":1677638637127},{"_id":"themes/concise/source/css/_app.less","hash":"d7c5262b703e751ca571568c53b872a0139ed2dc","modified":1677638637126},{"_id":"themes/concise/source/css/_article.less","hash":"4f90288a86f2be72403fad8f93233aadb7b0eac3","modified":1677638637127},{"_id":"themes/concise/source/css/_aside.less","hash":"2547c63fa5853302968da3ff5b81286ddb56e513","modified":1677638637128},{"_id":"themes/concise/source/css/_category.less","hash":"845a5ae93444014c451fdbbe7125c618e9dc293c","modified":1677638637128},{"_id":"themes/concise/source/css/_footer.less","hash":"e152a8e3f24ecb2354e7bd65e480ba6828577c22","modified":1677638637129},{"_id":"themes/concise/source/css/_comments.less","hash":"60f22ee2e9aa024672ec862d5968d97a02eb1a3f","modified":1677638637128},{"_id":"themes/concise/source/css/_mixin.less","hash":"96f224ac301293c97dd313da67ca727c8ff17837","modified":1677638637130},{"_id":"themes/concise/source/css/_markdown.less","hash":"2b82b41d0feb236b18bb4ad2e1451350b15394e1","modified":1677638637129},{"_id":"themes/concise/source/css/_monokai-sublime.less","hash":"4cf301989ec56deec414dcfbb0056964854f87d6","modified":1677638637130},{"_id":"themes/concise/source/css/_nav.less","hash":"3076584f8646eb8ab94039d8d5e9848c348332af","modified":1677638637130},{"_id":"themes/concise/source/css/_page.less","hash":"da37dc49f62551b6e6e32a6a1455acbd8bdd4bf7","modified":1677638637131},{"_id":"themes/concise/source/css/_icons.less","hash":"f055a61fa6971272efc7ecea708f229d99a2cf58","modified":1677638637129},{"_id":"themes/concise/source/css/_reset.less","hash":"d080fd7536999b4f22e8a07b3b70d451f0c8c33c","modified":1677638637131},{"_id":"themes/concise/source/css/_tags.less","hash":"1f3c2214e93dad1e6ca7dd1cad79de6d236eaf10","modified":1677638637131},{"_id":"themes/concise/source/css/_vars.less","hash":"60dab5f5ca67e8d3d3f439f6d10f0a40a653f0c7","modified":1677638637132},{"_id":"themes/concise/source/css/style.less","hash":"42c74ccb0e0dfdbd13ce28cd388439ae617f9bda","modified":1677638637132},{"_id":"themes/concise/source/fonts/icomoon.svg","hash":"821f98d8cdec4dbef208ed6f66c54e7b718fdd6a","modified":1677638637133},{"_id":"themes/concise/source/fonts/icomoon.eot","hash":"8300564edcd12262c6b8b97ba225bc00b72f5984","modified":1677638637132},{"_id":"themes/concise/source/fonts/icomoon.ttf","hash":"6b577c657ccb5de7c321e51942a52922a4e95ec1","modified":1677638637133},{"_id":"themes/concise/source/fonts/icomoon.woff","hash":"5a3b86fa1122f78d9b285fbd390bf142721c51ed","modified":1677638637134},{"_id":"themes/concise/source/images/avatar.jpg","hash":"a514e8593579a22a2d9b7f475a147f46f0fd147a","modified":1677602106220},{"_id":"themes/concise/source/images/favicon.ico","hash":"dde598176c93ef1bd9dacfbc6b3dc82cf96c763b","modified":1677602162892},{"_id":"themes/concise/source/js/scrollspy.min.js","hash":"50fee51d681739bbaf0dd65fddc36d64d951ece9","modified":1677638637135},{"_id":"themes/concise/source/svg/_github.svg","hash":"231df640210adeadd0d9ebadf21b5cf6778a0e09","modified":1677638637135},{"_id":"themes/concise/source/svg/_mail.svg","hash":"9b8468ddf9b8664265fbfdc59bdace97498feeab","modified":1677638637136},{"_id":"themes/concise/source/svg/_twitter.svg","hash":"57c9f55401db17bf10e8e6af525c72c7fee01666","modified":1677638637136},{"_id":"themes/concise/layout/_partial/post/date.ejs","hash":"12dcac9e7fd9502b65b5167efd69d3bb01625c1c","modified":1677638637120},{"_id":"themes/concise/layout/_partial/post/tags.ejs","hash":"b57e62180b12ab5493e24a740f126970764ae4c0","modified":1677638637121},{"_id":"themes/concise/preview.png","hash":"3dd563ba6885b21e85e721daa4e038f748585f8c","modified":1677638637125},{"_id":"public/about/index.html","hash":"17a0c0007ff3c5a9c6e0fcfe50b65e392e775ec6","modified":1677856788441},{"_id":"public/2023/03/03/网络/03-前端性能优化/index.html","hash":"1c4ea3876f667399bfc63c21bd92b591cb98c902","modified":1677856788441},{"_id":"public/2023/03/01/网络/01-互联网如何运作/index.html","hash":"65f956ceb9f4b580a7f44e3faa79f2feb23533a1","modified":1677856788441},{"_id":"public/2023/03/01/Vue/02-虚拟列表/index.html","hash":"1bad622a7e1fa21fba0494a00affca9a1e0aa15a","modified":1677856788441},{"_id":"public/archives/index.html","hash":"63defcb2c67fd81ef9474b964749397b0f334e80","modified":1677856788441},{"_id":"public/archives/2023/index.html","hash":"fd93ef2a06010f675275a660677fd17bd151369f","modified":1677856788441},{"_id":"public/archives/2023/03/index.html","hash":"6a0fd7795483983e64e473fb665e1db8b1b5eb28","modified":1677856788441},{"_id":"public/tags/CSS/index.html","hash":"a64e496963eb04bf1820df989f41b76c899d4700","modified":1677856788441},{"_id":"public/tags/JS/index.html","hash":"1c26a31218f4955e950096aa302ba0ff9ffa7cca","modified":1677856788441},{"_id":"public/tags/Vue/index.html","hash":"5e34d5993ce28c0eed95ea14a7ce8cb3ef0ed01f","modified":1677856788441},{"_id":"public/tags/网络/index.html","hash":"c8bbb4d1f45652a1348bb80149b92b5ed50ba131","modified":1677856788441},{"_id":"public/2023/03/03/JS/03-手写瀑布流/index.html","hash":"7e3ba5106de7e66a70e312708e4e89607b356112","modified":1677856788441},{"_id":"public/2023/03/01/网络/02-浏览器如何运作/index.html","hash":"e60bfece030b96ca96229255f74b1cfadfd6cd5f","modified":1677856788441},{"_id":"public/2023/03/01/JS/02-手写axios/index.html","hash":"701c335e8cabad1eb87da61448db26a97b4d9560","modified":1677856788441},{"_id":"public/2023/03/01/JS/01-手写Promise/index.html","hash":"67694a90301b3bfb7ddeaf8d89f613e39b07489b","modified":1677856788441},{"_id":"public/2023/03/01/CSS/01-Flex布局/index.html","hash":"b509265398ec64d71bbdc9d6d4c57fa9633b842f","modified":1677856788441},{"_id":"public/2023/03/01/Vue/01-Vue的Reactivity/index.html","hash":"83ccfcbd2e48df449270007a5bcfb92456b74413","modified":1677856788441},{"_id":"public/index.html","hash":"fdc3c5e2ba68ca858092cdedbbecffab25b64988","modified":1677856788441},{"_id":"public/fonts/icomoon.woff","hash":"5a3b86fa1122f78d9b285fbd390bf142721c51ed","modified":1677856788441},{"_id":"public/fonts/icomoon.eot","hash":"8300564edcd12262c6b8b97ba225bc00b72f5984","modified":1677856788441},{"_id":"public/fonts/icomoon.svg","hash":"821f98d8cdec4dbef208ed6f66c54e7b718fdd6a","modified":1677856788441},{"_id":"public/images/favicon.ico","hash":"dde598176c93ef1bd9dacfbc6b3dc82cf96c763b","modified":1677856788441},{"_id":"public/fonts/icomoon.ttf","hash":"6b577c657ccb5de7c321e51942a52922a4e95ec1","modified":1677856788441},{"_id":"public/images/avatar.jpg","hash":"a514e8593579a22a2d9b7f475a147f46f0fd147a","modified":1677856788441},{"_id":"public/js/scrollspy.min.js","hash":"076f7db44c3a05147144f736cae159baf1612f72","modified":1677856788441},{"_id":"public/css/style.css","hash":"f15056599ce0cbf703b7f43c997a62b917e486e8","modified":1677856788441}],"Category":[],"Data":[],"Page":[{"_content":"# 老王的快乐生活加油123","source":"about/index.md","raw":"# 老王的快乐生活加油123","date":"2023-03-03T15:18:22.247Z","updated":"2023-03-03T15:18:22.247Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"clesom00c00005oup89u2hglq","content":"<h1 id=\"老王的快乐生活加油123\"><a href=\"#老王的快乐生活加油123\" class=\"headerlink\" title=\"老王的快乐生活加油123\"></a>老王的快乐生活加油123</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"老王的快乐生活加油123\"><a href=\"#老王的快乐生活加油123\" class=\"headerlink\" title=\"老王的快乐生活加油123\"></a>老王的快乐生活加油123</h1>"}],"Post":[{"title":"Flex布局","_content":"\n## Flex 的容器和项目\n\n随着主流框架的流行，人们已经渐渐抛弃了低版本浏览器了，flex 布局也成为了主流布局方式。\n\n现在的 flex布局 配合 `vw`和`vh` 也已经成为了移动端的主流布局方式, 这种移动端适配方案我们之后再聊。\n\n现在先主要聊一下flex相关内容。\n\nflex 是 `flexible box` 的缩写， 意为弹性布局，可以让我们布局页面更加灵活。\n\n任何元素都可以做为 flex元素(块元素、甚至行内元素)，采用flex布局的元素，我们可以叫他`容器`，而`容器`里的元素称为`项目`， `.box` 就是容器，`.item`就是项目。\n<!-- more -->\n\n```html\n<style>\n    .box {\n        display: flex;\n        width: 200px;\n        height: 200px;\n        border: 1px solid red;\n    }\n    .item {\n        width: 20px;\n        height: 20px;\n        background-color: aquamarine;\n        border-radius: 50%;\n    }\n</style>  \n\n<span class=\"box\">\n    <span class=\"item\"></span>\n</span>\n```\n\n## Flex 容器的属性\n\n容器默认存在两个轴线，默认水平的叫`主轴`，垂直的叫`交叉轴`也可以叫`侧轴`，当然轴线是可以修改的，项目默认沿着主轴排列。\n\nflex容器有六个属性:\n\n```\nflex-direction // 控制主轴的方向 \nflex-wrap  // 是否可以换行\njustify-content // 主轴的对齐方式\nalign-items  // 侧轴的对齐方式\nalign-contents // 主轴存在多根，才生效\n\nflex-flow: flex-direction flex-wrap // 复合属性 flex-flow:主轴方向 换行\n\n```\n\n## Flex 项目的属性\n\nflex项目也有六个属性\n\n```\norder //顺序 控制项目从左往右的排列顺序 默认是0，可以设置负数，越小越靠左\nflex-grow // 放大 控制项目 在剩余空间放大  0不放大  1放大   默认不放大 0\nflex-shrink // 缩小 控制项目在空不足缩小   0不缩小  1缩小   默认可缩小 1\nflex-basis // 分配剩余空间前 项目占据的大小 \t默认是 auto 元素本身的大小 可设置 px、%等单位\nalign-self // 设置项目本身的 侧轴对齐方式 可覆盖align-items\n\nflex: flex-grow flex-shrink flex-basis // 复合属性\n\n```\n\n## Flex 使用\n\n使用flex简单实现个圣杯布局\n\n```html\n<style>\n    body {\n        margin: 0;\n    }\n    .container {\n        display: flex;\n        min-height: 100vh;\n        flex-direction: column;\n    }\n    header{\n        background: pink;\n    }\n    footer{\n        background: #ccc;\n    }\n    .container-body-content {\n        background: chocolate;\n    }\n    .container-body-nav {\n        background: aquamarine;\n    }\n    .container-body-aside {\n        background: thistle;\n    }\n\n\n    header,\n    footer {\n        flex: 1;\n    }\n\n    .container-body {\n        display: flex;\n        align-self: center;\n        flex: 1;\n        width: 80vw;\n        min-height: 700px;\n    }\n\n    .container-body-content {\n        flex: 1;\n    }\n\n    .container-body-nav,\n    .container-body-aside {\n        flex: 0 0 12em;\n    }\n\n    .container-body-nav {\n        order: -1;\n    }\n</style>\n\n<div class=\"container\">\n    <header>头部</header>\n    <div class=\"container-body\">\n        <main class=\"container-body-content\">主要内容 我是很多内容</main>\n        <nav class=\"container-body-nav\">nav</nav>\n        <aside class=\"container-body-aside\">侧边栏</aside>\n    </div>\n    <footer>底部</footer>\n</div>\n```\n\n","source":"_posts/CSS/01-Flex布局.md","raw":"---\ntitle: Flex布局\ntags: CSS\n---\n\n## Flex 的容器和项目\n\n随着主流框架的流行，人们已经渐渐抛弃了低版本浏览器了，flex 布局也成为了主流布局方式。\n\n现在的 flex布局 配合 `vw`和`vh` 也已经成为了移动端的主流布局方式, 这种移动端适配方案我们之后再聊。\n\n现在先主要聊一下flex相关内容。\n\nflex 是 `flexible box` 的缩写， 意为弹性布局，可以让我们布局页面更加灵活。\n\n任何元素都可以做为 flex元素(块元素、甚至行内元素)，采用flex布局的元素，我们可以叫他`容器`，而`容器`里的元素称为`项目`， `.box` 就是容器，`.item`就是项目。\n<!-- more -->\n\n```html\n<style>\n    .box {\n        display: flex;\n        width: 200px;\n        height: 200px;\n        border: 1px solid red;\n    }\n    .item {\n        width: 20px;\n        height: 20px;\n        background-color: aquamarine;\n        border-radius: 50%;\n    }\n</style>  \n\n<span class=\"box\">\n    <span class=\"item\"></span>\n</span>\n```\n\n## Flex 容器的属性\n\n容器默认存在两个轴线，默认水平的叫`主轴`，垂直的叫`交叉轴`也可以叫`侧轴`，当然轴线是可以修改的，项目默认沿着主轴排列。\n\nflex容器有六个属性:\n\n```\nflex-direction // 控制主轴的方向 \nflex-wrap  // 是否可以换行\njustify-content // 主轴的对齐方式\nalign-items  // 侧轴的对齐方式\nalign-contents // 主轴存在多根，才生效\n\nflex-flow: flex-direction flex-wrap // 复合属性 flex-flow:主轴方向 换行\n\n```\n\n## Flex 项目的属性\n\nflex项目也有六个属性\n\n```\norder //顺序 控制项目从左往右的排列顺序 默认是0，可以设置负数，越小越靠左\nflex-grow // 放大 控制项目 在剩余空间放大  0不放大  1放大   默认不放大 0\nflex-shrink // 缩小 控制项目在空不足缩小   0不缩小  1缩小   默认可缩小 1\nflex-basis // 分配剩余空间前 项目占据的大小 \t默认是 auto 元素本身的大小 可设置 px、%等单位\nalign-self // 设置项目本身的 侧轴对齐方式 可覆盖align-items\n\nflex: flex-grow flex-shrink flex-basis // 复合属性\n\n```\n\n## Flex 使用\n\n使用flex简单实现个圣杯布局\n\n```html\n<style>\n    body {\n        margin: 0;\n    }\n    .container {\n        display: flex;\n        min-height: 100vh;\n        flex-direction: column;\n    }\n    header{\n        background: pink;\n    }\n    footer{\n        background: #ccc;\n    }\n    .container-body-content {\n        background: chocolate;\n    }\n    .container-body-nav {\n        background: aquamarine;\n    }\n    .container-body-aside {\n        background: thistle;\n    }\n\n\n    header,\n    footer {\n        flex: 1;\n    }\n\n    .container-body {\n        display: flex;\n        align-self: center;\n        flex: 1;\n        width: 80vw;\n        min-height: 700px;\n    }\n\n    .container-body-content {\n        flex: 1;\n    }\n\n    .container-body-nav,\n    .container-body-aside {\n        flex: 0 0 12em;\n    }\n\n    .container-body-nav {\n        order: -1;\n    }\n</style>\n\n<div class=\"container\">\n    <header>头部</header>\n    <div class=\"container-body\">\n        <main class=\"container-body-content\">主要内容 我是很多内容</main>\n        <nav class=\"container-body-nav\">nav</nav>\n        <aside class=\"container-body-aside\">侧边栏</aside>\n    </div>\n    <footer>底部</footer>\n</div>\n```\n\n","slug":"CSS/01-Flex布局","published":1,"date":"2023-03-01T02:51:30.431Z","updated":"2023-02-28T16:22:53.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clesom00f00015oup5pwkabpv","content":"<h2 id=\"Flex-的容器和项目\"><a href=\"#Flex-的容器和项目\" class=\"headerlink\" title=\"Flex 的容器和项目\"></a>Flex 的容器和项目</h2><p>随着主流框架的流行，人们已经渐渐抛弃了低版本浏览器了，flex 布局也成为了主流布局方式。</p>\n<p>现在的 flex布局 配合 <code>vw</code>和<code>vh</code> 也已经成为了移动端的主流布局方式, 这种移动端适配方案我们之后再聊。</p>\n<p>现在先主要聊一下flex相关内容。</p>\n<p>flex 是 <code>flexible box</code> 的缩写， 意为弹性布局，可以让我们布局页面更加灵活。</p>\n<p>任何元素都可以做为 flex元素(块元素、甚至行内元素)，采用flex布局的元素，我们可以叫他<code>容器</code>，而<code>容器</code>里的元素称为<code>项目</code>， <code>.box</code> 就是容器，<code>.item</code>就是项目。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: aquamarine;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-容器的属性\"><a href=\"#Flex-容器的属性\" class=\"headerlink\" title=\"Flex 容器的属性\"></a>Flex 容器的属性</h2><p>容器默认存在两个轴线，默认水平的叫<code>主轴</code>，垂直的叫<code>交叉轴</code>也可以叫<code>侧轴</code>，当然轴线是可以修改的，项目默认沿着主轴排列。</p>\n<p>flex容器有六个属性:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-direction // 控制主轴的方向 </span><br><span class=\"line\">flex-wrap  // 是否可以换行</span><br><span class=\"line\">justify-content // 主轴的对齐方式</span><br><span class=\"line\">align-items  // 侧轴的对齐方式</span><br><span class=\"line\">align-contents // 主轴存在多根，才生效</span><br><span class=\"line\"></span><br><span class=\"line\">flex-flow: flex-direction flex-wrap // 复合属性 flex-flow:主轴方向 换行</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-项目的属性\"><a href=\"#Flex-项目的属性\" class=\"headerlink\" title=\"Flex 项目的属性\"></a>Flex 项目的属性</h2><p>flex项目也有六个属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order //顺序 控制项目从左往右的排列顺序 默认是0，可以设置负数，越小越靠左</span><br><span class=\"line\">flex-grow // 放大 控制项目 在剩余空间放大  0不放大  1放大   默认不放大 0</span><br><span class=\"line\">flex-shrink // 缩小 控制项目在空不足缩小   0不缩小  1缩小   默认可缩小 1</span><br><span class=\"line\">flex-basis // 分配剩余空间前 项目占据的大小 \t默认是 auto 元素本身的大小 可设置 px、%等单位</span><br><span class=\"line\">align-self // 设置项目本身的 侧轴对齐方式 可覆盖align-items</span><br><span class=\"line\"></span><br><span class=\"line\">flex: flex-grow flex-shrink flex-basis // 复合属性</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-使用\"><a href=\"#Flex-使用\" class=\"headerlink\" title=\"Flex 使用\"></a>Flex 使用</h2><p>使用flex简单实现个圣杯布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex-direction</span>: column;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">header</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: pink;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">footer</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: chocolate;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: aquamarine;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: thistle;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">header</span>,</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">align-self</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">80vw</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">700px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span>,</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">12em</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">order</span>: -<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-content&quot;</span>&gt;</span>主要内容 我是很多内容<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-nav&quot;</span>&gt;</span>nav<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-aside&quot;</span>&gt;</span>侧边栏<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>底部<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Flex-的容器和项目\"><a href=\"#Flex-的容器和项目\" class=\"headerlink\" title=\"Flex 的容器和项目\"></a>Flex 的容器和项目</h2><p>随着主流框架的流行，人们已经渐渐抛弃了低版本浏览器了，flex 布局也成为了主流布局方式。</p>\n<p>现在的 flex布局 配合 <code>vw</code>和<code>vh</code> 也已经成为了移动端的主流布局方式, 这种移动端适配方案我们之后再聊。</p>\n<p>现在先主要聊一下flex相关内容。</p>\n<p>flex 是 <code>flexible box</code> 的缩写， 意为弹性布局，可以让我们布局页面更加灵活。</p>\n<p>任何元素都可以做为 flex元素(块元素、甚至行内元素)，采用flex布局的元素，我们可以叫他<code>容器</code>，而<code>容器</code>里的元素称为<code>项目</code>， <code>.box</code> 就是容器，<code>.item</code>就是项目。</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: aquamarine;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-容器的属性\"><a href=\"#Flex-容器的属性\" class=\"headerlink\" title=\"Flex 容器的属性\"></a>Flex 容器的属性</h2><p>容器默认存在两个轴线，默认水平的叫<code>主轴</code>，垂直的叫<code>交叉轴</code>也可以叫<code>侧轴</code>，当然轴线是可以修改的，项目默认沿着主轴排列。</p>\n<p>flex容器有六个属性:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-direction // 控制主轴的方向 </span><br><span class=\"line\">flex-wrap  // 是否可以换行</span><br><span class=\"line\">justify-content // 主轴的对齐方式</span><br><span class=\"line\">align-items  // 侧轴的对齐方式</span><br><span class=\"line\">align-contents // 主轴存在多根，才生效</span><br><span class=\"line\"></span><br><span class=\"line\">flex-flow: flex-direction flex-wrap // 复合属性 flex-flow:主轴方向 换行</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-项目的属性\"><a href=\"#Flex-项目的属性\" class=\"headerlink\" title=\"Flex 项目的属性\"></a>Flex 项目的属性</h2><p>flex项目也有六个属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order //顺序 控制项目从左往右的排列顺序 默认是0，可以设置负数，越小越靠左</span><br><span class=\"line\">flex-grow // 放大 控制项目 在剩余空间放大  0不放大  1放大   默认不放大 0</span><br><span class=\"line\">flex-shrink // 缩小 控制项目在空不足缩小   0不缩小  1缩小   默认可缩小 1</span><br><span class=\"line\">flex-basis // 分配剩余空间前 项目占据的大小 \t默认是 auto 元素本身的大小 可设置 px、%等单位</span><br><span class=\"line\">align-self // 设置项目本身的 侧轴对齐方式 可覆盖align-items</span><br><span class=\"line\"></span><br><span class=\"line\">flex: flex-grow flex-shrink flex-basis // 复合属性</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-使用\"><a href=\"#Flex-使用\" class=\"headerlink\" title=\"Flex 使用\"></a>Flex 使用</h2><p>使用flex简单实现个圣杯布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex-direction</span>: column;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">header</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: pink;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">footer</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: chocolate;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: aquamarine;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: thistle;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">header</span>,</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">align-self</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">80vw</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">700px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span>,</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">12em</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">order</span>: -<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-content&quot;</span>&gt;</span>主要内容 我是很多内容<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-nav&quot;</span>&gt;</span>nav<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-aside&quot;</span>&gt;</span>侧边栏<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>底部<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"手写Promise","_content":"\n### Promise 的基本语法\n\npromise 是 es6 提供的解决异步编程的新语法， 主要解决两个问题，第一个解决之前回调地狱(层层嵌套)， 第二个不需要立即指定回调函数，还可以在异步操作执行完提供。\n\npromise 可以有三个状态 `pendding`、`resolved`、`rejected`，并且是不可逆的。\n\n1. 由`pendding` 变成 `resolved`: \n\n   a. 构造函数内调用 resolve\n\n2. 由 `pendding` 变成 `rejected`\n\n​       a. 构造函数调用reject\n\n​       b. 构造函数抛出错误\n\n<!-- more -->\n\n### Promise 构造函数的书写\n\n之前说了 promise是有状态的`pendding`，并且需要返回数据暂定`null`\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态  \n    this.initValue()\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n}\n```\n\npromise的初始状态是`pendding`，并且 `resolve`和`reject`函数的this需要指向promise实例，防止随着函数执行环境而改变\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n}\n```\n\n当执行resolve则状态改为`resolved`并返回结果，当执行reject状态改为`rejected`也返回结果\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n```\n\n简单测试\n\n```js\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'resolved', PromiseResult: 111}\n\nlet p2 = new MyPromise((resolve, reject) => {\n  reject('失败')\n})\nconsole.log(p2)  // MyPromise { PromiseState: 'rejected', PromiseResult: '失败'}\n```\n\n但是有个问题，如果测试代码改成这样， promise的状态由`pendding`改成了`resolved`， 接着又新改成了`rejected`，这跟我们的初衷违背`promise的状态不可逆`\n\n```js\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功')\n  reject('失败')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'rejected', PromiseResult: '失败'}\n```\n\n既然发现了问题，那么解决其实很简单，只需要判断修改前的状态是否是`pendding` 就可以， 如果是 `pendding` 则状态可以修改，如果不是那么状态定死不可修改\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功11')\n  reject('失败11')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'resolved', PromiseResult: '成功11'}\n```\n\n之前说过，promise执行`reject`有两种情况，`1. 构造函数调用` 、`2. 抛出异常`\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    // 构造函数内抛出异常，直接执行 catch\n    try {\n      executor(this.resolve, this.reject)\n    } catch {\n      this.reject()\n    }\n    \n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n\nlet p = new MyPromise((resolve, reject) => {\n  throw '直接报错'\n})\nconsole.log(p)  // MyPromise {PromiseState: 'rejected', PromiseResult: '直接报错' }\n```\n\nok，我们基本搞定了Promise类的功能，待会我们再完善。\n\n### Promise.then() 的实现\n\npromise 的then可以接受两个回调函数，一个是成功回调，一个是失败回调。\n\n1. 当promise的状态为 `resolved` 则执行**成功**回调函数，当promise的状态为 `rejected` 则执行**失败** 回调函数\n\n   ```js\n// then 接受两个回调函数 onResolve成功  onRejct失败\nMyPromise.prototype.then = function(onResolve, onReject) {\n    // then接收两个函数，所以需要校验下\n    // 1. 传递的是函数 则正常使用\n    // 2. 传递的不是函数 则修改成函数\n    onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n    onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n     if(this.PromiseState === 'resolved') {\n       onResolve(this.PromiseResult)\n     } else if(this.PromiseState === 'rejected') {\n       onReject(this.PromiseResult)\n     }\n      console.log('1. 当构造函数里有定时器时，先执行了 then 函数')\n   }\n   \n   \n   new MyPromise((resolve, reject) => {\n     resolve('成功')\n   }).then(res => {\n     console.log(res) // 成功\n   })\n   \n   new MyPromise((resolve, reject) => {\n     reject('错了')\n   }).then(() => {}, err => {\n     console.log(err)  // 错了\n   })\n   \n   new MyPromise((resolve, reject) => {\n     throw '错了22'\n   }).then(() => {}, err => {\n     console.log(err)  // 错了22\n   })\n   \n   // ******** 有个问题 ********\n   new MyPromise((resolve, reject) => {\n     setTimeout(() => {\n       console.log('2. 再执行的异步定时器')\n       resolve('成功')\n     }, 1000)\n   \n   }).then(res => {\n     console.log(res)\n   })\n   // 打印\n   // 先执行: 1. 当构造函数里有定时器时，先执行了 then 函数\n   // 等一秒钟后: 2. 再执行的异步定时器\n   ```\n2. 如果resolve或者reject在定时器里，则等定时器结束在执行\n\n   当promise为`pendding`，则说明定时器调用，并将定时器内的方法挂载起来\n\n   当定时器时间结束，则promise的状态发生改变，重新调用定时器里的方法\n\n   由于then可以串联，所以可能挂载的方法很多，最好用数组进行存储\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    // 构造函数内抛出异常，直接执行 catch\n    try {\n      executor(this.resolve, this.reject)\n    } catch(err) {\n      this.reject(err)\n    }\n    \n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n\n    // 创建两个容器，存放函数\n    this.onResolveArr = []\n    this.onRejectArr = []\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n\n    // 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数\n    if(this.onResolveArr.length) {\n      this.onResolveArr.shift()(this.PromiseResult)\n    }\n  }\n\n  reject(reason) {\n    console.log('88')\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n\n    // 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数\n    if(this.onRejectArr.length) {\n      this.onRejectArr.shift()(this.PromiseResult)\n    }\n  }\n}\n\nMyPromise.prototype.then = function(onResolve, onReject) {\n  // then接收两个函数，所以需要校验下\n  // 1. 传递的是函数 则正常使用\n  // 2. 传递的不是函数 则修改成函数\n  onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n  onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n\n  if(this.PromiseState === 'resolved') {\n    onResolve(this.PromiseResult)\n  } else if(this.PromiseState === 'rejected') {\n    onReject(this.PromiseResult)\n  } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n    this.onResolveArr.push(onResolve.bind(this))\n    this.onRejectArr.push(onReject.bind(this))\n  }\n}\n\nnew MyPromise(resolve=> {\n    setTimeout(() => {\n        resolve('成功')\n    }, 1000)\n}).then(res => console.log(res))  // 一秒后打印 成功\n\n```\n\n\n3. then是支持链式调用的，then能够链式调用的关键在于，整个then方法返回值也是一个promise，而这个返回的promise到底是成功还是失败，分为三种情况：\n\n   a.  返回值是promise对象，返回值为成功，新的promise为成功\n\n   b.  返回值是promise对象，返回值为失败，新的promise为失败\n\n   c.  返回值不是promise对象，返回值为成功，值就是这个返回值\n\n   ```js\nMyPromise.prototype.then = function(onResolve, onReject) {\n    // then接收两个函数，所以需要校验下\n    // 1. 传递的是函数 则正常使用\n    // 2. 传递的不是函数 则修改成函数\n    onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n    onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n    let thenPromise = new MyPromise((resolve, reject) => {\n      const resolvePromise = cb => {\n        try {\n              let result = cb(this.PromiseResult)\n              // 说明返回的是一个Promise对象\n              if(result instanceof MyPromise) {  \n                // 到底是成功还是失败，得交给then\n                result.then(resolve, reject)\n              } else {  // 其他值 当成成功处理\n                resolve(result)\n              }\n        } catch(err) {  // 捕获代码的异常\n            reject(err)\n            throw new Error(err)\n        }\n      }\n  \n      if(this.PromiseState === 'resolved') {\n          resolvePromise(onResolve)\n      } else if(this.PromiseState === 'rejected') {\n          resolvePromise(onReject)\n      } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n          this.onResolveArr.push(onResolve.bind(this))\n          this.onRejectArr.push(onReject.bind(this))\n      }\n    })\n  \n    // then的返回值是一个promise, 解决了链式调用问题\n    return thenPromise\n  }\n  \n  new MyPromise((resolve, reject) => {\n    resolve('第一层')\n  }).then(res => {\n    console.log(res)  // 第一层\n    return new MyPromise((resolve, reject) => reject('第二层'))\n  }).then(res => {}, err => {\n    console.log(err)  // 第二层\n  })\n  ```\n\n\n\n4. promise的then其实是一个微任务，也就是需要等同步任务做完在执行then\n\n   ```js\nlet thenPromise = new MyPromise((resolve, reject) => {\n    const resolvePromise = cb => {\n      // 加一个定时器,别介意苦笑😂\n      // 这样就会等待同步执行完, 再执行微任务 then\n      setTimeout(() => {\n        try {\n          let result = cb(this.PromiseResult)\n          // 说明返回的是一个Promise对象\n          if(result instanceof MyPromise) {  \n            // 到底是成功还是失败，得交给then\n            result.then(resolve, reject)\n          } else {  // 其他值 当成成功处理\n            resolve(result)\n          }\n  \n        } catch(err) {  // 捕获代码的异常\n          reject(err)\n          throw new Error(err)\n        }\n      })\n      \n    }\n\n    if(this.PromiseState === 'resolved') {\n      resolvePromise(onResolve)\n    } else if(this.PromiseState === 'rejected') {\n      resolvePromise(onReject)\n    } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n      this.onResolveArr.push(onResolve.bind(this))\n      this.onRejectArr.push(onReject.bind(this))\n    }\n\n  })\n   ```\n\n### Promise.all的实现\n\n- 接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n- 如果所有Promise都成功，则返回成功结果数组\n- 如果有一个Promise失败，则返回这个失败结果\n\n```js\nclass MyPromise {  \n  ...\n  ...\n  \n  static all(list) {\n    const result = []\n    let count = 0\n    return new MyPromise((resolve, reject) => {\n      const addData = (index, value) => {\n        result[index] = value\n        count++\n        if (count === list.length) {\n          resolve(result)\n        }\n      }\n\n      list.forEach((item, index) => {\n        if (item instanceof MyPromise) {\n          item.then(res => {\n            addData(index, res)\n          }, err => reject(err))\n        } else {\n          addData(index, item)\n        }\n      })\n    })\n  }\n}\n\nlet p1 = new MyPromise(resolve => {\n  resolve(1)\n})\nlet p2 = new MyPromise(resolve => {\n  resolve(2)\n})\nlet p3 = new MyPromise(resolve => {\n  resolve(3)\n})\n\nMyPromise.all([p1, p2, p3]).then(res => {\n  console.log(res) // [1, 2, 3]\n})\n\n```\n\n### Promise.race的实现\n\n- 接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n- 哪个Promise最快得到结果，就返回那个结果，无论成功失败\n\n```js\nclass MyPromise {  \n  ...\n  ...\n  \n  static race(promises) {\n    return new MyPromise((resolve, reject) => {\n      promises.forEach((promise) => {\n        if (promise instanceof MyPromise) {\n          promise.then(\n            (res) => {\n              resolve(res)\n            },\n            (err) => {\n              reject(err)\n            }\n          )\n        } else {\n          resolve(promise)\n        }\n      })\n    })\n  }\n}\n\nlet p1 = new MyPromise(resolve => {\n  resolve(1)\n})\nlet p2 = new MyPromise(resolve => {\n  resolve(2)\n})\nlet p3 = new MyPromise(resolve => {\n  resolve(3)\n})\n\nMyPromise.race([p1, p2, p3]).then(res => {\n  console.log(res) // 1\n})\n```\n\n","source":"_posts/JS/01-手写Promise.md","raw":"---\ntitle: 手写Promise\ntags: JS\n---\n\n### Promise 的基本语法\n\npromise 是 es6 提供的解决异步编程的新语法， 主要解决两个问题，第一个解决之前回调地狱(层层嵌套)， 第二个不需要立即指定回调函数，还可以在异步操作执行完提供。\n\npromise 可以有三个状态 `pendding`、`resolved`、`rejected`，并且是不可逆的。\n\n1. 由`pendding` 变成 `resolved`: \n\n   a. 构造函数内调用 resolve\n\n2. 由 `pendding` 变成 `rejected`\n\n​       a. 构造函数调用reject\n\n​       b. 构造函数抛出错误\n\n<!-- more -->\n\n### Promise 构造函数的书写\n\n之前说了 promise是有状态的`pendding`，并且需要返回数据暂定`null`\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态  \n    this.initValue()\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n}\n```\n\npromise的初始状态是`pendding`，并且 `resolve`和`reject`函数的this需要指向promise实例，防止随着函数执行环境而改变\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n}\n```\n\n当执行resolve则状态改为`resolved`并返回结果，当执行reject状态改为`rejected`也返回结果\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n```\n\n简单测试\n\n```js\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'resolved', PromiseResult: 111}\n\nlet p2 = new MyPromise((resolve, reject) => {\n  reject('失败')\n})\nconsole.log(p2)  // MyPromise { PromiseState: 'rejected', PromiseResult: '失败'}\n```\n\n但是有个问题，如果测试代码改成这样， promise的状态由`pendding`改成了`resolved`， 接着又新改成了`rejected`，这跟我们的初衷违背`promise的状态不可逆`\n\n```js\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功')\n  reject('失败')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'rejected', PromiseResult: '失败'}\n```\n\n既然发现了问题，那么解决其实很简单，只需要判断修改前的状态是否是`pendding` 就可以， 如果是 `pendding` 则状态可以修改，如果不是那么状态定死不可修改\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功11')\n  reject('失败11')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'resolved', PromiseResult: '成功11'}\n```\n\n之前说过，promise执行`reject`有两种情况，`1. 构造函数调用` 、`2. 抛出异常`\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    // 构造函数内抛出异常，直接执行 catch\n    try {\n      executor(this.resolve, this.reject)\n    } catch {\n      this.reject()\n    }\n    \n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n\nlet p = new MyPromise((resolve, reject) => {\n  throw '直接报错'\n})\nconsole.log(p)  // MyPromise {PromiseState: 'rejected', PromiseResult: '直接报错' }\n```\n\nok，我们基本搞定了Promise类的功能，待会我们再完善。\n\n### Promise.then() 的实现\n\npromise 的then可以接受两个回调函数，一个是成功回调，一个是失败回调。\n\n1. 当promise的状态为 `resolved` 则执行**成功**回调函数，当promise的状态为 `rejected` 则执行**失败** 回调函数\n\n   ```js\n// then 接受两个回调函数 onResolve成功  onRejct失败\nMyPromise.prototype.then = function(onResolve, onReject) {\n    // then接收两个函数，所以需要校验下\n    // 1. 传递的是函数 则正常使用\n    // 2. 传递的不是函数 则修改成函数\n    onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n    onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n     if(this.PromiseState === 'resolved') {\n       onResolve(this.PromiseResult)\n     } else if(this.PromiseState === 'rejected') {\n       onReject(this.PromiseResult)\n     }\n      console.log('1. 当构造函数里有定时器时，先执行了 then 函数')\n   }\n   \n   \n   new MyPromise((resolve, reject) => {\n     resolve('成功')\n   }).then(res => {\n     console.log(res) // 成功\n   })\n   \n   new MyPromise((resolve, reject) => {\n     reject('错了')\n   }).then(() => {}, err => {\n     console.log(err)  // 错了\n   })\n   \n   new MyPromise((resolve, reject) => {\n     throw '错了22'\n   }).then(() => {}, err => {\n     console.log(err)  // 错了22\n   })\n   \n   // ******** 有个问题 ********\n   new MyPromise((resolve, reject) => {\n     setTimeout(() => {\n       console.log('2. 再执行的异步定时器')\n       resolve('成功')\n     }, 1000)\n   \n   }).then(res => {\n     console.log(res)\n   })\n   // 打印\n   // 先执行: 1. 当构造函数里有定时器时，先执行了 then 函数\n   // 等一秒钟后: 2. 再执行的异步定时器\n   ```\n2. 如果resolve或者reject在定时器里，则等定时器结束在执行\n\n   当promise为`pendding`，则说明定时器调用，并将定时器内的方法挂载起来\n\n   当定时器时间结束，则promise的状态发生改变，重新调用定时器里的方法\n\n   由于then可以串联，所以可能挂载的方法很多，最好用数组进行存储\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    // 构造函数内抛出异常，直接执行 catch\n    try {\n      executor(this.resolve, this.reject)\n    } catch(err) {\n      this.reject(err)\n    }\n    \n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n\n    // 创建两个容器，存放函数\n    this.onResolveArr = []\n    this.onRejectArr = []\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n\n    // 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数\n    if(this.onResolveArr.length) {\n      this.onResolveArr.shift()(this.PromiseResult)\n    }\n  }\n\n  reject(reason) {\n    console.log('88')\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n\n    // 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数\n    if(this.onRejectArr.length) {\n      this.onRejectArr.shift()(this.PromiseResult)\n    }\n  }\n}\n\nMyPromise.prototype.then = function(onResolve, onReject) {\n  // then接收两个函数，所以需要校验下\n  // 1. 传递的是函数 则正常使用\n  // 2. 传递的不是函数 则修改成函数\n  onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n  onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n\n  if(this.PromiseState === 'resolved') {\n    onResolve(this.PromiseResult)\n  } else if(this.PromiseState === 'rejected') {\n    onReject(this.PromiseResult)\n  } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n    this.onResolveArr.push(onResolve.bind(this))\n    this.onRejectArr.push(onReject.bind(this))\n  }\n}\n\nnew MyPromise(resolve=> {\n    setTimeout(() => {\n        resolve('成功')\n    }, 1000)\n}).then(res => console.log(res))  // 一秒后打印 成功\n\n```\n\n\n3. then是支持链式调用的，then能够链式调用的关键在于，整个then方法返回值也是一个promise，而这个返回的promise到底是成功还是失败，分为三种情况：\n\n   a.  返回值是promise对象，返回值为成功，新的promise为成功\n\n   b.  返回值是promise对象，返回值为失败，新的promise为失败\n\n   c.  返回值不是promise对象，返回值为成功，值就是这个返回值\n\n   ```js\nMyPromise.prototype.then = function(onResolve, onReject) {\n    // then接收两个函数，所以需要校验下\n    // 1. 传递的是函数 则正常使用\n    // 2. 传递的不是函数 则修改成函数\n    onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n    onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n    let thenPromise = new MyPromise((resolve, reject) => {\n      const resolvePromise = cb => {\n        try {\n              let result = cb(this.PromiseResult)\n              // 说明返回的是一个Promise对象\n              if(result instanceof MyPromise) {  \n                // 到底是成功还是失败，得交给then\n                result.then(resolve, reject)\n              } else {  // 其他值 当成成功处理\n                resolve(result)\n              }\n        } catch(err) {  // 捕获代码的异常\n            reject(err)\n            throw new Error(err)\n        }\n      }\n  \n      if(this.PromiseState === 'resolved') {\n          resolvePromise(onResolve)\n      } else if(this.PromiseState === 'rejected') {\n          resolvePromise(onReject)\n      } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n          this.onResolveArr.push(onResolve.bind(this))\n          this.onRejectArr.push(onReject.bind(this))\n      }\n    })\n  \n    // then的返回值是一个promise, 解决了链式调用问题\n    return thenPromise\n  }\n  \n  new MyPromise((resolve, reject) => {\n    resolve('第一层')\n  }).then(res => {\n    console.log(res)  // 第一层\n    return new MyPromise((resolve, reject) => reject('第二层'))\n  }).then(res => {}, err => {\n    console.log(err)  // 第二层\n  })\n  ```\n\n\n\n4. promise的then其实是一个微任务，也就是需要等同步任务做完在执行then\n\n   ```js\nlet thenPromise = new MyPromise((resolve, reject) => {\n    const resolvePromise = cb => {\n      // 加一个定时器,别介意苦笑😂\n      // 这样就会等待同步执行完, 再执行微任务 then\n      setTimeout(() => {\n        try {\n          let result = cb(this.PromiseResult)\n          // 说明返回的是一个Promise对象\n          if(result instanceof MyPromise) {  \n            // 到底是成功还是失败，得交给then\n            result.then(resolve, reject)\n          } else {  // 其他值 当成成功处理\n            resolve(result)\n          }\n  \n        } catch(err) {  // 捕获代码的异常\n          reject(err)\n          throw new Error(err)\n        }\n      })\n      \n    }\n\n    if(this.PromiseState === 'resolved') {\n      resolvePromise(onResolve)\n    } else if(this.PromiseState === 'rejected') {\n      resolvePromise(onReject)\n    } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n      this.onResolveArr.push(onResolve.bind(this))\n      this.onRejectArr.push(onReject.bind(this))\n    }\n\n  })\n   ```\n\n### Promise.all的实现\n\n- 接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n- 如果所有Promise都成功，则返回成功结果数组\n- 如果有一个Promise失败，则返回这个失败结果\n\n```js\nclass MyPromise {  \n  ...\n  ...\n  \n  static all(list) {\n    const result = []\n    let count = 0\n    return new MyPromise((resolve, reject) => {\n      const addData = (index, value) => {\n        result[index] = value\n        count++\n        if (count === list.length) {\n          resolve(result)\n        }\n      }\n\n      list.forEach((item, index) => {\n        if (item instanceof MyPromise) {\n          item.then(res => {\n            addData(index, res)\n          }, err => reject(err))\n        } else {\n          addData(index, item)\n        }\n      })\n    })\n  }\n}\n\nlet p1 = new MyPromise(resolve => {\n  resolve(1)\n})\nlet p2 = new MyPromise(resolve => {\n  resolve(2)\n})\nlet p3 = new MyPromise(resolve => {\n  resolve(3)\n})\n\nMyPromise.all([p1, p2, p3]).then(res => {\n  console.log(res) // [1, 2, 3]\n})\n\n```\n\n### Promise.race的实现\n\n- 接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n- 哪个Promise最快得到结果，就返回那个结果，无论成功失败\n\n```js\nclass MyPromise {  \n  ...\n  ...\n  \n  static race(promises) {\n    return new MyPromise((resolve, reject) => {\n      promises.forEach((promise) => {\n        if (promise instanceof MyPromise) {\n          promise.then(\n            (res) => {\n              resolve(res)\n            },\n            (err) => {\n              reject(err)\n            }\n          )\n        } else {\n          resolve(promise)\n        }\n      })\n    })\n  }\n}\n\nlet p1 = new MyPromise(resolve => {\n  resolve(1)\n})\nlet p2 = new MyPromise(resolve => {\n  resolve(2)\n})\nlet p3 = new MyPromise(resolve => {\n  resolve(3)\n})\n\nMyPromise.race([p1, p2, p3]).then(res => {\n  console.log(res) // 1\n})\n```\n\n","slug":"JS/01-手写Promise","published":1,"date":"2023-03-01T02:51:30.445Z","updated":"2023-02-28T16:23:12.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clesom00i00025oup1d0lgygd","content":"<h3 id=\"Promise-的基本语法\"><a href=\"#Promise-的基本语法\" class=\"headerlink\" title=\"Promise 的基本语法\"></a>Promise 的基本语法</h3><p>promise 是 es6 提供的解决异步编程的新语法， 主要解决两个问题，第一个解决之前回调地狱(层层嵌套)， 第二个不需要立即指定回调函数，还可以在异步操作执行完提供。</p>\n<p>promise 可以有三个状态 <code>pendding</code>、<code>resolved</code>、<code>rejected</code>，并且是不可逆的。</p>\n<ol>\n<li><p>由<code>pendding</code> 变成 <code>resolved</code>: </p>\n<p>a. 构造函数内调用 resolve</p>\n</li>\n<li><p>由 <code>pendding</code> 变成 <code>rejected</code></p>\n</li>\n</ol>\n<p>​       a. 构造函数调用reject</p>\n<p>​       b. 构造函数抛出错误</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Promise-构造函数的书写\"><a href=\"#Promise-构造函数的书写\" class=\"headerlink\" title=\"Promise 构造函数的书写\"></a>Promise 构造函数的书写</h3><p>之前说了 promise是有状态的<code>pendding</code>，并且需要返回数据暂定<code>null</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态  </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>promise的初始状态是<code>pendding</code>，并且 <code>resolve</code>和<code>reject</code>函数的this需要指向promise实例，防止随着函数执行环境而改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当执行resolve则状态改为<code>resolved</code>并返回结果，当执行reject状态改为<code>rejected</code>也返回结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;resolved&#x27;, PromiseResult: 111&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p2)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;失败&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是有个问题，如果测试代码改成这样， promise的状态由<code>pendding</code>改成了<code>resolved</code>， 接着又新改成了<code>rejected</code>，这跟我们的初衷违背<code>promise的状态不可逆</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;失败&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>既然发现了问题，那么解决其实很简单，只需要判断修改前的状态是否是<code>pendding</code> 就可以， 如果是 <code>pendding</code> 则状态可以修改，如果不是那么状态定死不可修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功11&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败11&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;resolved&#x27;, PromiseResult: &#x27;成功11&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>之前说过，promise执行<code>reject</code>有两种情况，<code>1. 构造函数调用</code> 、<code>2. 抛出异常</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数内抛出异常，直接执行 catch</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;直接报错&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123;PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;直接报错&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>ok，我们基本搞定了Promise类的功能，待会我们再完善。</p>\n<h3 id=\"Promise-then-的实现\"><a href=\"#Promise-then-的实现\" class=\"headerlink\" title=\"Promise.then() 的实现\"></a>Promise.then() 的实现</h3><p>promise 的then可以接受两个回调函数，一个是成功回调，一个是失败回调。</p>\n<ol>\n<li><p>当promise的状态为 <code>resolved</code> 则执行<strong>成功</strong>回调函数，当promise的状态为 <code>rejected</code> 则执行<strong>失败</strong> 回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// then 接受两个回调函数 onResolve成功  onRejct失败</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">    onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">    onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1. 当构造函数里有定时器时，先执行了 then 函数&#x27;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 成功</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;错了&#x27;</span>)</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 错了</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;错了22&#x27;</span></span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 错了22</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// ******** 有个问题 ********</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2. 再执行的异步定时器&#x27;</span>)</span><br><span class=\"line\">       <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">     &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"comment\">// 打印</span></span><br><span class=\"line\">   <span class=\"comment\">// 先执行: 1. 当构造函数里有定时器时，先执行了 then 函数</span></span><br><span class=\"line\">   <span class=\"comment\">// 等一秒钟后: 2. 再执行的异步定时器</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果resolve或者reject在定时器里，则等定时器结束在执行</p>\n<p>当promise为<code>pendding</code>，则说明定时器调用，并将定时器内的方法挂载起来</p>\n<p>当定时器时间结束，则promise的状态发生改变，重新调用定时器里的方法</p>\n<p>由于then可以串联，所以可能挂载的方法很多，最好用数组进行存储</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数内抛出异常，直接执行 catch</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建两个容器，存放函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;88&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">  onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">  onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))  <span class=\"comment\">// 一秒后打印 成功</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li><p>then是支持链式调用的，then能够链式调用的关键在于，整个then方法返回值也是一个promise，而这个返回的promise到底是成功还是失败，分为三种情况：</p>\n<p>a.  返回值是promise对象，返回值为成功，新的promise为成功</p>\n<p>b.  返回值是promise对象，返回值为失败，新的promise为失败</p>\n<p>c.  返回值不是promise对象，返回值为成功，值就是这个返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">    onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">    onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = cb =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> result = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">              <span class=\"comment\">// 说明返回的是一个Promise对象</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;  </span><br><span class=\"line\">                <span class=\"comment\">// 到底是成功还是失败，得交给then</span></span><br><span class=\"line\">                result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 其他值 当成成功处理</span></span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(err) &#123;  <span class=\"comment\">// 捕获代码的异常</span></span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(onResolve)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(onReject)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// then的返回值是一个promise, 解决了链式调用问题</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> thenPromise</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;第一层&#x27;</span>)</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)  <span class=\"comment\">// 第一层</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;第二层&#x27;</span>))</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 第二层</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ol start=\"4\">\n<li><p>promise的then其实是一个微任务，也就是需要等同步任务做完在执行then</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = cb =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 加一个定时器,别介意苦笑😂</span></span><br><span class=\"line\">      <span class=\"comment\">// 这样就会等待同步执行完, 再执行微任务 then</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> result = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 说明返回的是一个Promise对象</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 到底是成功还是失败，得交给then</span></span><br><span class=\"line\">            result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 其他值 当成成功处理</span></span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(err) &#123;  <span class=\"comment\">// 捕获代码的异常</span></span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolvePromise</span>(onResolve)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolvePromise</span>(onReject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Promise-all的实现\"><a href=\"#Promise-all的实现\" class=\"headerlink\" title=\"Promise.all的实现\"></a>Promise.all的实现</h3><ul>\n<li>接收一个Promise数组，数组中如有非Promise项，则此项当做成功</li>\n<li>如果所有Promise都成功，则返回成功结果数组</li>\n<li>如果有一个Promise失败，则返回这个失败结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">addData</span> = (<span class=\"params\">index, value</span>) =&gt; &#123;</span><br><span class=\"line\">        result[index] = value</span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count === list.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          item.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">addData</span>(index, res)</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"title function_\">reject</span>(err))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">addData</span>(index, item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race的实现\"><a href=\"#Promise-race的实现\" class=\"headerlink\" title=\"Promise.race的实现\"></a>Promise.race的实现</h3><ul>\n<li>接收一个Promise数组，数组中如有非Promise项，则此项当做成功</li>\n<li>哪个Promise最快得到结果，就返回那个结果，无论成功失败</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">race</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      promises.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">promise</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(promise)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"Promise-的基本语法\"><a href=\"#Promise-的基本语法\" class=\"headerlink\" title=\"Promise 的基本语法\"></a>Promise 的基本语法</h3><p>promise 是 es6 提供的解决异步编程的新语法， 主要解决两个问题，第一个解决之前回调地狱(层层嵌套)， 第二个不需要立即指定回调函数，还可以在异步操作执行完提供。</p>\n<p>promise 可以有三个状态 <code>pendding</code>、<code>resolved</code>、<code>rejected</code>，并且是不可逆的。</p>\n<ol>\n<li><p>由<code>pendding</code> 变成 <code>resolved</code>: </p>\n<p>a. 构造函数内调用 resolve</p>\n</li>\n<li><p>由 <code>pendding</code> 变成 <code>rejected</code></p>\n</li>\n</ol>\n<p>​       a. 构造函数调用reject</p>\n<p>​       b. 构造函数抛出错误</p>","more":"<h3 id=\"Promise-构造函数的书写\"><a href=\"#Promise-构造函数的书写\" class=\"headerlink\" title=\"Promise 构造函数的书写\"></a>Promise 构造函数的书写</h3><p>之前说了 promise是有状态的<code>pendding</code>，并且需要返回数据暂定<code>null</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态  </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>promise的初始状态是<code>pendding</code>，并且 <code>resolve</code>和<code>reject</code>函数的this需要指向promise实例，防止随着函数执行环境而改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当执行resolve则状态改为<code>resolved</code>并返回结果，当执行reject状态改为<code>rejected</code>也返回结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;resolved&#x27;, PromiseResult: 111&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p2)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;失败&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是有个问题，如果测试代码改成这样， promise的状态由<code>pendding</code>改成了<code>resolved</code>， 接着又新改成了<code>rejected</code>，这跟我们的初衷违背<code>promise的状态不可逆</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;失败&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>既然发现了问题，那么解决其实很简单，只需要判断修改前的状态是否是<code>pendding</code> 就可以， 如果是 <code>pendding</code> 则状态可以修改，如果不是那么状态定死不可修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功11&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败11&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;resolved&#x27;, PromiseResult: &#x27;成功11&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>之前说过，promise执行<code>reject</code>有两种情况，<code>1. 构造函数调用</code> 、<code>2. 抛出异常</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数内抛出异常，直接执行 catch</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;直接报错&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123;PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;直接报错&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>ok，我们基本搞定了Promise类的功能，待会我们再完善。</p>\n<h3 id=\"Promise-then-的实现\"><a href=\"#Promise-then-的实现\" class=\"headerlink\" title=\"Promise.then() 的实现\"></a>Promise.then() 的实现</h3><p>promise 的then可以接受两个回调函数，一个是成功回调，一个是失败回调。</p>\n<ol>\n<li><p>当promise的状态为 <code>resolved</code> 则执行<strong>成功</strong>回调函数，当promise的状态为 <code>rejected</code> 则执行<strong>失败</strong> 回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// then 接受两个回调函数 onResolve成功  onRejct失败</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">    onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">    onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1. 当构造函数里有定时器时，先执行了 then 函数&#x27;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 成功</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;错了&#x27;</span>)</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 错了</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;错了22&#x27;</span></span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 错了22</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// ******** 有个问题 ********</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2. 再执行的异步定时器&#x27;</span>)</span><br><span class=\"line\">       <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">     &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"comment\">// 打印</span></span><br><span class=\"line\">   <span class=\"comment\">// 先执行: 1. 当构造函数里有定时器时，先执行了 then 函数</span></span><br><span class=\"line\">   <span class=\"comment\">// 等一秒钟后: 2. 再执行的异步定时器</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果resolve或者reject在定时器里，则等定时器结束在执行</p>\n<p>当promise为<code>pendding</code>，则说明定时器调用，并将定时器内的方法挂载起来</p>\n<p>当定时器时间结束，则promise的状态发生改变，重新调用定时器里的方法</p>\n<p>由于then可以串联，所以可能挂载的方法很多，最好用数组进行存储</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数内抛出异常，直接执行 catch</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建两个容器，存放函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;88&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">  onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">  onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))  <span class=\"comment\">// 一秒后打印 成功</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li><p>then是支持链式调用的，then能够链式调用的关键在于，整个then方法返回值也是一个promise，而这个返回的promise到底是成功还是失败，分为三种情况：</p>\n<p>a.  返回值是promise对象，返回值为成功，新的promise为成功</p>\n<p>b.  返回值是promise对象，返回值为失败，新的promise为失败</p>\n<p>c.  返回值不是promise对象，返回值为成功，值就是这个返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">    onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">    onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = cb =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> result = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">              <span class=\"comment\">// 说明返回的是一个Promise对象</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;  </span><br><span class=\"line\">                <span class=\"comment\">// 到底是成功还是失败，得交给then</span></span><br><span class=\"line\">                result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 其他值 当成成功处理</span></span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(err) &#123;  <span class=\"comment\">// 捕获代码的异常</span></span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(onResolve)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(onReject)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// then的返回值是一个promise, 解决了链式调用问题</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> thenPromise</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;第一层&#x27;</span>)</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)  <span class=\"comment\">// 第一层</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;第二层&#x27;</span>))</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 第二层</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ol start=\"4\">\n<li><p>promise的then其实是一个微任务，也就是需要等同步任务做完在执行then</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = cb =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 加一个定时器,别介意苦笑😂</span></span><br><span class=\"line\">      <span class=\"comment\">// 这样就会等待同步执行完, 再执行微任务 then</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> result = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 说明返回的是一个Promise对象</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 到底是成功还是失败，得交给then</span></span><br><span class=\"line\">            result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 其他值 当成成功处理</span></span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(err) &#123;  <span class=\"comment\">// 捕获代码的异常</span></span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolvePromise</span>(onResolve)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolvePromise</span>(onReject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Promise-all的实现\"><a href=\"#Promise-all的实现\" class=\"headerlink\" title=\"Promise.all的实现\"></a>Promise.all的实现</h3><ul>\n<li>接收一个Promise数组，数组中如有非Promise项，则此项当做成功</li>\n<li>如果所有Promise都成功，则返回成功结果数组</li>\n<li>如果有一个Promise失败，则返回这个失败结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">addData</span> = (<span class=\"params\">index, value</span>) =&gt; &#123;</span><br><span class=\"line\">        result[index] = value</span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count === list.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          item.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">addData</span>(index, res)</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"title function_\">reject</span>(err))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">addData</span>(index, item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race的实现\"><a href=\"#Promise-race的实现\" class=\"headerlink\" title=\"Promise.race的实现\"></a>Promise.race的实现</h3><ul>\n<li>接收一个Promise数组，数组中如有非Promise项，则此项当做成功</li>\n<li>哪个Promise最快得到结果，就返回那个结果，无论成功失败</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">race</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      promises.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">promise</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(promise)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"手写 axios","_content":"\n### 手写axios\n\n`axios` 是当前比较流行的发请求的一个第三方库，`axios` 支持浏览器和node端，支持 promise语法，有丰富的配置项`拦截器`，那我们来一起边使用`axios`，边手动写一下`axios`的方法吧。\n\n<!-- more -->\n\n```js\nimport axios from 'axios'\n\n// 请求方式 1\naxios({\n    method: 'GET',\n    url: 'http://ajax-api.itheima.net/api/settings'\n}).then(res => console.log(res))\n\n// 请求方式 2\naxios.get('http://ajax-api.itheima.net/api/settings').then(res => console.log(res))\n```\n\n我们发现 `axios`发起请求有两种方式，我们来简单实现下\n\n```js\nclass MyAxios {\n  request(config) {\n    // 这里真正发起请求,并且使用 Promise封装就好了\n    return new Promise((resolve, reject) => {\n      const {method = 'GET', url = '', data = {}} = config\n\n      let xhr = new XMLHttpRequest()\n      xhr.open(method, url)\n      xhr.send(data)\n\n      xhr.onreadystatechange = function() {\n        if(xhr.readyState === 4 && xhr.status === 200) {\n          resolve({\n            status: 200,\n            data: JSON.parse(xhr.responseText),\n            statusText: 'OK'\n          })\n        }\n      }\n    })\n  }\n}\n\n\nfunction createMyAxios (){\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n  \n  return request\n}\n\nconst myaxios = createMyAxios()\n// 已经实现了axios方式一\nmyaxios({\n  method: 'GET',\n  url: 'http://ajax-api.itheima.net/api/settings'\n}).then(res => console.log(res))\n```\n\n`myaxios` 已经能够直接调用发起请求了。\n\n那么方式二怎么解决呢，并且除了`get`,还有其他比如`post`、`delete`、等请求，我们可以把请求方法手机成一个数组，然后循环遍历依次创建请求就好。\n\n```js\nlet methodList = ['get', 'delete', 'head', 'options', 'put', 'post', 'patch']\n\nmethodList.forEach(method => {\n  MyAxios.prototype[method] = function(...arg) {\n    if(['get','delete','head','options'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0]\n      })\n    } else if(['put', 'post', 'patch'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0],\n        data: arg[1]\n      })\n    }\n  }\n})\n```\n\n我们已经给 MyAxios的原型对象挂载好方法了， 但是我们导出的`request` 是没有这些方法的，所以有必要把原型对象下的方法，复制到`request`里，所以我们封装一个方法。\n\n```js\nfunction extendFn(target, source, context) {\n  for(let key in source) {\n    if(source.hasOwnProperty(key)) {\n      if(typeof source[key] === 'function') {\n        // 这里注意, 函数可能有this不能直接赋值\n        // 所以把当前上下文环境 绑定过来\n        target[key] = source[key].bind(context)\n      } else {\n        target[key] = source[key]\n      }\n    }\n  }\n}\n```\n\n函数封装好了，我们调用函数，把原型对象下的方法，复制到`request`函数对象里\n\n```js\nfunction createMyAxios() {\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n\n  // 原型对象方法 复制到 request函数对象中\n  extendFn(request, MyAxios.prototype, myaxios)\n  \n  return request\n}\n```\n\n这样，我们终于可以用第二种方式发请求了, 完整代码如下\n\n```js\nclass MyAxios {\n  request(config) {\n    // 这里真正发起请求,并且使用 Promise封装就好了\n    return new Promise((resolve, reject) => {\n    \n      const {method = 'GET', url = '', data = {}} = config\n\n      let xhr = new XMLHttpRequest()\n      xhr.open(method, url)\n      xhr.send(data)\n\n      xhr.onreadystatechange = function() {\n        if(xhr.readyState === 4 && xhr.status === 200) {\n          resolve({\n            status: 200,\n            data: JSON.parse(xhr.responseText),\n            statusText: 'OK'\n          })\n        }\n      }\n    })\n  }\n}\n\nlet methodList = ['get', 'delete', 'head', 'options', 'put', 'post', 'patch']\n\nmethodList.forEach(method => {\n  MyAxios.prototype[method] = function(...arg) {\n    if(['get','delete','head','options'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0]\n      })\n    } else if(['put', 'post', 'patch'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0],\n        data: arg[1]\n      })\n    }\n  }\n})\n\nfunction extendFn(target, source, context) {\n  for(let key in source) {\n    if(source.hasOwnProperty(key)) {\n      if(typeof source[key] === 'function') {\n        // 这里注意, 函数可能有this不能直接赋值\n        // 所以把当前上下文环境 绑定过来\n        target[key] = source[key].bind(context)\n      } else {\n        target[key] = source[key]\n      }\n    }\n  }\n}\n\nfunction createMyAxios() {\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n\n  extendFn(request, MyAxios.prototype, myaxios)\n  \n  return request\n}\n\nconst myaxios = createMyAxios()\n\nmyaxios.get('http://ajax-api.itheima.net/api/settings').then(res => console.log(res))\n\n```\n\n\n\n","source":"_posts/JS/02-手写axios.md","raw":"---\ntitle: 手写 axios\ntags: JS\n---\n\n### 手写axios\n\n`axios` 是当前比较流行的发请求的一个第三方库，`axios` 支持浏览器和node端，支持 promise语法，有丰富的配置项`拦截器`，那我们来一起边使用`axios`，边手动写一下`axios`的方法吧。\n\n<!-- more -->\n\n```js\nimport axios from 'axios'\n\n// 请求方式 1\naxios({\n    method: 'GET',\n    url: 'http://ajax-api.itheima.net/api/settings'\n}).then(res => console.log(res))\n\n// 请求方式 2\naxios.get('http://ajax-api.itheima.net/api/settings').then(res => console.log(res))\n```\n\n我们发现 `axios`发起请求有两种方式，我们来简单实现下\n\n```js\nclass MyAxios {\n  request(config) {\n    // 这里真正发起请求,并且使用 Promise封装就好了\n    return new Promise((resolve, reject) => {\n      const {method = 'GET', url = '', data = {}} = config\n\n      let xhr = new XMLHttpRequest()\n      xhr.open(method, url)\n      xhr.send(data)\n\n      xhr.onreadystatechange = function() {\n        if(xhr.readyState === 4 && xhr.status === 200) {\n          resolve({\n            status: 200,\n            data: JSON.parse(xhr.responseText),\n            statusText: 'OK'\n          })\n        }\n      }\n    })\n  }\n}\n\n\nfunction createMyAxios (){\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n  \n  return request\n}\n\nconst myaxios = createMyAxios()\n// 已经实现了axios方式一\nmyaxios({\n  method: 'GET',\n  url: 'http://ajax-api.itheima.net/api/settings'\n}).then(res => console.log(res))\n```\n\n`myaxios` 已经能够直接调用发起请求了。\n\n那么方式二怎么解决呢，并且除了`get`,还有其他比如`post`、`delete`、等请求，我们可以把请求方法手机成一个数组，然后循环遍历依次创建请求就好。\n\n```js\nlet methodList = ['get', 'delete', 'head', 'options', 'put', 'post', 'patch']\n\nmethodList.forEach(method => {\n  MyAxios.prototype[method] = function(...arg) {\n    if(['get','delete','head','options'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0]\n      })\n    } else if(['put', 'post', 'patch'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0],\n        data: arg[1]\n      })\n    }\n  }\n})\n```\n\n我们已经给 MyAxios的原型对象挂载好方法了， 但是我们导出的`request` 是没有这些方法的，所以有必要把原型对象下的方法，复制到`request`里，所以我们封装一个方法。\n\n```js\nfunction extendFn(target, source, context) {\n  for(let key in source) {\n    if(source.hasOwnProperty(key)) {\n      if(typeof source[key] === 'function') {\n        // 这里注意, 函数可能有this不能直接赋值\n        // 所以把当前上下文环境 绑定过来\n        target[key] = source[key].bind(context)\n      } else {\n        target[key] = source[key]\n      }\n    }\n  }\n}\n```\n\n函数封装好了，我们调用函数，把原型对象下的方法，复制到`request`函数对象里\n\n```js\nfunction createMyAxios() {\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n\n  // 原型对象方法 复制到 request函数对象中\n  extendFn(request, MyAxios.prototype, myaxios)\n  \n  return request\n}\n```\n\n这样，我们终于可以用第二种方式发请求了, 完整代码如下\n\n```js\nclass MyAxios {\n  request(config) {\n    // 这里真正发起请求,并且使用 Promise封装就好了\n    return new Promise((resolve, reject) => {\n    \n      const {method = 'GET', url = '', data = {}} = config\n\n      let xhr = new XMLHttpRequest()\n      xhr.open(method, url)\n      xhr.send(data)\n\n      xhr.onreadystatechange = function() {\n        if(xhr.readyState === 4 && xhr.status === 200) {\n          resolve({\n            status: 200,\n            data: JSON.parse(xhr.responseText),\n            statusText: 'OK'\n          })\n        }\n      }\n    })\n  }\n}\n\nlet methodList = ['get', 'delete', 'head', 'options', 'put', 'post', 'patch']\n\nmethodList.forEach(method => {\n  MyAxios.prototype[method] = function(...arg) {\n    if(['get','delete','head','options'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0]\n      })\n    } else if(['put', 'post', 'patch'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0],\n        data: arg[1]\n      })\n    }\n  }\n})\n\nfunction extendFn(target, source, context) {\n  for(let key in source) {\n    if(source.hasOwnProperty(key)) {\n      if(typeof source[key] === 'function') {\n        // 这里注意, 函数可能有this不能直接赋值\n        // 所以把当前上下文环境 绑定过来\n        target[key] = source[key].bind(context)\n      } else {\n        target[key] = source[key]\n      }\n    }\n  }\n}\n\nfunction createMyAxios() {\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n\n  extendFn(request, MyAxios.prototype, myaxios)\n  \n  return request\n}\n\nconst myaxios = createMyAxios()\n\nmyaxios.get('http://ajax-api.itheima.net/api/settings').then(res => console.log(res))\n\n```\n\n\n\n","slug":"JS/02-手写axios","published":1,"date":"2023-03-01T02:51:30.455Z","updated":"2023-02-28T16:23:35.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clesom00l00045oupgm2y9y89","content":"<h3 id=\"手写axios\"><a href=\"#手写axios\" class=\"headerlink\" title=\"手写axios\"></a>手写axios</h3><p><code>axios</code> 是当前比较流行的发请求的一个第三方库，<code>axios</code> 支持浏览器和node端，支持 promise语法，有丰富的配置项<code>拦截器</code>，那我们来一起边使用<code>axios</code>，边手动写一下<code>axios</code>的方法吧。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求方式 1</span></span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求方式 2</span></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p>我们发现 <code>axios</code>发起请求有两种方式，我们来简单实现下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAxios</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">request</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里真正发起请求,并且使用 Promise封装就好了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;method = <span class=\"string\">&#x27;GET&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>, data = &#123;&#125;&#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(method, url)</span><br><span class=\"line\">      xhr.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>),</span><br><span class=\"line\">            <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;OK&#x27;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span> ()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myaxios = <span class=\"title function_\">createMyAxios</span>()</span><br><span class=\"line\"><span class=\"comment\">// 已经实现了axios方式一</span></span><br><span class=\"line\"><span class=\"title function_\">myaxios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p><code>myaxios</code> 已经能够直接调用发起请求了。</p>\n<p>那么方式二怎么解决呢，并且除了<code>get</code>,还有其他比如<code>post</code>、<code>delete</code>、等请求，我们可以把请求方法手机成一个数组，然后循环遍历依次创建请求就好。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> methodList = [<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;options&#x27;</span>, <span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[method] = <span class=\"keyword\">function</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;delete&#x27;</span>,<span class=\"string\">&#x27;head&#x27;</span>,<span class=\"string\">&#x27;options&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"attr\">data</span>: arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们已经给 MyAxios的原型对象挂载好方法了， 但是我们导出的<code>request</code> 是没有这些方法的，所以有必要把原型对象下的方法，复制到<code>request</code>里，所以我们封装一个方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extendFn</span>(<span class=\"params\">target, source, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里注意, 函数可能有this不能直接赋值</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以把当前上下文环境 绑定过来</span></span><br><span class=\"line\">        target[key] = source[key].<span class=\"title function_\">bind</span>(context)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        target[key] = source[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数封装好了，我们调用函数，把原型对象下的方法，复制到<code>request</code>函数对象里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 原型对象方法 复制到 request函数对象中</span></span><br><span class=\"line\">  <span class=\"title function_\">extendFn</span>(request, <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们终于可以用第二种方式发请求了, 完整代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAxios</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">request</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里真正发起请求,并且使用 Promise封装就好了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;method = <span class=\"string\">&#x27;GET&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>, data = &#123;&#125;&#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(method, url)</span><br><span class=\"line\">      xhr.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>),</span><br><span class=\"line\">            <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;OK&#x27;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> methodList = [<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;options&#x27;</span>, <span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[method] = <span class=\"keyword\">function</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;delete&#x27;</span>,<span class=\"string\">&#x27;head&#x27;</span>,<span class=\"string\">&#x27;options&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"attr\">data</span>: arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extendFn</span>(<span class=\"params\">target, source, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里注意, 函数可能有this不能直接赋值</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以把当前上下文环境 绑定过来</span></span><br><span class=\"line\">        target[key] = source[key].<span class=\"title function_\">bind</span>(context)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        target[key] = source[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">extendFn</span>(request, <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myaxios = <span class=\"title function_\">createMyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">myaxios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"手写axios\"><a href=\"#手写axios\" class=\"headerlink\" title=\"手写axios\"></a>手写axios</h3><p><code>axios</code> 是当前比较流行的发请求的一个第三方库，<code>axios</code> 支持浏览器和node端，支持 promise语法，有丰富的配置项<code>拦截器</code>，那我们来一起边使用<code>axios</code>，边手动写一下<code>axios</code>的方法吧。</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求方式 1</span></span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求方式 2</span></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p>我们发现 <code>axios</code>发起请求有两种方式，我们来简单实现下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAxios</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">request</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里真正发起请求,并且使用 Promise封装就好了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;method = <span class=\"string\">&#x27;GET&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>, data = &#123;&#125;&#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(method, url)</span><br><span class=\"line\">      xhr.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>),</span><br><span class=\"line\">            <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;OK&#x27;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span> ()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myaxios = <span class=\"title function_\">createMyAxios</span>()</span><br><span class=\"line\"><span class=\"comment\">// 已经实现了axios方式一</span></span><br><span class=\"line\"><span class=\"title function_\">myaxios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p><code>myaxios</code> 已经能够直接调用发起请求了。</p>\n<p>那么方式二怎么解决呢，并且除了<code>get</code>,还有其他比如<code>post</code>、<code>delete</code>、等请求，我们可以把请求方法手机成一个数组，然后循环遍历依次创建请求就好。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> methodList = [<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;options&#x27;</span>, <span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[method] = <span class=\"keyword\">function</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;delete&#x27;</span>,<span class=\"string\">&#x27;head&#x27;</span>,<span class=\"string\">&#x27;options&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"attr\">data</span>: arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们已经给 MyAxios的原型对象挂载好方法了， 但是我们导出的<code>request</code> 是没有这些方法的，所以有必要把原型对象下的方法，复制到<code>request</code>里，所以我们封装一个方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extendFn</span>(<span class=\"params\">target, source, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里注意, 函数可能有this不能直接赋值</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以把当前上下文环境 绑定过来</span></span><br><span class=\"line\">        target[key] = source[key].<span class=\"title function_\">bind</span>(context)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        target[key] = source[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数封装好了，我们调用函数，把原型对象下的方法，复制到<code>request</code>函数对象里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 原型对象方法 复制到 request函数对象中</span></span><br><span class=\"line\">  <span class=\"title function_\">extendFn</span>(request, <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们终于可以用第二种方式发请求了, 完整代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAxios</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">request</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里真正发起请求,并且使用 Promise封装就好了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;method = <span class=\"string\">&#x27;GET&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>, data = &#123;&#125;&#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(method, url)</span><br><span class=\"line\">      xhr.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>),</span><br><span class=\"line\">            <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;OK&#x27;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> methodList = [<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;options&#x27;</span>, <span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[method] = <span class=\"keyword\">function</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;delete&#x27;</span>,<span class=\"string\">&#x27;head&#x27;</span>,<span class=\"string\">&#x27;options&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"attr\">data</span>: arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extendFn</span>(<span class=\"params\">target, source, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里注意, 函数可能有this不能直接赋值</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以把当前上下文环境 绑定过来</span></span><br><span class=\"line\">        target[key] = source[key].<span class=\"title function_\">bind</span>(context)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        target[key] = source[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">extendFn</span>(request, <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myaxios = <span class=\"title function_\">createMyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">myaxios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"手写瀑布流","_content":"\n瀑布流是我们经常用到的效果，它有一个特点就是`等宽不定高`\n\n那我们如何实现一个这样的效果呢，我们一步一步来做一下\n\n<!-- more -->\n\n首先我们准备容器样式和模拟数据：\n\n```html\n<style>\n    html, body, .container {\n        margin: 0;\n        height: 100vh;\n    }\n    .container {\n        position: relative;\n    }\n    .container div {\n        position: absolute;\n        width: 120px;\n    }\n</style>\n\n<div class=\"container\"></div>\n\n<script>\n    let list =  [\n        {\n            height: 300,\n            background: 'red'\n        },\n        ...\n        ...\n        {\n            height: 400,\n            background: 'pink'\n        },\n     ]\n</script>\n```\n\n`list`就是我们希望渲染到页面的数据，但是我们不能直接循环渲染到页面，我们需要调整调整数组顺序，计算每一项元素的位置，我们准备一个`renderList` 来盛放新数据，我们还需要准备一个`heightList`来盛放每一行的各个元素的高度。\n\n```js\nlet renderList = []  // 用来盛放要渲染的数组\nlet heightList = []  // 盛放每一行元素的高度\n```\n\n那一行到底盛放几个元素呢，我们暂定元素宽度`130px`，那就是页面宽度`document.body.clientWidth`除元素宽度\n\n```js\nlet column = Math.floor(document.body.clientWidth / 130)  // 一行几列\n```\n\n接下来就是循环`list` 先丢满一整行，并记录位置`left`、`top`\n\n```js\nlist.forEach((item, index) => {\n    if(index < column) {\n        item.top = 0\n        item.left = 130 * index\n\n        renderList.push(item)\n        heightList.push(item.height)  // 记录下一整行各个元素的高度\n    }\n})\n```\n\n`renderList`第一行数据我们准备好了，渲染到页面看下效果\n\n```js\nlet result = ``\n\nrenderList.forEach(item => {\n    result += `<div style=\"\n        height: ${item.height}px; \n        background: ${item.background}; \n        left: ${item.left}px; \n        top: ${item.top}px\">\n\t</div>`\n})\n\ndocument.querySelector('.container').innerHTML = result\n```\n\n第一行搞定了😊\n\n接下来难点来了，我们需要接着循环`list`数据并找高度最小的那一列，把数据放到高度最小的下边，以此类推，直到`list`所有数据循环完毕，并每一次都放到重新计算了最小列的下边。\n\n```js\nlist.forEach((item, index) => {\n    if(index < column) {\n        item.top = 0\n        item.left = 130 * index\n\n        renderList.push(item)\n        heightList.push(item.height)  // 记录下一整行各个元素的高度\n    } else {  // 数据超过第一行，就需要逐个元素去判断放置的位置\n        let shotHeight = heightList[0]  // 假设第一个是最小高度\n        let shotIndex = 0  // 假设最小高度的列索引\n\n        heightList.forEach((heightItem, heightIndex) => {  // 循环遍历高度列表\n            if(shotHeight > heightItem) {  // 当高度小于标识 则替换\n                shotHeight = heightItem\n                shotIndex = heightIndex\n            }\n        })\n\n        item.left = 130 * shotIndex  // 设置最小高度列的左偏移\n        item.top = shotHeight + 10  // 给最小高度列下边 并留10px 间距\n\n        renderList.push(item)  // 将元素 放到渲染数组\n\n        heightList[shotIndex] = shotHeight + item.height  // 更新heightlist高度列表\n    }\n})\n```\n\n再次查看效果,成功了。\n\n我们希望页面大小改变重新计算并排列，贴上完整代码：\n\n```js\nlet list =  [\n      {\n          height: 300,\n          background: 'red'\n      },\n   \t  ...\n      ...\n      {\n        height: 400,\n        background: 'skyblue'\n      }\n    ]\n\n    function renderListFn () {\n      let renderList = []  // 用来盛放要渲染的数组\n      let heightList = []  // 盛放每一行元素的高度\n\n      let column = Math.floor(document.body.clientWidth / 130)  // 一行几列\n\n      list.forEach((item, index) => {\n        if(index < column) {\n          item.top = 0\n          item.left = 130 * index\n\n          renderList.push(item)\n          heightList.push(item.height)  // 记录下一整行各个元素的高度\n        } else {  // 数据超过第一行，就需要逐个元素去判断放置的位置\n          let shotHeight = heightList[0]  // 假设第一个是最小高度\n          let shotIndex = 0  // 假设最小高度的列索引\n\n          heightList.forEach((heightItem, heightIndex) => {  // 循环遍历高度列表\n            if(shotHeight > heightItem) {  // 当高度小于标识 则替换\n              shotHeight = heightItem\n              shotIndex = heightIndex\n            }\n          })\n\n          item.left = 130 * shotIndex  // 设置最小高度列的左偏移\n          item.top = shotHeight + 10  // 给最小高度列下边 并留10px 间距\n\n          renderList.push(item)  // 将元素 放到渲染数组\n\n          heightList[shotIndex] = shotHeight + item.height  // 更新heightlist高度列表\n\n\n        }\n      })\n\n      let result = ``\n\n      renderList.forEach(item => {\n        result += `<div style=\"\n          height: ${item.height}px; \n          background: ${item.background}; \n          left: ${item.left}px; \n          top: ${item.top}px\"></div>`\n      })\n\n      document.querySelector('.container').innerHTML = result\n    }\n\n    renderListFn()\n\n    window.onresize = renderListFn\n```\n\n","source":"_posts/JS/03-手写瀑布流.md","raw":"---\ntitle: 手写瀑布流\ntags: JS\n---\n\n瀑布流是我们经常用到的效果，它有一个特点就是`等宽不定高`\n\n那我们如何实现一个这样的效果呢，我们一步一步来做一下\n\n<!-- more -->\n\n首先我们准备容器样式和模拟数据：\n\n```html\n<style>\n    html, body, .container {\n        margin: 0;\n        height: 100vh;\n    }\n    .container {\n        position: relative;\n    }\n    .container div {\n        position: absolute;\n        width: 120px;\n    }\n</style>\n\n<div class=\"container\"></div>\n\n<script>\n    let list =  [\n        {\n            height: 300,\n            background: 'red'\n        },\n        ...\n        ...\n        {\n            height: 400,\n            background: 'pink'\n        },\n     ]\n</script>\n```\n\n`list`就是我们希望渲染到页面的数据，但是我们不能直接循环渲染到页面，我们需要调整调整数组顺序，计算每一项元素的位置，我们准备一个`renderList` 来盛放新数据，我们还需要准备一个`heightList`来盛放每一行的各个元素的高度。\n\n```js\nlet renderList = []  // 用来盛放要渲染的数组\nlet heightList = []  // 盛放每一行元素的高度\n```\n\n那一行到底盛放几个元素呢，我们暂定元素宽度`130px`，那就是页面宽度`document.body.clientWidth`除元素宽度\n\n```js\nlet column = Math.floor(document.body.clientWidth / 130)  // 一行几列\n```\n\n接下来就是循环`list` 先丢满一整行，并记录位置`left`、`top`\n\n```js\nlist.forEach((item, index) => {\n    if(index < column) {\n        item.top = 0\n        item.left = 130 * index\n\n        renderList.push(item)\n        heightList.push(item.height)  // 记录下一整行各个元素的高度\n    }\n})\n```\n\n`renderList`第一行数据我们准备好了，渲染到页面看下效果\n\n```js\nlet result = ``\n\nrenderList.forEach(item => {\n    result += `<div style=\"\n        height: ${item.height}px; \n        background: ${item.background}; \n        left: ${item.left}px; \n        top: ${item.top}px\">\n\t</div>`\n})\n\ndocument.querySelector('.container').innerHTML = result\n```\n\n第一行搞定了😊\n\n接下来难点来了，我们需要接着循环`list`数据并找高度最小的那一列，把数据放到高度最小的下边，以此类推，直到`list`所有数据循环完毕，并每一次都放到重新计算了最小列的下边。\n\n```js\nlist.forEach((item, index) => {\n    if(index < column) {\n        item.top = 0\n        item.left = 130 * index\n\n        renderList.push(item)\n        heightList.push(item.height)  // 记录下一整行各个元素的高度\n    } else {  // 数据超过第一行，就需要逐个元素去判断放置的位置\n        let shotHeight = heightList[0]  // 假设第一个是最小高度\n        let shotIndex = 0  // 假设最小高度的列索引\n\n        heightList.forEach((heightItem, heightIndex) => {  // 循环遍历高度列表\n            if(shotHeight > heightItem) {  // 当高度小于标识 则替换\n                shotHeight = heightItem\n                shotIndex = heightIndex\n            }\n        })\n\n        item.left = 130 * shotIndex  // 设置最小高度列的左偏移\n        item.top = shotHeight + 10  // 给最小高度列下边 并留10px 间距\n\n        renderList.push(item)  // 将元素 放到渲染数组\n\n        heightList[shotIndex] = shotHeight + item.height  // 更新heightlist高度列表\n    }\n})\n```\n\n再次查看效果,成功了。\n\n我们希望页面大小改变重新计算并排列，贴上完整代码：\n\n```js\nlet list =  [\n      {\n          height: 300,\n          background: 'red'\n      },\n   \t  ...\n      ...\n      {\n        height: 400,\n        background: 'skyblue'\n      }\n    ]\n\n    function renderListFn () {\n      let renderList = []  // 用来盛放要渲染的数组\n      let heightList = []  // 盛放每一行元素的高度\n\n      let column = Math.floor(document.body.clientWidth / 130)  // 一行几列\n\n      list.forEach((item, index) => {\n        if(index < column) {\n          item.top = 0\n          item.left = 130 * index\n\n          renderList.push(item)\n          heightList.push(item.height)  // 记录下一整行各个元素的高度\n        } else {  // 数据超过第一行，就需要逐个元素去判断放置的位置\n          let shotHeight = heightList[0]  // 假设第一个是最小高度\n          let shotIndex = 0  // 假设最小高度的列索引\n\n          heightList.forEach((heightItem, heightIndex) => {  // 循环遍历高度列表\n            if(shotHeight > heightItem) {  // 当高度小于标识 则替换\n              shotHeight = heightItem\n              shotIndex = heightIndex\n            }\n          })\n\n          item.left = 130 * shotIndex  // 设置最小高度列的左偏移\n          item.top = shotHeight + 10  // 给最小高度列下边 并留10px 间距\n\n          renderList.push(item)  // 将元素 放到渲染数组\n\n          heightList[shotIndex] = shotHeight + item.height  // 更新heightlist高度列表\n\n\n        }\n      })\n\n      let result = ``\n\n      renderList.forEach(item => {\n        result += `<div style=\"\n          height: ${item.height}px; \n          background: ${item.background}; \n          left: ${item.left}px; \n          top: ${item.top}px\"></div>`\n      })\n\n      document.querySelector('.container').innerHTML = result\n    }\n\n    renderListFn()\n\n    window.onresize = renderListFn\n```\n\n","slug":"JS/03-手写瀑布流","published":1,"date":"2023-03-03T14:35:15.259Z","updated":"2023-03-03T15:13:54.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clesom00m00055oup383cdo7r","content":"<p>瀑布流是我们经常用到的效果，它有一个特点就是<code>等宽不定高</code></p>\n<p>那我们如何实现一个这样的效果呢，我们一步一步来做一下</p>\n<span id=\"more\"></span>\n\n<p>首先我们准备容器样式和模拟数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> list =  [</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">height</span>: <span class=\"number\">300</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">background</span>: <span class=\"string\">&#x27;red&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">background</span>: <span class=\"string\">&#x27;pink&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">     ]</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>list</code>就是我们希望渲染到页面的数据，但是我们不能直接循环渲染到页面，我们需要调整调整数组顺序，计算每一项元素的位置，我们准备一个<code>renderList</code> 来盛放新数据，我们还需要准备一个<code>heightList</code>来盛放每一行的各个元素的高度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> renderList = []  <span class=\"comment\">// 用来盛放要渲染的数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> heightList = []  <span class=\"comment\">// 盛放每一行元素的高度</span></span><br></pre></td></tr></table></figure>\n\n<p>那一行到底盛放几个元素呢，我们暂定元素宽度<code>130px</code>，那就是页面宽度<code>document.body.clientWidth</code>除元素宽度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> column = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / <span class=\"number\">130</span>)  <span class=\"comment\">// 一行几列</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就是循环<code>list</code> 先丢满一整行，并记录位置<code>left</code>、<code>top</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">        item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>renderList</code>第一行数据我们准备好了，渲染到页面看下效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"string\">``</span></span><br><span class=\"line\"></span><br><span class=\"line\">renderList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    result += <span class=\"string\">`&lt;div style=&quot;</span></span><br><span class=\"line\"><span class=\"string\">        height: <span class=\"subst\">$&#123;item.height&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">        background: <span class=\"subst\">$&#123;item.background&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">        left: <span class=\"subst\">$&#123;item.left&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">        top: <span class=\"subst\">$&#123;item.top&#125;</span>px&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>).<span class=\"property\">innerHTML</span> = result</span><br></pre></td></tr></table></figure>\n\n<p>第一行搞定了😊</p>\n<p>接下来难点来了，我们需要接着循环<code>list</code>数据并找高度最小的那一列，把数据放到高度最小的下边，以此类推，直到<code>list</code>所有数据循环完毕，并每一次都放到重新计算了最小列的下边。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">        item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 数据超过第一行，就需要逐个元素去判断放置的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> shotHeight = heightList[<span class=\"number\">0</span>]  <span class=\"comment\">// 假设第一个是最小高度</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> shotIndex = <span class=\"number\">0</span>  <span class=\"comment\">// 假设最小高度的列索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        heightList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">heightItem, heightIndex</span>) =&gt;</span> &#123;  <span class=\"comment\">// 循环遍历高度列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(shotHeight &gt; heightItem) &#123;  <span class=\"comment\">// 当高度小于标识 则替换</span></span><br><span class=\"line\">                shotHeight = heightItem</span><br><span class=\"line\">                shotIndex = heightIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * shotIndex  <span class=\"comment\">// 设置最小高度列的左偏移</span></span><br><span class=\"line\">        item.<span class=\"property\">top</span> = shotHeight + <span class=\"number\">10</span>  <span class=\"comment\">// 给最小高度列下边 并留10px 间距</span></span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)  <span class=\"comment\">// 将元素 放到渲染数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        heightList[shotIndex] = shotHeight + item.<span class=\"property\">height</span>  <span class=\"comment\">// 更新heightlist高度列表</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>再次查看效果,成功了。</p>\n<p>我们希望页面大小改变重新计算并排列，贴上完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list =  [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"attr\">height</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">          <span class=\"attr\">background</span>: <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   \t  ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"string\">&#x27;skyblue&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">renderListFn</span> () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> renderList = []  <span class=\"comment\">// 用来盛放要渲染的数组</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> heightList = []  <span class=\"comment\">// 盛放每一行元素的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> column = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / <span class=\"number\">130</span>)  <span class=\"comment\">// 一行几列</span></span><br><span class=\"line\"></span><br><span class=\"line\">      list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">          item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">          item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">          renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">          heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 数据超过第一行，就需要逐个元素去判断放置的位置</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> shotHeight = heightList[<span class=\"number\">0</span>]  <span class=\"comment\">// 假设第一个是最小高度</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> shotIndex = <span class=\"number\">0</span>  <span class=\"comment\">// 假设最小高度的列索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">          heightList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">heightItem, heightIndex</span>) =&gt;</span> &#123;  <span class=\"comment\">// 循环遍历高度列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(shotHeight &gt; heightItem) &#123;  <span class=\"comment\">// 当高度小于标识 则替换</span></span><br><span class=\"line\">              shotHeight = heightItem</span><br><span class=\"line\">              shotIndex = heightIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">          item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * shotIndex  <span class=\"comment\">// 设置最小高度列的左偏移</span></span><br><span class=\"line\">          item.<span class=\"property\">top</span> = shotHeight + <span class=\"number\">10</span>  <span class=\"comment\">// 给最小高度列下边 并留10px 间距</span></span><br><span class=\"line\"></span><br><span class=\"line\">          renderList.<span class=\"title function_\">push</span>(item)  <span class=\"comment\">// 将元素 放到渲染数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">          heightList[shotIndex] = shotHeight + item.<span class=\"property\">height</span>  <span class=\"comment\">// 更新heightlist高度列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = <span class=\"string\">``</span></span><br><span class=\"line\"></span><br><span class=\"line\">      renderList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        result += <span class=\"string\">`&lt;div style=&quot;</span></span><br><span class=\"line\"><span class=\"string\">          height: <span class=\"subst\">$&#123;item.height&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">          background: <span class=\"subst\">$&#123;item.background&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">          left: <span class=\"subst\">$&#123;item.left&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">          top: <span class=\"subst\">$&#123;item.top&#125;</span>px&quot;&gt;&lt;/div&gt;`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>).<span class=\"property\">innerHTML</span> = result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">renderListFn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = renderListFn</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>瀑布流是我们经常用到的效果，它有一个特点就是<code>等宽不定高</code></p>\n<p>那我们如何实现一个这样的效果呢，我们一步一步来做一下</p>","more":"<p>首先我们准备容器样式和模拟数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> list =  [</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">height</span>: <span class=\"number\">300</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">background</span>: <span class=\"string\">&#x27;red&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">background</span>: <span class=\"string\">&#x27;pink&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">     ]</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>list</code>就是我们希望渲染到页面的数据，但是我们不能直接循环渲染到页面，我们需要调整调整数组顺序，计算每一项元素的位置，我们准备一个<code>renderList</code> 来盛放新数据，我们还需要准备一个<code>heightList</code>来盛放每一行的各个元素的高度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> renderList = []  <span class=\"comment\">// 用来盛放要渲染的数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> heightList = []  <span class=\"comment\">// 盛放每一行元素的高度</span></span><br></pre></td></tr></table></figure>\n\n<p>那一行到底盛放几个元素呢，我们暂定元素宽度<code>130px</code>，那就是页面宽度<code>document.body.clientWidth</code>除元素宽度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> column = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / <span class=\"number\">130</span>)  <span class=\"comment\">// 一行几列</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就是循环<code>list</code> 先丢满一整行，并记录位置<code>left</code>、<code>top</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">        item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>renderList</code>第一行数据我们准备好了，渲染到页面看下效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"string\">``</span></span><br><span class=\"line\"></span><br><span class=\"line\">renderList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    result += <span class=\"string\">`&lt;div style=&quot;</span></span><br><span class=\"line\"><span class=\"string\">        height: <span class=\"subst\">$&#123;item.height&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">        background: <span class=\"subst\">$&#123;item.background&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">        left: <span class=\"subst\">$&#123;item.left&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">        top: <span class=\"subst\">$&#123;item.top&#125;</span>px&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>).<span class=\"property\">innerHTML</span> = result</span><br></pre></td></tr></table></figure>\n\n<p>第一行搞定了😊</p>\n<p>接下来难点来了，我们需要接着循环<code>list</code>数据并找高度最小的那一列，把数据放到高度最小的下边，以此类推，直到<code>list</code>所有数据循环完毕，并每一次都放到重新计算了最小列的下边。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">        item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 数据超过第一行，就需要逐个元素去判断放置的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> shotHeight = heightList[<span class=\"number\">0</span>]  <span class=\"comment\">// 假设第一个是最小高度</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> shotIndex = <span class=\"number\">0</span>  <span class=\"comment\">// 假设最小高度的列索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        heightList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">heightItem, heightIndex</span>) =&gt;</span> &#123;  <span class=\"comment\">// 循环遍历高度列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(shotHeight &gt; heightItem) &#123;  <span class=\"comment\">// 当高度小于标识 则替换</span></span><br><span class=\"line\">                shotHeight = heightItem</span><br><span class=\"line\">                shotIndex = heightIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * shotIndex  <span class=\"comment\">// 设置最小高度列的左偏移</span></span><br><span class=\"line\">        item.<span class=\"property\">top</span> = shotHeight + <span class=\"number\">10</span>  <span class=\"comment\">// 给最小高度列下边 并留10px 间距</span></span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)  <span class=\"comment\">// 将元素 放到渲染数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        heightList[shotIndex] = shotHeight + item.<span class=\"property\">height</span>  <span class=\"comment\">// 更新heightlist高度列表</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>再次查看效果,成功了。</p>\n<p>我们希望页面大小改变重新计算并排列，贴上完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list =  [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"attr\">height</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">          <span class=\"attr\">background</span>: <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   \t  ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"string\">&#x27;skyblue&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">renderListFn</span> () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> renderList = []  <span class=\"comment\">// 用来盛放要渲染的数组</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> heightList = []  <span class=\"comment\">// 盛放每一行元素的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> column = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / <span class=\"number\">130</span>)  <span class=\"comment\">// 一行几列</span></span><br><span class=\"line\"></span><br><span class=\"line\">      list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">          item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">          item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">          renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">          heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 数据超过第一行，就需要逐个元素去判断放置的位置</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> shotHeight = heightList[<span class=\"number\">0</span>]  <span class=\"comment\">// 假设第一个是最小高度</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> shotIndex = <span class=\"number\">0</span>  <span class=\"comment\">// 假设最小高度的列索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">          heightList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">heightItem, heightIndex</span>) =&gt;</span> &#123;  <span class=\"comment\">// 循环遍历高度列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(shotHeight &gt; heightItem) &#123;  <span class=\"comment\">// 当高度小于标识 则替换</span></span><br><span class=\"line\">              shotHeight = heightItem</span><br><span class=\"line\">              shotIndex = heightIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">          item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * shotIndex  <span class=\"comment\">// 设置最小高度列的左偏移</span></span><br><span class=\"line\">          item.<span class=\"property\">top</span> = shotHeight + <span class=\"number\">10</span>  <span class=\"comment\">// 给最小高度列下边 并留10px 间距</span></span><br><span class=\"line\"></span><br><span class=\"line\">          renderList.<span class=\"title function_\">push</span>(item)  <span class=\"comment\">// 将元素 放到渲染数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">          heightList[shotIndex] = shotHeight + item.<span class=\"property\">height</span>  <span class=\"comment\">// 更新heightlist高度列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = <span class=\"string\">``</span></span><br><span class=\"line\"></span><br><span class=\"line\">      renderList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        result += <span class=\"string\">`&lt;div style=&quot;</span></span><br><span class=\"line\"><span class=\"string\">          height: <span class=\"subst\">$&#123;item.height&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">          background: <span class=\"subst\">$&#123;item.background&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">          left: <span class=\"subst\">$&#123;item.left&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">          top: <span class=\"subst\">$&#123;item.top&#125;</span>px&quot;&gt;&lt;/div&gt;`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>).<span class=\"property\">innerHTML</span> = result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">renderListFn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = renderListFn</span><br></pre></td></tr></table></figure>"},{"title":"Vue的响应式","_content":"### 响应式是什么\n\n什么是响应式呢，举个简单例子 \n\n```js\nlet a = 1\n\nlet b = a * 10  // 我们希望 b 是 a 的 10 倍\nconsole.log(b)  // 10\n\na = 5\nconsole.log(b)  // 我们还希望 b 是 a 的 10 倍,那这个时候就麻烦了,需要接着计算 \n```\n\n假设有一个函数`fn` ，当 `a` 改变则函数`fn`自动执行，将`b`重新计算就好了，这其实就是可以简单理解成`响应式`。\n\n说的更准确点，提前准备一个函数`watchEffect`，当函数里面的依赖项(数据)发生更改，就自动执行`watchEffect`，这就是`响应式` 。\n\n<!-- more -->\n\n我们再进一步，函数里的依赖项发生改变，则更新页面，不就是`model`修改，`view`自动更新嘛。\n\n`@nx-js/observer-util` 刚好就提供了类似的功能，只不过函数名叫`observe`。\n\n```js\nimport { observable, observe } from '@nx-js/observer-util'\n\nlet obj = observable({\n  age: 18\n})\n\nobserve(() => {  // 每当数据改变 observe函数 就自动执行\n  console.log(obj.age)\n})\n\nobj.age += 1  // 当 obj.age 增加就会执行observe  19\n\nobj.age += 1  // 当 obj.age 增加就会执行observe  20\n```\n\n理解了`响应式` 是什么，那接下来我们也一步步实现个响应式。\n\n### 发布订阅模式\n\n发布订阅模式是设计模式的一种，说个现实的例子，小刘、小红、小张去电脑城买电脑，但是没有优惠，于是给店员留了电话到电话本上，店员等电脑城搞活动，打电话通知这三个人。店员就是`发布者`，记录了电话的电话本就是`缓存列表`，消费者就是`订阅者` 。\n\n给DOM添加事件的`addEventListener`也是发布订阅。\n\n接下来我们模拟着实现一下\n\n```js\n// 暂时存放 watchEffect 的变量\nlet activeEffect\n\nclass Dep {\n    // 用 Set 做订阅者列表 以防止列表中添加多个完全相同的函数\n    subscribers = new Set()\n\t\n\t// 依赖收集方法\n\tdepend() {\n        // 如果 activeEffect 为空 则代表没有 watcheffect\n        if(activeEffect) {\n            this.subscribers.add(activeEffect)\n        }\n    }\n\n\t// 更新操作 通常在值修改后执行 发布消息\n\tnotify() {\n        this.subscribers.forEach(effect => {\n            effect()\n        })\n    }\n}\n\n// 模仿 Vue3 的 watchEffect 函数\nfunction watchEffect(effect) {\n    // 先把传进来的函数放到 activeEffect\n    activeEffect = effect\n    // 执行一下 watchEffect 里面的函数\n    effect()\n}\n\n// 使用\nlet dep = new Dep()\n// 暂定一个全局变量 age\nlet globalAge = 18\n\nconst user = {\n    get age() {\n        dep.depend()\n        return globalAge\n    },\n    set age(newAge) {\n        globalAge = newAge\n        dep.notify()\n    }\n}\n\nwatchEffect(() => {\n    console.log(user.age)\n})\n\nuser.age += 1\n```\n\n我们初步实现了最初的想法， 每当依赖项`user.age` 修改，都会执行`watchEffect`函数。\n\n而这里的 dep对象 就是`发布者`,  subscribers 就是`缓存列表` ，dep.notify() 是 `发布消息`。\n\n### 代理模式\n\n虽然上边实现了功能，但是用起来太麻烦了，需要提供对象的 `getter`和`setter`，还要提供手动的执行依赖收集函数，这是不方便的，所以需要接着封装。\n\n封装前先简单聊一下`代理模式`， 代理简单说就是，我们需要租房，而我们是很难找到房源的，房源都在中介手里，这个中介就是代理，他给我们介绍什么房子，我们就拿到什么房子。\n\n那我们来一起简单实现下：\n\n```js\nlet activeEffect\n\n// ========= start 这里跟刚才一样 ===========\nclass Dep {\n    subscribers = new Set()\n\t\n\tdepend() {\n        if(activeEffect) {\n             this.subscribers.add(activeEffect)\n        }  \n    }\n\n\tnotify() {\n        this.subscribers.forEach(effect => effect())\n    }\n}\n\nfunction watchEffect(effect) {\n    activeEffect = effect\n    effect()\n}\n\n// ========= end ===========\n\n// 模仿 Vue3 的 reactive\nfunction reactive(raw) {\n    // 遍历对象上存在的 key\n    Object.keys(raw).forEach(key => {\n        // 为每个 key 都创建一个依赖对象\n        let dep = new Dep()\n        \n        let realValue = raw[key]\n        \n        // 用 get 和 set 重写原对象的key\n        Object.defineProperty(raw, key, {\n            // 在 get 和 set 里调用依赖对象的对应方法\n            get() {\n                dep.depend()\n                return realValue\n            },\n            set(newVal) {\n                realValue = newVal\n                dep.notify()\n            }\n        })\n    })\n    \n    return raw\n}\n\n// 使用\nlet obj = reactive({ age: 18 })\nlet fn = () => { console.log(obj.age) }\nwatchEffect(fn)\n\nobj.age += 1  // 每当修改 age 都会执行 fn 19\n\nobj.age += 1  // 每当修改 age 都会执行 fn 20\n```\n\n这里的 `Object.defineProperty`就是做的`代理模式` ，现在在使用方式上基本和 Vue3 一样了。\n\n但还不是最终版本，vue3已经放弃了 `IE`， 并且`Object.defineProperty\t` 在监听对象时，新增的数据是监听不到的。\n\n所以使用了 `Proxy` 来做代理。\n\n### Proxy版\n\n使用了发布订阅+代理模式实现基本的`reactivity`。\n\n```js\n// 定义一个暂时存放 watchEffect 传进来的参数的变量\nlet activeEffect\n\n// 这个Dep应该是Dependence的缩写，意为依赖。实际上就相当于发布-订阅模式中的发布者类\n// 定义一个 Dep 类，该类将会为每一个响应式对象的每一个键生成一个发布者实例\nclass Dep {\n  // 用 Set 做缓存列表以防止列表中添加多个完全相同的函数\n  subscribers = new Set()\n\n  // 构造函数接受一个初始化的值放在私有变量内\n  constructor(value) {\n    this._value = value\n  }\n\n  // 当使用 xxx.value 获取对象上的 value 值时\n  get value() {\n    // 代理模式 当获取对象上的value属性的值时将会触发 depend 方法\n    this.depend()\n\n    // 然后返回私有变量内的值\n    return this._value\n  }\n\n  // 当使用 xxx.value = xxx 修改对象上的 value 值时\n  set value(value) {\n    // 代理模式 当修改对象上的value属性的值时将会触发 notify 方法\n    this._value = value\n    // 先改值再触发 这样保证触发的时候用到的都是已经修改后的新值\n    this.notify()\n  }\n\n  // 这就是我们常说的依赖收集方法\n  depend() {\n    // 如果 activeEffect 这个变量为空 就证明不是在 watchEffect 这个函数里面触发的 get 操作\n    if (activeEffect) {\n      // 但如果 activeEffect 不为空就证明是在 watchEffect 里触发的 get 操作\n      // 那就把 activeEffect 这个存着 watchEffect 参数的变量添加进缓存列表中\n      this.subscribers.add(activeEffect)\n    }\n  }\n\n  // 更新操作 通常会在值被修改后调用\n  notify() {\n    // 遍历缓存列表里存放的函数 并依次触发执行\n    this.subscribers.forEach((effect) => {\n      effect()\n    })\n  }\n}\n// 模仿 Vue3 的 watchEffect 函数\nfunction watchEffect(effect) {\n  // 先把传进来的函数放入到 activeEffect 这个变量中\n  activeEffect = effect\n  // 然后执行 watchEffect 里面的函数\n  effect()\n  activeEffect = null\n}\n\n// 定义一个 WeakMap 数据类型 用于存放 reactive 定义的对象以及他们的发布者对象集\nconst targetToHashMap = new WeakMap()\n\n// 定义 getDep 函数 用于获取 reactive 定义的对象所对应的发布者对象集里的某一个键对应的发布者对象\nfunction getDep(target, key) {\n  // 获取 reactive 定义的对象所对应的发布者对象集\n  let depMap = targetToHashMap.get(target)\n  // 如果没获取到的话\n  if (!depMap) {\n    // 就新建一个空的发布者对象集\n    depMap = new Map()\n    // 然后再把这个发布者对象集存进 WeakMap 里\n    targetToHashMap.set(target, depMap)\n  }\n\n  // 再获取到这个发布者对象集里的某一个键所对应的发布者对象\n  let dep = depMap.get(key)\n\n  // 如果没获取到的话\n  if (!dep) {\n    // 就新建一个发布者对象并初始化赋值\n    dep = new Dep(target[key])\n\n    // 然后将这个发布者对象放入到发布者对象集里\n    depMap.set(key, dep)\n  }\n  // 最后返回这个发布者对象\n  return dep\n}\n\n// 模仿 Vue3 的 reactive 函数\nfunction reactive(obj) {\n  // 返回一个传进来的参数对象的代理对象 以便使用代理模式拦截对象上的操作并应用发布-订阅模式\n  return new Proxy(obj, {\n    // 当触发 get 操作时\n    get(target, key) {\n      // 先调用 getDep 函数取到里面存放的 value 值\n      const value = getDep(target, key).value\n      // 如果 value 是对象的话\n      if (value && typeof value === 'object') {\n        // 那就把 value 也变成一个响应式对象\n        return reactive(value)\n      } else {\n        // 如果 value 只是基本数据类型的话就直接将值返回\n        return value\n      }\n    },\n    // 当触发 set 操作时\n    set(target, key, value) {\n      // 调用 getDep 函数并将里面存放的 value 值重新赋值成 set 操作的值\n      getDep(target, key).value = value\n    }\n  })\n}\n\nconst obj = reactive({\n  age: 18\n})\n\nwatchEffect(() => {\n  console.log(obj.age)\n})\n\nobj.age++\n```\n\n\n\n\n\n","source":"_posts/Vue/01-Vue的Reactivity.md","raw":"---\ntitle: Vue的响应式\ntags: Vue\n---\n### 响应式是什么\n\n什么是响应式呢，举个简单例子 \n\n```js\nlet a = 1\n\nlet b = a * 10  // 我们希望 b 是 a 的 10 倍\nconsole.log(b)  // 10\n\na = 5\nconsole.log(b)  // 我们还希望 b 是 a 的 10 倍,那这个时候就麻烦了,需要接着计算 \n```\n\n假设有一个函数`fn` ，当 `a` 改变则函数`fn`自动执行，将`b`重新计算就好了，这其实就是可以简单理解成`响应式`。\n\n说的更准确点，提前准备一个函数`watchEffect`，当函数里面的依赖项(数据)发生更改，就自动执行`watchEffect`，这就是`响应式` 。\n\n<!-- more -->\n\n我们再进一步，函数里的依赖项发生改变，则更新页面，不就是`model`修改，`view`自动更新嘛。\n\n`@nx-js/observer-util` 刚好就提供了类似的功能，只不过函数名叫`observe`。\n\n```js\nimport { observable, observe } from '@nx-js/observer-util'\n\nlet obj = observable({\n  age: 18\n})\n\nobserve(() => {  // 每当数据改变 observe函数 就自动执行\n  console.log(obj.age)\n})\n\nobj.age += 1  // 当 obj.age 增加就会执行observe  19\n\nobj.age += 1  // 当 obj.age 增加就会执行observe  20\n```\n\n理解了`响应式` 是什么，那接下来我们也一步步实现个响应式。\n\n### 发布订阅模式\n\n发布订阅模式是设计模式的一种，说个现实的例子，小刘、小红、小张去电脑城买电脑，但是没有优惠，于是给店员留了电话到电话本上，店员等电脑城搞活动，打电话通知这三个人。店员就是`发布者`，记录了电话的电话本就是`缓存列表`，消费者就是`订阅者` 。\n\n给DOM添加事件的`addEventListener`也是发布订阅。\n\n接下来我们模拟着实现一下\n\n```js\n// 暂时存放 watchEffect 的变量\nlet activeEffect\n\nclass Dep {\n    // 用 Set 做订阅者列表 以防止列表中添加多个完全相同的函数\n    subscribers = new Set()\n\t\n\t// 依赖收集方法\n\tdepend() {\n        // 如果 activeEffect 为空 则代表没有 watcheffect\n        if(activeEffect) {\n            this.subscribers.add(activeEffect)\n        }\n    }\n\n\t// 更新操作 通常在值修改后执行 发布消息\n\tnotify() {\n        this.subscribers.forEach(effect => {\n            effect()\n        })\n    }\n}\n\n// 模仿 Vue3 的 watchEffect 函数\nfunction watchEffect(effect) {\n    // 先把传进来的函数放到 activeEffect\n    activeEffect = effect\n    // 执行一下 watchEffect 里面的函数\n    effect()\n}\n\n// 使用\nlet dep = new Dep()\n// 暂定一个全局变量 age\nlet globalAge = 18\n\nconst user = {\n    get age() {\n        dep.depend()\n        return globalAge\n    },\n    set age(newAge) {\n        globalAge = newAge\n        dep.notify()\n    }\n}\n\nwatchEffect(() => {\n    console.log(user.age)\n})\n\nuser.age += 1\n```\n\n我们初步实现了最初的想法， 每当依赖项`user.age` 修改，都会执行`watchEffect`函数。\n\n而这里的 dep对象 就是`发布者`,  subscribers 就是`缓存列表` ，dep.notify() 是 `发布消息`。\n\n### 代理模式\n\n虽然上边实现了功能，但是用起来太麻烦了，需要提供对象的 `getter`和`setter`，还要提供手动的执行依赖收集函数，这是不方便的，所以需要接着封装。\n\n封装前先简单聊一下`代理模式`， 代理简单说就是，我们需要租房，而我们是很难找到房源的，房源都在中介手里，这个中介就是代理，他给我们介绍什么房子，我们就拿到什么房子。\n\n那我们来一起简单实现下：\n\n```js\nlet activeEffect\n\n// ========= start 这里跟刚才一样 ===========\nclass Dep {\n    subscribers = new Set()\n\t\n\tdepend() {\n        if(activeEffect) {\n             this.subscribers.add(activeEffect)\n        }  \n    }\n\n\tnotify() {\n        this.subscribers.forEach(effect => effect())\n    }\n}\n\nfunction watchEffect(effect) {\n    activeEffect = effect\n    effect()\n}\n\n// ========= end ===========\n\n// 模仿 Vue3 的 reactive\nfunction reactive(raw) {\n    // 遍历对象上存在的 key\n    Object.keys(raw).forEach(key => {\n        // 为每个 key 都创建一个依赖对象\n        let dep = new Dep()\n        \n        let realValue = raw[key]\n        \n        // 用 get 和 set 重写原对象的key\n        Object.defineProperty(raw, key, {\n            // 在 get 和 set 里调用依赖对象的对应方法\n            get() {\n                dep.depend()\n                return realValue\n            },\n            set(newVal) {\n                realValue = newVal\n                dep.notify()\n            }\n        })\n    })\n    \n    return raw\n}\n\n// 使用\nlet obj = reactive({ age: 18 })\nlet fn = () => { console.log(obj.age) }\nwatchEffect(fn)\n\nobj.age += 1  // 每当修改 age 都会执行 fn 19\n\nobj.age += 1  // 每当修改 age 都会执行 fn 20\n```\n\n这里的 `Object.defineProperty`就是做的`代理模式` ，现在在使用方式上基本和 Vue3 一样了。\n\n但还不是最终版本，vue3已经放弃了 `IE`， 并且`Object.defineProperty\t` 在监听对象时，新增的数据是监听不到的。\n\n所以使用了 `Proxy` 来做代理。\n\n### Proxy版\n\n使用了发布订阅+代理模式实现基本的`reactivity`。\n\n```js\n// 定义一个暂时存放 watchEffect 传进来的参数的变量\nlet activeEffect\n\n// 这个Dep应该是Dependence的缩写，意为依赖。实际上就相当于发布-订阅模式中的发布者类\n// 定义一个 Dep 类，该类将会为每一个响应式对象的每一个键生成一个发布者实例\nclass Dep {\n  // 用 Set 做缓存列表以防止列表中添加多个完全相同的函数\n  subscribers = new Set()\n\n  // 构造函数接受一个初始化的值放在私有变量内\n  constructor(value) {\n    this._value = value\n  }\n\n  // 当使用 xxx.value 获取对象上的 value 值时\n  get value() {\n    // 代理模式 当获取对象上的value属性的值时将会触发 depend 方法\n    this.depend()\n\n    // 然后返回私有变量内的值\n    return this._value\n  }\n\n  // 当使用 xxx.value = xxx 修改对象上的 value 值时\n  set value(value) {\n    // 代理模式 当修改对象上的value属性的值时将会触发 notify 方法\n    this._value = value\n    // 先改值再触发 这样保证触发的时候用到的都是已经修改后的新值\n    this.notify()\n  }\n\n  // 这就是我们常说的依赖收集方法\n  depend() {\n    // 如果 activeEffect 这个变量为空 就证明不是在 watchEffect 这个函数里面触发的 get 操作\n    if (activeEffect) {\n      // 但如果 activeEffect 不为空就证明是在 watchEffect 里触发的 get 操作\n      // 那就把 activeEffect 这个存着 watchEffect 参数的变量添加进缓存列表中\n      this.subscribers.add(activeEffect)\n    }\n  }\n\n  // 更新操作 通常会在值被修改后调用\n  notify() {\n    // 遍历缓存列表里存放的函数 并依次触发执行\n    this.subscribers.forEach((effect) => {\n      effect()\n    })\n  }\n}\n// 模仿 Vue3 的 watchEffect 函数\nfunction watchEffect(effect) {\n  // 先把传进来的函数放入到 activeEffect 这个变量中\n  activeEffect = effect\n  // 然后执行 watchEffect 里面的函数\n  effect()\n  activeEffect = null\n}\n\n// 定义一个 WeakMap 数据类型 用于存放 reactive 定义的对象以及他们的发布者对象集\nconst targetToHashMap = new WeakMap()\n\n// 定义 getDep 函数 用于获取 reactive 定义的对象所对应的发布者对象集里的某一个键对应的发布者对象\nfunction getDep(target, key) {\n  // 获取 reactive 定义的对象所对应的发布者对象集\n  let depMap = targetToHashMap.get(target)\n  // 如果没获取到的话\n  if (!depMap) {\n    // 就新建一个空的发布者对象集\n    depMap = new Map()\n    // 然后再把这个发布者对象集存进 WeakMap 里\n    targetToHashMap.set(target, depMap)\n  }\n\n  // 再获取到这个发布者对象集里的某一个键所对应的发布者对象\n  let dep = depMap.get(key)\n\n  // 如果没获取到的话\n  if (!dep) {\n    // 就新建一个发布者对象并初始化赋值\n    dep = new Dep(target[key])\n\n    // 然后将这个发布者对象放入到发布者对象集里\n    depMap.set(key, dep)\n  }\n  // 最后返回这个发布者对象\n  return dep\n}\n\n// 模仿 Vue3 的 reactive 函数\nfunction reactive(obj) {\n  // 返回一个传进来的参数对象的代理对象 以便使用代理模式拦截对象上的操作并应用发布-订阅模式\n  return new Proxy(obj, {\n    // 当触发 get 操作时\n    get(target, key) {\n      // 先调用 getDep 函数取到里面存放的 value 值\n      const value = getDep(target, key).value\n      // 如果 value 是对象的话\n      if (value && typeof value === 'object') {\n        // 那就把 value 也变成一个响应式对象\n        return reactive(value)\n      } else {\n        // 如果 value 只是基本数据类型的话就直接将值返回\n        return value\n      }\n    },\n    // 当触发 set 操作时\n    set(target, key, value) {\n      // 调用 getDep 函数并将里面存放的 value 值重新赋值成 set 操作的值\n      getDep(target, key).value = value\n    }\n  })\n}\n\nconst obj = reactive({\n  age: 18\n})\n\nwatchEffect(() => {\n  console.log(obj.age)\n})\n\nobj.age++\n```\n\n\n\n\n\n","slug":"Vue/01-Vue的Reactivity","published":1,"date":"2023-03-01T02:51:30.469Z","updated":"2023-02-28T16:23:44.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clesom00n00065oupd8ffbyor","content":"<h3 id=\"响应式是什么\"><a href=\"#响应式是什么\" class=\"headerlink\" title=\"响应式是什么\"></a>响应式是什么</h3><p>什么是响应式呢，举个简单例子 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a * <span class=\"number\">10</span>  <span class=\"comment\">// 我们希望 b 是 a 的 10 倍</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)  <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)  <span class=\"comment\">// 我们还希望 b 是 a 的 10 倍,那这个时候就麻烦了,需要接着计算 </span></span><br></pre></td></tr></table></figure>\n\n<p>假设有一个函数<code>fn</code> ，当 <code>a</code> 改变则函数<code>fn</code>自动执行，将<code>b</code>重新计算就好了，这其实就是可以简单理解成<code>响应式</code>。</p>\n<p>说的更准确点，提前准备一个函数<code>watchEffect</code>，当函数里面的依赖项(数据)发生更改，就自动执行<code>watchEffect</code>，这就是<code>响应式</code> 。</p>\n<span id=\"more\"></span>\n\n<p>我们再进一步，函数里的依赖项发生改变，则更新页面，不就是<code>model</code>修改，<code>view</code>自动更新嘛。</p>\n<p><code>@nx-js/observer-util</code> 刚好就提供了类似的功能，只不过函数名叫<code>observe</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable, observe &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nx-js/observer-util&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title function_\">observable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">observe</span>(<span class=\"function\">() =&gt;</span> &#123;  <span class=\"comment\">// 每当数据改变 observe函数 就自动执行</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 当 obj.age 增加就会执行observe  19</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 当 obj.age 增加就会执行observe  20</span></span><br></pre></td></tr></table></figure>\n\n<p>理解了<code>响应式</code> 是什么，那接下来我们也一步步实现个响应式。</p>\n<h3 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h3><p>发布订阅模式是设计模式的一种，说个现实的例子，小刘、小红、小张去电脑城买电脑，但是没有优惠，于是给店员留了电话到电话本上，店员等电脑城搞活动，打电话通知这三个人。店员就是<code>发布者</code>，记录了电话的电话本就是<code>缓存列表</code>，消费者就是<code>订阅者</code> 。</p>\n<p>给DOM添加事件的<code>addEventListener</code>也是发布订阅。</p>\n<p>接下来我们模拟着实现一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暂时存放 watchEffect 的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用 Set 做订阅者列表 以防止列表中添加多个完全相同的函数</span></span><br><span class=\"line\">    subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 依赖收集方法</span></span><br><span class=\"line\">\t<span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 activeEffect 为空 则代表没有 watcheffect</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(activeEffect) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新操作 通常在值修改后执行 发布消息</span></span><br><span class=\"line\">\t<span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 watchEffect 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先把传进来的函数放到 activeEffect</span></span><br><span class=\"line\">    activeEffect = effect</span><br><span class=\"line\">    <span class=\"comment\">// 执行一下 watchEffect 里面的函数</span></span><br><span class=\"line\">    <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\"><span class=\"comment\">// 暂定一个全局变量 age</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> globalAge = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">age</span>() &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> globalAge</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">age</span>(<span class=\"params\">newAge</span>) &#123;</span><br><span class=\"line\">        globalAge = newAge</span><br><span class=\"line\">        dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">user.<span class=\"property\">age</span> += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>我们初步实现了最初的想法， 每当依赖项<code>user.age</code> 修改，都会执行<code>watchEffect</code>函数。</p>\n<p>而这里的 dep对象 就是<code>发布者</code>,  subscribers 就是<code>缓存列表</code> ，dep.notify() 是 <code>发布消息</code>。</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>虽然上边实现了功能，但是用起来太麻烦了，需要提供对象的 <code>getter</code>和<code>setter</code>，还要提供手动的执行依赖收集函数，这是不方便的，所以需要接着封装。</p>\n<p>封装前先简单聊一下<code>代理模式</code>， 代理简单说就是，我们需要租房，而我们是很难找到房源的，房源都在中介手里，这个中介就是代理，他给我们介绍什么房子，我们就拿到什么房子。</p>\n<p>那我们来一起简单实现下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ========= start 这里跟刚才一样 ===========</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(activeEffect) &#123;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> <span class=\"title function_\">effect</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    activeEffect = effect</span><br><span class=\"line\">    <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ========= end ===========</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 reactive</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reactive</span>(<span class=\"params\">raw</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历对象上存在的 key</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(raw).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为每个 key 都创建一个依赖对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> realValue = raw[key]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 用 get 和 set 重写原对象的key</span></span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(raw, key, &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在 get 和 set 里调用依赖对象的对应方法</span></span><br><span class=\"line\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">                <span class=\"keyword\">return</span> realValue</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">                realValue = newVal</span><br><span class=\"line\">                dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> raw</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>) &#125;</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(fn)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 每当修改 age 都会执行 fn 19</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 每当修改 age 都会执行 fn 20</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>Object.defineProperty</code>就是做的<code>代理模式</code> ，现在在使用方式上基本和 Vue3 一样了。</p>\n<p>但还不是最终版本，vue3已经放弃了 <code>IE</code>， 并且<code>Object.defineProperty    </code> 在监听对象时，新增的数据是监听不到的。</p>\n<p>所以使用了 <code>Proxy</code> 来做代理。</p>\n<h3 id=\"Proxy版\"><a href=\"#Proxy版\" class=\"headerlink\" title=\"Proxy版\"></a>Proxy版</h3><p>使用了发布订阅+代理模式实现基本的<code>reactivity</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个暂时存放 watchEffect 传进来的参数的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个Dep应该是Dependence的缩写，意为依赖。实际上就相当于发布-订阅模式中的发布者类</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 Dep 类，该类将会为每一个响应式对象的每一个键生成一个发布者实例</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用 Set 做缓存列表以防止列表中添加多个完全相同的函数</span></span><br><span class=\"line\">  subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 构造函数接受一个初始化的值放在私有变量内</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当使用 xxx.value 获取对象上的 value 值时</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">value</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理模式 当获取对象上的value属性的值时将会触发 depend 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后返回私有变量内的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当使用 xxx.value = xxx 修改对象上的 value 值时</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">value</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理模式 当修改对象上的value属性的值时将会触发 notify 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value</span><br><span class=\"line\">    <span class=\"comment\">// 先改值再触发 这样保证触发的时候用到的都是已经修改后的新值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这就是我们常说的依赖收集方法</span></span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 activeEffect 这个变量为空 就证明不是在 watchEffect 这个函数里面触发的 get 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (activeEffect) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 但如果 activeEffect 不为空就证明是在 watchEffect 里触发的 get 操作</span></span><br><span class=\"line\">      <span class=\"comment\">// 那就把 activeEffect 这个存着 watchEffect 参数的变量添加进缓存列表中</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新操作 通常会在值被修改后调用</span></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历缓存列表里存放的函数 并依次触发执行</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">effect</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 watchEffect 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 先把传进来的函数放入到 activeEffect 这个变量中</span></span><br><span class=\"line\">  activeEffect = effect</span><br><span class=\"line\">  <span class=\"comment\">// 然后执行 watchEffect 里面的函数</span></span><br><span class=\"line\">  <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">  activeEffect = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 WeakMap 数据类型 用于存放 reactive 定义的对象以及他们的发布者对象集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetToHashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakMap</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 getDep 函数 用于获取 reactive 定义的对象所对应的发布者对象集里的某一个键对应的发布者对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getDep</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取 reactive 定义的对象所对应的发布者对象集</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> depMap = targetToHashMap.<span class=\"title function_\">get</span>(target)</span><br><span class=\"line\">  <span class=\"comment\">// 如果没获取到的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!depMap) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就新建一个空的发布者对象集</span></span><br><span class=\"line\">    depMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 然后再把这个发布者对象集存进 WeakMap 里</span></span><br><span class=\"line\">    targetToHashMap.<span class=\"title function_\">set</span>(target, depMap)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 再获取到这个发布者对象集里的某一个键所对应的发布者对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dep = depMap.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没获取到的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dep) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就新建一个发布者对象并初始化赋值</span></span><br><span class=\"line\">    dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>(target[key])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后将这个发布者对象放入到发布者对象集里</span></span><br><span class=\"line\">    depMap.<span class=\"title function_\">set</span>(key, dep)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 最后返回这个发布者对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dep</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 reactive 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reactive</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个传进来的参数对象的代理对象 以便使用代理模式拦截对象上的操作并应用发布-订阅模式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当触发 get 操作时</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先调用 getDep 函数取到里面存放的 value 值</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"title function_\">getDep</span>(target, key).<span class=\"property\">value</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 是对象的话</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; <span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 那就把 value 也变成一个响应式对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reactive</span>(value)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 value 只是基本数据类型的话就直接将值返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 当触发 set 操作时</span></span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">target, key, value</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用 getDep 函数并将里面存放的 value 值重新赋值成 set 操作的值</span></span><br><span class=\"line\">      <span class=\"title function_\">getDep</span>(target, key).<span class=\"property\">value</span> = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span>++</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"响应式是什么\"><a href=\"#响应式是什么\" class=\"headerlink\" title=\"响应式是什么\"></a>响应式是什么</h3><p>什么是响应式呢，举个简单例子 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a * <span class=\"number\">10</span>  <span class=\"comment\">// 我们希望 b 是 a 的 10 倍</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)  <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)  <span class=\"comment\">// 我们还希望 b 是 a 的 10 倍,那这个时候就麻烦了,需要接着计算 </span></span><br></pre></td></tr></table></figure>\n\n<p>假设有一个函数<code>fn</code> ，当 <code>a</code> 改变则函数<code>fn</code>自动执行，将<code>b</code>重新计算就好了，这其实就是可以简单理解成<code>响应式</code>。</p>\n<p>说的更准确点，提前准备一个函数<code>watchEffect</code>，当函数里面的依赖项(数据)发生更改，就自动执行<code>watchEffect</code>，这就是<code>响应式</code> 。</p>","more":"<p>我们再进一步，函数里的依赖项发生改变，则更新页面，不就是<code>model</code>修改，<code>view</code>自动更新嘛。</p>\n<p><code>@nx-js/observer-util</code> 刚好就提供了类似的功能，只不过函数名叫<code>observe</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable, observe &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nx-js/observer-util&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title function_\">observable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">observe</span>(<span class=\"function\">() =&gt;</span> &#123;  <span class=\"comment\">// 每当数据改变 observe函数 就自动执行</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 当 obj.age 增加就会执行observe  19</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 当 obj.age 增加就会执行observe  20</span></span><br></pre></td></tr></table></figure>\n\n<p>理解了<code>响应式</code> 是什么，那接下来我们也一步步实现个响应式。</p>\n<h3 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h3><p>发布订阅模式是设计模式的一种，说个现实的例子，小刘、小红、小张去电脑城买电脑，但是没有优惠，于是给店员留了电话到电话本上，店员等电脑城搞活动，打电话通知这三个人。店员就是<code>发布者</code>，记录了电话的电话本就是<code>缓存列表</code>，消费者就是<code>订阅者</code> 。</p>\n<p>给DOM添加事件的<code>addEventListener</code>也是发布订阅。</p>\n<p>接下来我们模拟着实现一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暂时存放 watchEffect 的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用 Set 做订阅者列表 以防止列表中添加多个完全相同的函数</span></span><br><span class=\"line\">    subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 依赖收集方法</span></span><br><span class=\"line\">\t<span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 activeEffect 为空 则代表没有 watcheffect</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(activeEffect) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新操作 通常在值修改后执行 发布消息</span></span><br><span class=\"line\">\t<span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 watchEffect 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先把传进来的函数放到 activeEffect</span></span><br><span class=\"line\">    activeEffect = effect</span><br><span class=\"line\">    <span class=\"comment\">// 执行一下 watchEffect 里面的函数</span></span><br><span class=\"line\">    <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\"><span class=\"comment\">// 暂定一个全局变量 age</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> globalAge = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">age</span>() &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> globalAge</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">age</span>(<span class=\"params\">newAge</span>) &#123;</span><br><span class=\"line\">        globalAge = newAge</span><br><span class=\"line\">        dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">user.<span class=\"property\">age</span> += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>我们初步实现了最初的想法， 每当依赖项<code>user.age</code> 修改，都会执行<code>watchEffect</code>函数。</p>\n<p>而这里的 dep对象 就是<code>发布者</code>,  subscribers 就是<code>缓存列表</code> ，dep.notify() 是 <code>发布消息</code>。</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>虽然上边实现了功能，但是用起来太麻烦了，需要提供对象的 <code>getter</code>和<code>setter</code>，还要提供手动的执行依赖收集函数，这是不方便的，所以需要接着封装。</p>\n<p>封装前先简单聊一下<code>代理模式</code>， 代理简单说就是，我们需要租房，而我们是很难找到房源的，房源都在中介手里，这个中介就是代理，他给我们介绍什么房子，我们就拿到什么房子。</p>\n<p>那我们来一起简单实现下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ========= start 这里跟刚才一样 ===========</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(activeEffect) &#123;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> <span class=\"title function_\">effect</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    activeEffect = effect</span><br><span class=\"line\">    <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ========= end ===========</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 reactive</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reactive</span>(<span class=\"params\">raw</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历对象上存在的 key</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(raw).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为每个 key 都创建一个依赖对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> realValue = raw[key]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 用 get 和 set 重写原对象的key</span></span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(raw, key, &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在 get 和 set 里调用依赖对象的对应方法</span></span><br><span class=\"line\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">                <span class=\"keyword\">return</span> realValue</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">                realValue = newVal</span><br><span class=\"line\">                dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> raw</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>) &#125;</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(fn)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 每当修改 age 都会执行 fn 19</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 每当修改 age 都会执行 fn 20</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>Object.defineProperty</code>就是做的<code>代理模式</code> ，现在在使用方式上基本和 Vue3 一样了。</p>\n<p>但还不是最终版本，vue3已经放弃了 <code>IE</code>， 并且<code>Object.defineProperty    </code> 在监听对象时，新增的数据是监听不到的。</p>\n<p>所以使用了 <code>Proxy</code> 来做代理。</p>\n<h3 id=\"Proxy版\"><a href=\"#Proxy版\" class=\"headerlink\" title=\"Proxy版\"></a>Proxy版</h3><p>使用了发布订阅+代理模式实现基本的<code>reactivity</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个暂时存放 watchEffect 传进来的参数的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个Dep应该是Dependence的缩写，意为依赖。实际上就相当于发布-订阅模式中的发布者类</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 Dep 类，该类将会为每一个响应式对象的每一个键生成一个发布者实例</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用 Set 做缓存列表以防止列表中添加多个完全相同的函数</span></span><br><span class=\"line\">  subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 构造函数接受一个初始化的值放在私有变量内</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当使用 xxx.value 获取对象上的 value 值时</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">value</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理模式 当获取对象上的value属性的值时将会触发 depend 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后返回私有变量内的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当使用 xxx.value = xxx 修改对象上的 value 值时</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">value</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理模式 当修改对象上的value属性的值时将会触发 notify 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value</span><br><span class=\"line\">    <span class=\"comment\">// 先改值再触发 这样保证触发的时候用到的都是已经修改后的新值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这就是我们常说的依赖收集方法</span></span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 activeEffect 这个变量为空 就证明不是在 watchEffect 这个函数里面触发的 get 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (activeEffect) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 但如果 activeEffect 不为空就证明是在 watchEffect 里触发的 get 操作</span></span><br><span class=\"line\">      <span class=\"comment\">// 那就把 activeEffect 这个存着 watchEffect 参数的变量添加进缓存列表中</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新操作 通常会在值被修改后调用</span></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历缓存列表里存放的函数 并依次触发执行</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">effect</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 watchEffect 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 先把传进来的函数放入到 activeEffect 这个变量中</span></span><br><span class=\"line\">  activeEffect = effect</span><br><span class=\"line\">  <span class=\"comment\">// 然后执行 watchEffect 里面的函数</span></span><br><span class=\"line\">  <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">  activeEffect = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 WeakMap 数据类型 用于存放 reactive 定义的对象以及他们的发布者对象集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetToHashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakMap</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 getDep 函数 用于获取 reactive 定义的对象所对应的发布者对象集里的某一个键对应的发布者对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getDep</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取 reactive 定义的对象所对应的发布者对象集</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> depMap = targetToHashMap.<span class=\"title function_\">get</span>(target)</span><br><span class=\"line\">  <span class=\"comment\">// 如果没获取到的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!depMap) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就新建一个空的发布者对象集</span></span><br><span class=\"line\">    depMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 然后再把这个发布者对象集存进 WeakMap 里</span></span><br><span class=\"line\">    targetToHashMap.<span class=\"title function_\">set</span>(target, depMap)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 再获取到这个发布者对象集里的某一个键所对应的发布者对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dep = depMap.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没获取到的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dep) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就新建一个发布者对象并初始化赋值</span></span><br><span class=\"line\">    dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>(target[key])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后将这个发布者对象放入到发布者对象集里</span></span><br><span class=\"line\">    depMap.<span class=\"title function_\">set</span>(key, dep)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 最后返回这个发布者对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dep</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 reactive 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reactive</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个传进来的参数对象的代理对象 以便使用代理模式拦截对象上的操作并应用发布-订阅模式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当触发 get 操作时</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先调用 getDep 函数取到里面存放的 value 值</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"title function_\">getDep</span>(target, key).<span class=\"property\">value</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 是对象的话</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; <span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 那就把 value 也变成一个响应式对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reactive</span>(value)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 value 只是基本数据类型的话就直接将值返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 当触发 set 操作时</span></span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">target, key, value</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用 getDep 函数并将里面存放的 value 值重新赋值成 set 操作的值</span></span><br><span class=\"line\">      <span class=\"title function_\">getDep</span>(target, key).<span class=\"property\">value</span> = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span>++</span><br></pre></td></tr></table></figure>"},{"title":"虚拟列表","_content":"### 多数据渲染\n\n当后台返给我们的数据","source":"_posts/Vue/02-虚拟列表.md","raw":"---\ntitle: 虚拟列表\ntags: Vue\n---\n### 多数据渲染\n\n当后台返给我们的数据","slug":"Vue/02-虚拟列表","published":1,"date":"2023-03-01T02:51:30.475Z","updated":"2023-02-28T15:54:53.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clesom00p00095oup775i505q","content":"<h3 id=\"多数据渲染\"><a href=\"#多数据渲染\" class=\"headerlink\" title=\"多数据渲染\"></a>多数据渲染</h3><p>当后台返给我们的数据</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"多数据渲染\"><a href=\"#多数据渲染\" class=\"headerlink\" title=\"多数据渲染\"></a>多数据渲染</h3><p>当后台返给我们的数据</p>\n"},{"title":"浏览器是如何运作","_content":"浏览器对于前端开发者，就好比赛车之于赛车手，我们只有足够了解浏览器，我们才能写出更好的代码、更好的用户体验。\n大致可以将浏览器分为： \n1. 用户界面：除标签页窗口之外的内容\n2. 浏览器引擎：用于用户界面和渲染引擎之间传递数据\n   2.1 数据持久层：帮助浏览器存储数据比如cookie等等\n3. 渲染引擎：渲染用户请求的页面内容\n   3.1  网络：负责发起请求\n   3.2  js解释器：负责js解析和执行\n<!-- more -->\n\n渲染引擎被称之为浏览器的内核，不同浏览器使用内核不大一样，IE(trident)、firefox(geko)、safari(webkit)、chrome(blink)。\n\n浏览器是运行在操作系统上的应用程序，每个应用程序必须启动一个进程来执行很多功能，每个程序往往都需要执行多个小任务，进程就会创建多个线程来帮助执行这些小任务，``进程`` 是操作系统进行资源分配的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体，``线程`` 是操作系统能够进行运算调度的最小单元，一个进程可以并发多个线程，每条线程并行执行不同任务。\n\n通俗点说，当我们启动某个程序，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该任务的内容都保存在分配的内存空间里，当应用关闭，对应内存空间就会被回收， 进程可以启动更多进程来执行任务，由于每个进程分配的内存空间都是独立的，如果两个进程间需要传递数据，则需要通过进程间通信管道IPC来处理，很多应用程序都是多进程结构，这是为了避免某一个进程卡死，由于进程间相互独立，这样不会影响到整个应用程序。进程可以将任务分成更多细小的任务，然后通过创建多个线程并行执行不同任务，同一进程下的不同线程是可以直接通信的。\n\n单进程浏览器的缺点：\n 1. 其中一个线程卡死，导致整个进程出问题 \n 2. 不安全，不同页面之间可以通信数据 \n 3. 不流畅\n\n现代浏览器都是多进程的，浏览器进程大致可以分为： \n1. 浏览器进程： 控制浏览器地址栏、前进后退、书签以及与浏览器的其他进程进行协调\n2. 渲染器进程：控制tab标签页的渲染，浏览器基本上会为每一个标签页都创建一个进程，这样某一个标签页卡死，并不会影响其他标签页\n3. GPU进程： 整个浏览器页面的渲染\n4. 缓存进程：缓存数据\n5. 网络进程： 负责发起接受网络请求\n6. 插件进程：控制浏览器使用的插件，例如 flash，并不是应用商店下载的插件\n\n当在浏览器输入url地址时，浏览器大致会执行：\n1. 浏览器进程的UI线程会捕捉输入的内容，a. 如果访问的是网址，则UI线程会启用网络线程，来请求DNS服务器进行域名解析，接着开始连接服务器获取数据，b. 如果输入的不是网址，而是一串关键词，浏览器就知道是要搜索，就会启用默认配置的搜索引擎来查询。\n2. 如果是访问网址，网络线程获取到数据后，会通过 ``safeBrowsing(safeBrowsing是谷歌内部的一套站点安全系统，通过检测该站点的数据来判断是否安全，比如查看该站点的IP是否在谷歌的黑名单中)`` 来检查站点是否是恶意站点，如果是则会提示个警告页面，告诉你这个站点有安全问题，浏览器会阻止访问，当然你也可以点击继续访问。当返回数据准备完毕，并且通过安全校验后，网络线程会通知UI线程我准备好了。\n3. 然后UI线程会创建一个渲染器进程来渲染页面，浏览器进程会通过IPC通信管道将数据传递给渲染器进程，正式进入渲染流程。\n4. 渲染器进程就是将接收到的HTMl、JS、CSS、img 等资源渲染成用户可以交互的web页面，渲染器进程的主线程将HTMl进行解析，构造成DOM树，如果遇到``script``标签则停止解析并执行JS代码，在HTMl解析完成后，我们就会得到一个DOM树，但我们还不知道DOM树上每个节点的样子。\n5. 主线程解析完HTML，就开始解析CSS，并确定每个DOM节点的计算样式，即使没有提供自定义的样式，浏览器也会有默认的样式。\n6. 在知道DOM结构和每个节点的样式后，就需要知道每个节点需要放在页面的哪个位置，也就是节点的坐标以及该节点需要多大的区域，这个阶段被称为 ``layout布局``，主线程通过遍历DOM树和计算好的样式来生成 ``layoutTree``，``layoutTree``每个节点都记录了x,y坐标及边框尺寸， 这里DOM树和 ``layoutTree``并不是一一对应的，比如设置了``display:none``的节点不会出现在``layoutTree``上，又比如伪元素，这是因为DOM树是解析HTML得来，而不关注样式，而``layoutTree`` 是有DOM树和计算好的样式生成的，``layoutTree``是和展示到页面的节点对应的。\n7. 我们已经知道了元素的大小形状和位置，但是这还不够，我们还需要知道以什么样的顺序绘制(paint)节点，比如``z-index`` 会影响节点绘制的层级关系，如果按照DOM的层级结构来绘制，则可能出现错误的渲染，所以为了保证在屏幕上展示正确的层级，主线程遍历``layoutTree`` ，创建一个绘制记录表(paint Record)，该表记录了绘制的顺序，这个阶段被称为绘制。\n8. 现在知道了绘制的顺序，到了该把这些信息转换成像素点显示在屏幕上，这个行为被称为``栅格化(rastering)``  ， chorme早期使用了一种很简单的方式，只栅格化用户可见的内容，当用户滚动页面时，再栅格化更多的内容来填充空缺的部分，这种方式带来很大的问题，就是展示延迟，随着不断的优化升级，现在chorme使用更为复杂的栅格化流程，叫做合成，合成是一种将页面的各个部分分成多个图层，分别对其进行栅格化，并在合成器线程中单独进行合成页面的技术，简单来说就是，页面的所有元素按照某种规则进行分图层，并把图层都珊格化好了，然后只需要把可视区域的内容组合成一帧，展示给用户即可。\n9. 主线程遍历``layoutTree`` 生成``layerTree``，当``layerTree`` 生成完毕和绘制顺序后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分成许多``图块(tiles)``，然后将每个``图块``发送给栅格化线程，栅格化线程栅格每一个``图块``，并将他们存储在``GPU内存``中，当``图块`` 栅格化完成后，合成器线程将收集``图块``信息，这些信记录了图块在内存中的位置、和在页面哪个位置绘制图块的信息，根据这些信息，合成器线程生成一个合成器帧\n10. 然后这个合成器帧通过进程间通信管道IPC传送给浏览器进程，接着浏览器进程将合成器帧传送给GPU，然后GPU渲染展示到屏幕\n11. 当滚动页面时，则会生成一个新的合成器帧，新的帧在传递给浏览器进程，然后传递给GPU，然后渲染到屏幕\n\n好的，写了一大堆，简单总结下：\n\n浏览器进程中的网络线程请求获取到html数据后，通过IPC通信将数据传递给渲染器进程的主线程，主线程将html解析构造DOM树，然后进行样式计算，根据DOM树和样式计算生成``layoutTree``，通过遍历``layoutTree``生成绘制顺序表，接着遍历``layoutTree``生成``layerTree``，然后主线程将``layerTree``和绘制信息一起传给合成器线程，合成器线程按规则进行分图层，并把图层分为更小的图块，然后传给栅格线程进行栅格化，栅格化完成后，合成器线程将会获得栅格线程传递来的图块信息，根据这些信息，合成器线程生成一个合成器帧，然后将合成器帧通过IPC传递给浏览器进程，浏览器进程在传递给GPU进程进行渲染，这就展示到页面上了。\n\n当改变元素尺寸位置属性时，会重新进行样式计算(computed style)、布局(layout)、绘制(paint)以及后边的所有流程，这种行为称为``重排``。\n当我们改变元素颜色属性时，不会重新触发布局，但还是会触发样式计算和绘制，这个就是``重绘``。\n\n我们可以发现，重绘和重排都会主线程，还有JS也是运行在主线程上的，那么他们就会出现抢占执行时间的问题，如果写了一个不断导致重绘重排的动画，浏览器则需要在每一帧都运行样式计算，布局和绘制的操作，我们知道页面每秒60帧进行刷新，用户才不会感知，如果页面在运行动画时还有大量JS任务需要执行，因为布局，绘制和JS执行都在主线程运行，当在一帧的时间内布局和绘制结束后，还有剩余时间，JS就会拿到主线程的使用权，如果JS执行时间过长，就会导致在下一帧开始时，JS没有及时归还主线程，导致下一帧没有按时渲染，就会出现页面卡顿，1.  我们可以通过``requestAnimationFrame()`` 这个API进行优化，这个方法会在每一帧被调用，我们可以把JS运行任务分成更小的任务块，分到每一帧，在每一帧时间用完前暂停JS执行，归还主线程，这样的话在下一帧开始时，主线程就可以按时执行布局和绘制。2. 通过 ``transform``的动画不会进行布局和绘制，而是直接运行在合成器线程和栅格化线程中，所以不会收到主线程JS的影响，由于不需要进行布局绘制，样式计算等操作，所以节省了很多时间。\n\n","source":"_posts/网络/02-浏览器如何运作.md","raw":"---\ntitle: 浏览器是如何运作\ntags: 网络\n---\n浏览器对于前端开发者，就好比赛车之于赛车手，我们只有足够了解浏览器，我们才能写出更好的代码、更好的用户体验。\n大致可以将浏览器分为： \n1. 用户界面：除标签页窗口之外的内容\n2. 浏览器引擎：用于用户界面和渲染引擎之间传递数据\n   2.1 数据持久层：帮助浏览器存储数据比如cookie等等\n3. 渲染引擎：渲染用户请求的页面内容\n   3.1  网络：负责发起请求\n   3.2  js解释器：负责js解析和执行\n<!-- more -->\n\n渲染引擎被称之为浏览器的内核，不同浏览器使用内核不大一样，IE(trident)、firefox(geko)、safari(webkit)、chrome(blink)。\n\n浏览器是运行在操作系统上的应用程序，每个应用程序必须启动一个进程来执行很多功能，每个程序往往都需要执行多个小任务，进程就会创建多个线程来帮助执行这些小任务，``进程`` 是操作系统进行资源分配的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体，``线程`` 是操作系统能够进行运算调度的最小单元，一个进程可以并发多个线程，每条线程并行执行不同任务。\n\n通俗点说，当我们启动某个程序，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该任务的内容都保存在分配的内存空间里，当应用关闭，对应内存空间就会被回收， 进程可以启动更多进程来执行任务，由于每个进程分配的内存空间都是独立的，如果两个进程间需要传递数据，则需要通过进程间通信管道IPC来处理，很多应用程序都是多进程结构，这是为了避免某一个进程卡死，由于进程间相互独立，这样不会影响到整个应用程序。进程可以将任务分成更多细小的任务，然后通过创建多个线程并行执行不同任务，同一进程下的不同线程是可以直接通信的。\n\n单进程浏览器的缺点：\n 1. 其中一个线程卡死，导致整个进程出问题 \n 2. 不安全，不同页面之间可以通信数据 \n 3. 不流畅\n\n现代浏览器都是多进程的，浏览器进程大致可以分为： \n1. 浏览器进程： 控制浏览器地址栏、前进后退、书签以及与浏览器的其他进程进行协调\n2. 渲染器进程：控制tab标签页的渲染，浏览器基本上会为每一个标签页都创建一个进程，这样某一个标签页卡死，并不会影响其他标签页\n3. GPU进程： 整个浏览器页面的渲染\n4. 缓存进程：缓存数据\n5. 网络进程： 负责发起接受网络请求\n6. 插件进程：控制浏览器使用的插件，例如 flash，并不是应用商店下载的插件\n\n当在浏览器输入url地址时，浏览器大致会执行：\n1. 浏览器进程的UI线程会捕捉输入的内容，a. 如果访问的是网址，则UI线程会启用网络线程，来请求DNS服务器进行域名解析，接着开始连接服务器获取数据，b. 如果输入的不是网址，而是一串关键词，浏览器就知道是要搜索，就会启用默认配置的搜索引擎来查询。\n2. 如果是访问网址，网络线程获取到数据后，会通过 ``safeBrowsing(safeBrowsing是谷歌内部的一套站点安全系统，通过检测该站点的数据来判断是否安全，比如查看该站点的IP是否在谷歌的黑名单中)`` 来检查站点是否是恶意站点，如果是则会提示个警告页面，告诉你这个站点有安全问题，浏览器会阻止访问，当然你也可以点击继续访问。当返回数据准备完毕，并且通过安全校验后，网络线程会通知UI线程我准备好了。\n3. 然后UI线程会创建一个渲染器进程来渲染页面，浏览器进程会通过IPC通信管道将数据传递给渲染器进程，正式进入渲染流程。\n4. 渲染器进程就是将接收到的HTMl、JS、CSS、img 等资源渲染成用户可以交互的web页面，渲染器进程的主线程将HTMl进行解析，构造成DOM树，如果遇到``script``标签则停止解析并执行JS代码，在HTMl解析完成后，我们就会得到一个DOM树，但我们还不知道DOM树上每个节点的样子。\n5. 主线程解析完HTML，就开始解析CSS，并确定每个DOM节点的计算样式，即使没有提供自定义的样式，浏览器也会有默认的样式。\n6. 在知道DOM结构和每个节点的样式后，就需要知道每个节点需要放在页面的哪个位置，也就是节点的坐标以及该节点需要多大的区域，这个阶段被称为 ``layout布局``，主线程通过遍历DOM树和计算好的样式来生成 ``layoutTree``，``layoutTree``每个节点都记录了x,y坐标及边框尺寸， 这里DOM树和 ``layoutTree``并不是一一对应的，比如设置了``display:none``的节点不会出现在``layoutTree``上，又比如伪元素，这是因为DOM树是解析HTML得来，而不关注样式，而``layoutTree`` 是有DOM树和计算好的样式生成的，``layoutTree``是和展示到页面的节点对应的。\n7. 我们已经知道了元素的大小形状和位置，但是这还不够，我们还需要知道以什么样的顺序绘制(paint)节点，比如``z-index`` 会影响节点绘制的层级关系，如果按照DOM的层级结构来绘制，则可能出现错误的渲染，所以为了保证在屏幕上展示正确的层级，主线程遍历``layoutTree`` ，创建一个绘制记录表(paint Record)，该表记录了绘制的顺序，这个阶段被称为绘制。\n8. 现在知道了绘制的顺序，到了该把这些信息转换成像素点显示在屏幕上，这个行为被称为``栅格化(rastering)``  ， chorme早期使用了一种很简单的方式，只栅格化用户可见的内容，当用户滚动页面时，再栅格化更多的内容来填充空缺的部分，这种方式带来很大的问题，就是展示延迟，随着不断的优化升级，现在chorme使用更为复杂的栅格化流程，叫做合成，合成是一种将页面的各个部分分成多个图层，分别对其进行栅格化，并在合成器线程中单独进行合成页面的技术，简单来说就是，页面的所有元素按照某种规则进行分图层，并把图层都珊格化好了，然后只需要把可视区域的内容组合成一帧，展示给用户即可。\n9. 主线程遍历``layoutTree`` 生成``layerTree``，当``layerTree`` 生成完毕和绘制顺序后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分成许多``图块(tiles)``，然后将每个``图块``发送给栅格化线程，栅格化线程栅格每一个``图块``，并将他们存储在``GPU内存``中，当``图块`` 栅格化完成后，合成器线程将收集``图块``信息，这些信记录了图块在内存中的位置、和在页面哪个位置绘制图块的信息，根据这些信息，合成器线程生成一个合成器帧\n10. 然后这个合成器帧通过进程间通信管道IPC传送给浏览器进程，接着浏览器进程将合成器帧传送给GPU，然后GPU渲染展示到屏幕\n11. 当滚动页面时，则会生成一个新的合成器帧，新的帧在传递给浏览器进程，然后传递给GPU，然后渲染到屏幕\n\n好的，写了一大堆，简单总结下：\n\n浏览器进程中的网络线程请求获取到html数据后，通过IPC通信将数据传递给渲染器进程的主线程，主线程将html解析构造DOM树，然后进行样式计算，根据DOM树和样式计算生成``layoutTree``，通过遍历``layoutTree``生成绘制顺序表，接着遍历``layoutTree``生成``layerTree``，然后主线程将``layerTree``和绘制信息一起传给合成器线程，合成器线程按规则进行分图层，并把图层分为更小的图块，然后传给栅格线程进行栅格化，栅格化完成后，合成器线程将会获得栅格线程传递来的图块信息，根据这些信息，合成器线程生成一个合成器帧，然后将合成器帧通过IPC传递给浏览器进程，浏览器进程在传递给GPU进程进行渲染，这就展示到页面上了。\n\n当改变元素尺寸位置属性时，会重新进行样式计算(computed style)、布局(layout)、绘制(paint)以及后边的所有流程，这种行为称为``重排``。\n当我们改变元素颜色属性时，不会重新触发布局，但还是会触发样式计算和绘制，这个就是``重绘``。\n\n我们可以发现，重绘和重排都会主线程，还有JS也是运行在主线程上的，那么他们就会出现抢占执行时间的问题，如果写了一个不断导致重绘重排的动画，浏览器则需要在每一帧都运行样式计算，布局和绘制的操作，我们知道页面每秒60帧进行刷新，用户才不会感知，如果页面在运行动画时还有大量JS任务需要执行，因为布局，绘制和JS执行都在主线程运行，当在一帧的时间内布局和绘制结束后，还有剩余时间，JS就会拿到主线程的使用权，如果JS执行时间过长，就会导致在下一帧开始时，JS没有及时归还主线程，导致下一帧没有按时渲染，就会出现页面卡顿，1.  我们可以通过``requestAnimationFrame()`` 这个API进行优化，这个方法会在每一帧被调用，我们可以把JS运行任务分成更小的任务块，分到每一帧，在每一帧时间用完前暂停JS执行，归还主线程，这样的话在下一帧开始时，主线程就可以按时执行布局和绘制。2. 通过 ``transform``的动画不会进行布局和绘制，而是直接运行在合成器线程和栅格化线程中，所以不会收到主线程JS的影响，由于不需要进行布局绘制，样式计算等操作，所以节省了很多时间。\n\n","slug":"网络/02-浏览器如何运作","published":1,"date":"2023-03-01T02:51:30.496Z","updated":"2023-02-28T16:23:59.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clesom00q000a5oupeso1bmok","content":"<p>浏览器对于前端开发者，就好比赛车之于赛车手，我们只有足够了解浏览器，我们才能写出更好的代码、更好的用户体验。<br>大致可以将浏览器分为： </p>\n<ol>\n<li>用户界面：除标签页窗口之外的内容</li>\n<li>浏览器引擎：用于用户界面和渲染引擎之间传递数据<br>2.1 数据持久层：帮助浏览器存储数据比如cookie等等</li>\n<li>渲染引擎：渲染用户请求的页面内容<br>3.1  网络：负责发起请求<br>3.2  js解释器：负责js解析和执行<span id=\"more\"></span></li>\n</ol>\n<p>渲染引擎被称之为浏览器的内核，不同浏览器使用内核不大一样，IE(trident)、firefox(geko)、safari(webkit)、chrome(blink)。</p>\n<p>浏览器是运行在操作系统上的应用程序，每个应用程序必须启动一个进程来执行很多功能，每个程序往往都需要执行多个小任务，进程就会创建多个线程来帮助执行这些小任务，<code>进程</code> 是操作系统进行资源分配的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体，<code>线程</code> 是操作系统能够进行运算调度的最小单元，一个进程可以并发多个线程，每条线程并行执行不同任务。</p>\n<p>通俗点说，当我们启动某个程序，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该任务的内容都保存在分配的内存空间里，当应用关闭，对应内存空间就会被回收， 进程可以启动更多进程来执行任务，由于每个进程分配的内存空间都是独立的，如果两个进程间需要传递数据，则需要通过进程间通信管道IPC来处理，很多应用程序都是多进程结构，这是为了避免某一个进程卡死，由于进程间相互独立，这样不会影响到整个应用程序。进程可以将任务分成更多细小的任务，然后通过创建多个线程并行执行不同任务，同一进程下的不同线程是可以直接通信的。</p>\n<p>单进程浏览器的缺点：</p>\n<ol>\n<li>其中一个线程卡死，导致整个进程出问题 </li>\n<li>不安全，不同页面之间可以通信数据 </li>\n<li>不流畅</li>\n</ol>\n<p>现代浏览器都是多进程的，浏览器进程大致可以分为： </p>\n<ol>\n<li>浏览器进程： 控制浏览器地址栏、前进后退、书签以及与浏览器的其他进程进行协调</li>\n<li>渲染器进程：控制tab标签页的渲染，浏览器基本上会为每一个标签页都创建一个进程，这样某一个标签页卡死，并不会影响其他标签页</li>\n<li>GPU进程： 整个浏览器页面的渲染</li>\n<li>缓存进程：缓存数据</li>\n<li>网络进程： 负责发起接受网络请求</li>\n<li>插件进程：控制浏览器使用的插件，例如 flash，并不是应用商店下载的插件</li>\n</ol>\n<p>当在浏览器输入url地址时，浏览器大致会执行：</p>\n<ol>\n<li>浏览器进程的UI线程会捕捉输入的内容，a. 如果访问的是网址，则UI线程会启用网络线程，来请求DNS服务器进行域名解析，接着开始连接服务器获取数据，b. 如果输入的不是网址，而是一串关键词，浏览器就知道是要搜索，就会启用默认配置的搜索引擎来查询。</li>\n<li>如果是访问网址，网络线程获取到数据后，会通过 <code>safeBrowsing(safeBrowsing是谷歌内部的一套站点安全系统，通过检测该站点的数据来判断是否安全，比如查看该站点的IP是否在谷歌的黑名单中)</code> 来检查站点是否是恶意站点，如果是则会提示个警告页面，告诉你这个站点有安全问题，浏览器会阻止访问，当然你也可以点击继续访问。当返回数据准备完毕，并且通过安全校验后，网络线程会通知UI线程我准备好了。</li>\n<li>然后UI线程会创建一个渲染器进程来渲染页面，浏览器进程会通过IPC通信管道将数据传递给渲染器进程，正式进入渲染流程。</li>\n<li>渲染器进程就是将接收到的HTMl、JS、CSS、img 等资源渲染成用户可以交互的web页面，渲染器进程的主线程将HTMl进行解析，构造成DOM树，如果遇到<code>script</code>标签则停止解析并执行JS代码，在HTMl解析完成后，我们就会得到一个DOM树，但我们还不知道DOM树上每个节点的样子。</li>\n<li>主线程解析完HTML，就开始解析CSS，并确定每个DOM节点的计算样式，即使没有提供自定义的样式，浏览器也会有默认的样式。</li>\n<li>在知道DOM结构和每个节点的样式后，就需要知道每个节点需要放在页面的哪个位置，也就是节点的坐标以及该节点需要多大的区域，这个阶段被称为 <code>layout布局</code>，主线程通过遍历DOM树和计算好的样式来生成 <code>layoutTree</code>，<code>layoutTree</code>每个节点都记录了x,y坐标及边框尺寸， 这里DOM树和 <code>layoutTree</code>并不是一一对应的，比如设置了<code>display:none</code>的节点不会出现在<code>layoutTree</code>上，又比如伪元素，这是因为DOM树是解析HTML得来，而不关注样式，而<code>layoutTree</code> 是有DOM树和计算好的样式生成的，<code>layoutTree</code>是和展示到页面的节点对应的。</li>\n<li>我们已经知道了元素的大小形状和位置，但是这还不够，我们还需要知道以什么样的顺序绘制(paint)节点，比如<code>z-index</code> 会影响节点绘制的层级关系，如果按照DOM的层级结构来绘制，则可能出现错误的渲染，所以为了保证在屏幕上展示正确的层级，主线程遍历<code>layoutTree</code> ，创建一个绘制记录表(paint Record)，该表记录了绘制的顺序，这个阶段被称为绘制。</li>\n<li>现在知道了绘制的顺序，到了该把这些信息转换成像素点显示在屏幕上，这个行为被称为<code>栅格化(rastering)</code>  ， chorme早期使用了一种很简单的方式，只栅格化用户可见的内容，当用户滚动页面时，再栅格化更多的内容来填充空缺的部分，这种方式带来很大的问题，就是展示延迟，随着不断的优化升级，现在chorme使用更为复杂的栅格化流程，叫做合成，合成是一种将页面的各个部分分成多个图层，分别对其进行栅格化，并在合成器线程中单独进行合成页面的技术，简单来说就是，页面的所有元素按照某种规则进行分图层，并把图层都珊格化好了，然后只需要把可视区域的内容组合成一帧，展示给用户即可。</li>\n<li>主线程遍历<code>layoutTree</code> 生成<code>layerTree</code>，当<code>layerTree</code> 生成完毕和绘制顺序后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分成许多<code>图块(tiles)</code>，然后将每个<code>图块</code>发送给栅格化线程，栅格化线程栅格每一个<code>图块</code>，并将他们存储在<code>GPU内存</code>中，当<code>图块</code> 栅格化完成后，合成器线程将收集<code>图块</code>信息，这些信记录了图块在内存中的位置、和在页面哪个位置绘制图块的信息，根据这些信息，合成器线程生成一个合成器帧</li>\n<li>然后这个合成器帧通过进程间通信管道IPC传送给浏览器进程，接着浏览器进程将合成器帧传送给GPU，然后GPU渲染展示到屏幕</li>\n<li>当滚动页面时，则会生成一个新的合成器帧，新的帧在传递给浏览器进程，然后传递给GPU，然后渲染到屏幕</li>\n</ol>\n<p>好的，写了一大堆，简单总结下：</p>\n<p>浏览器进程中的网络线程请求获取到html数据后，通过IPC通信将数据传递给渲染器进程的主线程，主线程将html解析构造DOM树，然后进行样式计算，根据DOM树和样式计算生成<code>layoutTree</code>，通过遍历<code>layoutTree</code>生成绘制顺序表，接着遍历<code>layoutTree</code>生成<code>layerTree</code>，然后主线程将<code>layerTree</code>和绘制信息一起传给合成器线程，合成器线程按规则进行分图层，并把图层分为更小的图块，然后传给栅格线程进行栅格化，栅格化完成后，合成器线程将会获得栅格线程传递来的图块信息，根据这些信息，合成器线程生成一个合成器帧，然后将合成器帧通过IPC传递给浏览器进程，浏览器进程在传递给GPU进程进行渲染，这就展示到页面上了。</p>\n<p>当改变元素尺寸位置属性时，会重新进行样式计算(computed style)、布局(layout)、绘制(paint)以及后边的所有流程，这种行为称为<code>重排</code>。<br>当我们改变元素颜色属性时，不会重新触发布局，但还是会触发样式计算和绘制，这个就是<code>重绘</code>。</p>\n<p>我们可以发现，重绘和重排都会主线程，还有JS也是运行在主线程上的，那么他们就会出现抢占执行时间的问题，如果写了一个不断导致重绘重排的动画，浏览器则需要在每一帧都运行样式计算，布局和绘制的操作，我们知道页面每秒60帧进行刷新，用户才不会感知，如果页面在运行动画时还有大量JS任务需要执行，因为布局，绘制和JS执行都在主线程运行，当在一帧的时间内布局和绘制结束后，还有剩余时间，JS就会拿到主线程的使用权，如果JS执行时间过长，就会导致在下一帧开始时，JS没有及时归还主线程，导致下一帧没有按时渲染，就会出现页面卡顿，1.  我们可以通过<code>requestAnimationFrame()</code> 这个API进行优化，这个方法会在每一帧被调用，我们可以把JS运行任务分成更小的任务块，分到每一帧，在每一帧时间用完前暂停JS执行，归还主线程，这样的话在下一帧开始时，主线程就可以按时执行布局和绘制。2. 通过 <code>transform</code>的动画不会进行布局和绘制，而是直接运行在合成器线程和栅格化线程中，所以不会收到主线程JS的影响，由于不需要进行布局绘制，样式计算等操作，所以节省了很多时间。</p>\n","site":{"data":{}},"excerpt":"<p>浏览器对于前端开发者，就好比赛车之于赛车手，我们只有足够了解浏览器，我们才能写出更好的代码、更好的用户体验。<br>大致可以将浏览器分为： </p>\n<ol>\n<li>用户界面：除标签页窗口之外的内容</li>\n<li>浏览器引擎：用于用户界面和渲染引擎之间传递数据<br>2.1 数据持久层：帮助浏览器存储数据比如cookie等等</li>\n<li>渲染引擎：渲染用户请求的页面内容<br>3.1  网络：负责发起请求<br>3.2  js解释器：负责js解析和执行","more":"</li>\n</ol>\n<p>渲染引擎被称之为浏览器的内核，不同浏览器使用内核不大一样，IE(trident)、firefox(geko)、safari(webkit)、chrome(blink)。</p>\n<p>浏览器是运行在操作系统上的应用程序，每个应用程序必须启动一个进程来执行很多功能，每个程序往往都需要执行多个小任务，进程就会创建多个线程来帮助执行这些小任务，<code>进程</code> 是操作系统进行资源分配的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体，<code>线程</code> 是操作系统能够进行运算调度的最小单元，一个进程可以并发多个线程，每条线程并行执行不同任务。</p>\n<p>通俗点说，当我们启动某个程序，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该任务的内容都保存在分配的内存空间里，当应用关闭，对应内存空间就会被回收， 进程可以启动更多进程来执行任务，由于每个进程分配的内存空间都是独立的，如果两个进程间需要传递数据，则需要通过进程间通信管道IPC来处理，很多应用程序都是多进程结构，这是为了避免某一个进程卡死，由于进程间相互独立，这样不会影响到整个应用程序。进程可以将任务分成更多细小的任务，然后通过创建多个线程并行执行不同任务，同一进程下的不同线程是可以直接通信的。</p>\n<p>单进程浏览器的缺点：</p>\n<ol>\n<li>其中一个线程卡死，导致整个进程出问题 </li>\n<li>不安全，不同页面之间可以通信数据 </li>\n<li>不流畅</li>\n</ol>\n<p>现代浏览器都是多进程的，浏览器进程大致可以分为： </p>\n<ol>\n<li>浏览器进程： 控制浏览器地址栏、前进后退、书签以及与浏览器的其他进程进行协调</li>\n<li>渲染器进程：控制tab标签页的渲染，浏览器基本上会为每一个标签页都创建一个进程，这样某一个标签页卡死，并不会影响其他标签页</li>\n<li>GPU进程： 整个浏览器页面的渲染</li>\n<li>缓存进程：缓存数据</li>\n<li>网络进程： 负责发起接受网络请求</li>\n<li>插件进程：控制浏览器使用的插件，例如 flash，并不是应用商店下载的插件</li>\n</ol>\n<p>当在浏览器输入url地址时，浏览器大致会执行：</p>\n<ol>\n<li>浏览器进程的UI线程会捕捉输入的内容，a. 如果访问的是网址，则UI线程会启用网络线程，来请求DNS服务器进行域名解析，接着开始连接服务器获取数据，b. 如果输入的不是网址，而是一串关键词，浏览器就知道是要搜索，就会启用默认配置的搜索引擎来查询。</li>\n<li>如果是访问网址，网络线程获取到数据后，会通过 <code>safeBrowsing(safeBrowsing是谷歌内部的一套站点安全系统，通过检测该站点的数据来判断是否安全，比如查看该站点的IP是否在谷歌的黑名单中)</code> 来检查站点是否是恶意站点，如果是则会提示个警告页面，告诉你这个站点有安全问题，浏览器会阻止访问，当然你也可以点击继续访问。当返回数据准备完毕，并且通过安全校验后，网络线程会通知UI线程我准备好了。</li>\n<li>然后UI线程会创建一个渲染器进程来渲染页面，浏览器进程会通过IPC通信管道将数据传递给渲染器进程，正式进入渲染流程。</li>\n<li>渲染器进程就是将接收到的HTMl、JS、CSS、img 等资源渲染成用户可以交互的web页面，渲染器进程的主线程将HTMl进行解析，构造成DOM树，如果遇到<code>script</code>标签则停止解析并执行JS代码，在HTMl解析完成后，我们就会得到一个DOM树，但我们还不知道DOM树上每个节点的样子。</li>\n<li>主线程解析完HTML，就开始解析CSS，并确定每个DOM节点的计算样式，即使没有提供自定义的样式，浏览器也会有默认的样式。</li>\n<li>在知道DOM结构和每个节点的样式后，就需要知道每个节点需要放在页面的哪个位置，也就是节点的坐标以及该节点需要多大的区域，这个阶段被称为 <code>layout布局</code>，主线程通过遍历DOM树和计算好的样式来生成 <code>layoutTree</code>，<code>layoutTree</code>每个节点都记录了x,y坐标及边框尺寸， 这里DOM树和 <code>layoutTree</code>并不是一一对应的，比如设置了<code>display:none</code>的节点不会出现在<code>layoutTree</code>上，又比如伪元素，这是因为DOM树是解析HTML得来，而不关注样式，而<code>layoutTree</code> 是有DOM树和计算好的样式生成的，<code>layoutTree</code>是和展示到页面的节点对应的。</li>\n<li>我们已经知道了元素的大小形状和位置，但是这还不够，我们还需要知道以什么样的顺序绘制(paint)节点，比如<code>z-index</code> 会影响节点绘制的层级关系，如果按照DOM的层级结构来绘制，则可能出现错误的渲染，所以为了保证在屏幕上展示正确的层级，主线程遍历<code>layoutTree</code> ，创建一个绘制记录表(paint Record)，该表记录了绘制的顺序，这个阶段被称为绘制。</li>\n<li>现在知道了绘制的顺序，到了该把这些信息转换成像素点显示在屏幕上，这个行为被称为<code>栅格化(rastering)</code>  ， chorme早期使用了一种很简单的方式，只栅格化用户可见的内容，当用户滚动页面时，再栅格化更多的内容来填充空缺的部分，这种方式带来很大的问题，就是展示延迟，随着不断的优化升级，现在chorme使用更为复杂的栅格化流程，叫做合成，合成是一种将页面的各个部分分成多个图层，分别对其进行栅格化，并在合成器线程中单独进行合成页面的技术，简单来说就是，页面的所有元素按照某种规则进行分图层，并把图层都珊格化好了，然后只需要把可视区域的内容组合成一帧，展示给用户即可。</li>\n<li>主线程遍历<code>layoutTree</code> 生成<code>layerTree</code>，当<code>layerTree</code> 生成完毕和绘制顺序后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分成许多<code>图块(tiles)</code>，然后将每个<code>图块</code>发送给栅格化线程，栅格化线程栅格每一个<code>图块</code>，并将他们存储在<code>GPU内存</code>中，当<code>图块</code> 栅格化完成后，合成器线程将收集<code>图块</code>信息，这些信记录了图块在内存中的位置、和在页面哪个位置绘制图块的信息，根据这些信息，合成器线程生成一个合成器帧</li>\n<li>然后这个合成器帧通过进程间通信管道IPC传送给浏览器进程，接着浏览器进程将合成器帧传送给GPU，然后GPU渲染展示到屏幕</li>\n<li>当滚动页面时，则会生成一个新的合成器帧，新的帧在传递给浏览器进程，然后传递给GPU，然后渲染到屏幕</li>\n</ol>\n<p>好的，写了一大堆，简单总结下：</p>\n<p>浏览器进程中的网络线程请求获取到html数据后，通过IPC通信将数据传递给渲染器进程的主线程，主线程将html解析构造DOM树，然后进行样式计算，根据DOM树和样式计算生成<code>layoutTree</code>，通过遍历<code>layoutTree</code>生成绘制顺序表，接着遍历<code>layoutTree</code>生成<code>layerTree</code>，然后主线程将<code>layerTree</code>和绘制信息一起传给合成器线程，合成器线程按规则进行分图层，并把图层分为更小的图块，然后传给栅格线程进行栅格化，栅格化完成后，合成器线程将会获得栅格线程传递来的图块信息，根据这些信息，合成器线程生成一个合成器帧，然后将合成器帧通过IPC传递给浏览器进程，浏览器进程在传递给GPU进程进行渲染，这就展示到页面上了。</p>\n<p>当改变元素尺寸位置属性时，会重新进行样式计算(computed style)、布局(layout)、绘制(paint)以及后边的所有流程，这种行为称为<code>重排</code>。<br>当我们改变元素颜色属性时，不会重新触发布局，但还是会触发样式计算和绘制，这个就是<code>重绘</code>。</p>\n<p>我们可以发现，重绘和重排都会主线程，还有JS也是运行在主线程上的，那么他们就会出现抢占执行时间的问题，如果写了一个不断导致重绘重排的动画，浏览器则需要在每一帧都运行样式计算，布局和绘制的操作，我们知道页面每秒60帧进行刷新，用户才不会感知，如果页面在运行动画时还有大量JS任务需要执行，因为布局，绘制和JS执行都在主线程运行，当在一帧的时间内布局和绘制结束后，还有剩余时间，JS就会拿到主线程的使用权，如果JS执行时间过长，就会导致在下一帧开始时，JS没有及时归还主线程，导致下一帧没有按时渲染，就会出现页面卡顿，1.  我们可以通过<code>requestAnimationFrame()</code> 这个API进行优化，这个方法会在每一帧被调用，我们可以把JS运行任务分成更小的任务块，分到每一帧，在每一帧时间用完前暂停JS执行，归还主线程，这样的话在下一帧开始时，主线程就可以按时执行布局和绘制。2. 通过 <code>transform</code>的动画不会进行布局和绘制，而是直接运行在合成器线程和栅格化线程中，所以不会收到主线程JS的影响，由于不需要进行布局绘制，样式计算等操作，所以节省了很多时间。</p>"},{"title":"互联网是如何运作","_content":"### 客户端和服务端通信\n电脑连入互联网，电脑就会获得一个IP(internet  protocol address)地址。\n服务器接入互联网，也会获得一个IP地址， 我们常说的访问这个网站，其实就是访问这个网站的服务器的IP地址。\n假如你的电脑想访问服务器，那么这个时候电脑就是客户端，服务器就是服务端， 这种形式也就是客户端服务端模型。\n<!-- more -->\n\n客户端想访问 ``index.html``， 文本数据会转换成电子信号，通过电缆发送给服务器，在服务器端，再将电子信号转换成计算机使用的文本数据。\n那么到底如何传递呢，就要通过 ``TCP/IP协议族``，协议就是一种规则，用于指定计算机应该如何通过网络来相互通信。\n\n``TCP/IP协议族``分为自顶向下的4层，网络协议通过分层，来实现每一层的职责。\n1. 应用层：提供特定于应用程序的协议， HTTP(浏览器和服务器相互通信)、FTP(文件传输)、IMAP(邮件客户端检索)\n2. TCP传输控制层：发送数据包到计算机特定端口号的应用程序\n3. IP网络层 使用IP地址将数据包 发送到特定的计算机\n4. 链路层：将二进制数据包与网络信号相互转换\n\n我们想请求的 ``index.html`` 首先分解为许多片段，我们称之为数据包。然后经过应用层来到TCP传输层，将每一个数据包分配端口号，然后进入网络层，每个数据包将赋予目标计算机的IP地址，最后进入链路层，将数据包的文本信息转译成电子信号，通过电缆传输。\n在电缆的另一端的路由器，去检查每一个数据包的目标地址，并确定将其发送到何处，最终数据包到达指定的服务器后，数据包将从``TCP/IP协议族``的底部开始向上运行，在数据通过``TCP/IP协议族``的过程时，数据包的路由数据(例如IP地址，端口号)都将剥离出去，当数据包到达协议族应用层时，数据已经恢复成原始文本数据，通过端口号找到对应应用程序，应用程序根据请求内容做出响应。\n比如刚才的``index.html``，服务器将数据，通过刚才客户端请求服务器的相同的方式，响应给客户端，这样就看到了首页内容，也就是完成了一次客户端与服务器在互联网中的数据交互。\n\n这里需要注意下：\n1. TCP是可靠的连接协议，在建立连接是需要进行三次握手，每个收到的数据包都会向发送方发送``ack确认``，以确保发送成功。\n2. IP是不可靠的无连接协议，他不关心数据包是否到达，也不关心端口和地址，只关心连接到目标IP地址。\n3. 当数据包比较大，在网络层会进行分包处理，分包后到达时间不一样，TCP会根据数据包携带的序列号排序重组，如果发送方在特定时间没有接收到接收方发送的ack确认，会再次重新发送。\n4. IP 是一种协议，分为IPV4(2^32次方) 和 IPV6(2^128次方)，IP地址是一串数组 192.168.1.1\n\n### 互联网怎么构成的\n电脑通过调制解调器moden，也就是俗称的``猫``， 将数字电信号转换成可延电话线传播的模拟信号后，在公共电话网络进行传输，公共电话网络通过连接``ISP``(internet server provider 互联网服务提供商，比如我们的电信、移动、联通)来接入互联网，通过``ISP``将连接到``ISP``的主干网络也就是``NSP(network server provider)``, ``ISP``可以从``NSP``批量购买带宽，为客户提供网络接入服务，``NSP``通过网络访问点``NAP``相连接，来交换数据包流量，每个``NSP``必须至少连接三个``NAP``，``NSP``主干可以通过``NAP``链接到另一个``NSP``主干，当然互联网架构不会这么简单，这里只是一个简化 ，那互联网到底如何将数据包找到正确路线呢，互联网中有一个特殊的计算器``路由器`` ,``路由器``上有一个``路由表``，记录了子网络所有IP地址，但是他不知道上层网络所包含的IP地址，当数据到达路由器，路由器检查路由表是否有对应的IP地址，如果有则直接发送给对应的网络，没有则向上层传递数据包在更高层级的路由器查找IP地址，如果依然没找到，则接着向上层找，直到到达``NSP``主干网为止，连接到``NSP``主干网的路由器拥有最大的路由表，通过这张表可以将数据包发送到正确的骨干网，然后向下传播，直到找到目的地为止，电脑连接服务器就是这样一个过程。\n\n但是也有一个问题，我们是不可能记住IP地址的，并且IP地址也可能更换，所有就会有一个域名，那浏览器怎么通过域名知道访问哪个IP地址呢，就要依靠一个叫``DNS``(domain names service)服务器， 上面记录了IP地址和域名的对应关系，在浏览器输入网址，浏览器首先访问``DNS服务器``，获取到该域名的IP地址后 ，浏览器再访问该IP地址的服务器。\n\n","source":"_posts/网络/01-互联网如何运作.md","raw":"---\ntitle: 互联网是如何运作\ntags: 网络\n---\n### 客户端和服务端通信\n电脑连入互联网，电脑就会获得一个IP(internet  protocol address)地址。\n服务器接入互联网，也会获得一个IP地址， 我们常说的访问这个网站，其实就是访问这个网站的服务器的IP地址。\n假如你的电脑想访问服务器，那么这个时候电脑就是客户端，服务器就是服务端， 这种形式也就是客户端服务端模型。\n<!-- more -->\n\n客户端想访问 ``index.html``， 文本数据会转换成电子信号，通过电缆发送给服务器，在服务器端，再将电子信号转换成计算机使用的文本数据。\n那么到底如何传递呢，就要通过 ``TCP/IP协议族``，协议就是一种规则，用于指定计算机应该如何通过网络来相互通信。\n\n``TCP/IP协议族``分为自顶向下的4层，网络协议通过分层，来实现每一层的职责。\n1. 应用层：提供特定于应用程序的协议， HTTP(浏览器和服务器相互通信)、FTP(文件传输)、IMAP(邮件客户端检索)\n2. TCP传输控制层：发送数据包到计算机特定端口号的应用程序\n3. IP网络层 使用IP地址将数据包 发送到特定的计算机\n4. 链路层：将二进制数据包与网络信号相互转换\n\n我们想请求的 ``index.html`` 首先分解为许多片段，我们称之为数据包。然后经过应用层来到TCP传输层，将每一个数据包分配端口号，然后进入网络层，每个数据包将赋予目标计算机的IP地址，最后进入链路层，将数据包的文本信息转译成电子信号，通过电缆传输。\n在电缆的另一端的路由器，去检查每一个数据包的目标地址，并确定将其发送到何处，最终数据包到达指定的服务器后，数据包将从``TCP/IP协议族``的底部开始向上运行，在数据通过``TCP/IP协议族``的过程时，数据包的路由数据(例如IP地址，端口号)都将剥离出去，当数据包到达协议族应用层时，数据已经恢复成原始文本数据，通过端口号找到对应应用程序，应用程序根据请求内容做出响应。\n比如刚才的``index.html``，服务器将数据，通过刚才客户端请求服务器的相同的方式，响应给客户端，这样就看到了首页内容，也就是完成了一次客户端与服务器在互联网中的数据交互。\n\n这里需要注意下：\n1. TCP是可靠的连接协议，在建立连接是需要进行三次握手，每个收到的数据包都会向发送方发送``ack确认``，以确保发送成功。\n2. IP是不可靠的无连接协议，他不关心数据包是否到达，也不关心端口和地址，只关心连接到目标IP地址。\n3. 当数据包比较大，在网络层会进行分包处理，分包后到达时间不一样，TCP会根据数据包携带的序列号排序重组，如果发送方在特定时间没有接收到接收方发送的ack确认，会再次重新发送。\n4. IP 是一种协议，分为IPV4(2^32次方) 和 IPV6(2^128次方)，IP地址是一串数组 192.168.1.1\n\n### 互联网怎么构成的\n电脑通过调制解调器moden，也就是俗称的``猫``， 将数字电信号转换成可延电话线传播的模拟信号后，在公共电话网络进行传输，公共电话网络通过连接``ISP``(internet server provider 互联网服务提供商，比如我们的电信、移动、联通)来接入互联网，通过``ISP``将连接到``ISP``的主干网络也就是``NSP(network server provider)``, ``ISP``可以从``NSP``批量购买带宽，为客户提供网络接入服务，``NSP``通过网络访问点``NAP``相连接，来交换数据包流量，每个``NSP``必须至少连接三个``NAP``，``NSP``主干可以通过``NAP``链接到另一个``NSP``主干，当然互联网架构不会这么简单，这里只是一个简化 ，那互联网到底如何将数据包找到正确路线呢，互联网中有一个特殊的计算器``路由器`` ,``路由器``上有一个``路由表``，记录了子网络所有IP地址，但是他不知道上层网络所包含的IP地址，当数据到达路由器，路由器检查路由表是否有对应的IP地址，如果有则直接发送给对应的网络，没有则向上层传递数据包在更高层级的路由器查找IP地址，如果依然没找到，则接着向上层找，直到到达``NSP``主干网为止，连接到``NSP``主干网的路由器拥有最大的路由表，通过这张表可以将数据包发送到正确的骨干网，然后向下传播，直到找到目的地为止，电脑连接服务器就是这样一个过程。\n\n但是也有一个问题，我们是不可能记住IP地址的，并且IP地址也可能更换，所有就会有一个域名，那浏览器怎么通过域名知道访问哪个IP地址呢，就要依靠一个叫``DNS``(domain names service)服务器， 上面记录了IP地址和域名的对应关系，在浏览器输入网址，浏览器首先访问``DNS服务器``，获取到该域名的IP地址后 ，浏览器再访问该IP地址的服务器。\n\n","slug":"网络/01-互联网如何运作","published":1,"date":"2023-03-01T02:51:30.490Z","updated":"2023-02-28T16:23:53.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clesom00r000c5oupc4gp0o2z","content":"<h3 id=\"客户端和服务端通信\"><a href=\"#客户端和服务端通信\" class=\"headerlink\" title=\"客户端和服务端通信\"></a>客户端和服务端通信</h3><p>电脑连入互联网，电脑就会获得一个IP(internet  protocol address)地址。<br>服务器接入互联网，也会获得一个IP地址， 我们常说的访问这个网站，其实就是访问这个网站的服务器的IP地址。<br>假如你的电脑想访问服务器，那么这个时候电脑就是客户端，服务器就是服务端， 这种形式也就是客户端服务端模型。</p>\n<span id=\"more\"></span>\n\n<p>客户端想访问 <code>index.html</code>， 文本数据会转换成电子信号，通过电缆发送给服务器，在服务器端，再将电子信号转换成计算机使用的文本数据。<br>那么到底如何传递呢，就要通过 <code>TCP/IP协议族</code>，协议就是一种规则，用于指定计算机应该如何通过网络来相互通信。</p>\n<p><code>TCP/IP协议族</code>分为自顶向下的4层，网络协议通过分层，来实现每一层的职责。</p>\n<ol>\n<li>应用层：提供特定于应用程序的协议， HTTP(浏览器和服务器相互通信)、FTP(文件传输)、IMAP(邮件客户端检索)</li>\n<li>TCP传输控制层：发送数据包到计算机特定端口号的应用程序</li>\n<li>IP网络层 使用IP地址将数据包 发送到特定的计算机</li>\n<li>链路层：将二进制数据包与网络信号相互转换</li>\n</ol>\n<p>我们想请求的 <code>index.html</code> 首先分解为许多片段，我们称之为数据包。然后经过应用层来到TCP传输层，将每一个数据包分配端口号，然后进入网络层，每个数据包将赋予目标计算机的IP地址，最后进入链路层，将数据包的文本信息转译成电子信号，通过电缆传输。<br>在电缆的另一端的路由器，去检查每一个数据包的目标地址，并确定将其发送到何处，最终数据包到达指定的服务器后，数据包将从<code>TCP/IP协议族</code>的底部开始向上运行，在数据通过<code>TCP/IP协议族</code>的过程时，数据包的路由数据(例如IP地址，端口号)都将剥离出去，当数据包到达协议族应用层时，数据已经恢复成原始文本数据，通过端口号找到对应应用程序，应用程序根据请求内容做出响应。<br>比如刚才的<code>index.html</code>，服务器将数据，通过刚才客户端请求服务器的相同的方式，响应给客户端，这样就看到了首页内容，也就是完成了一次客户端与服务器在互联网中的数据交互。</p>\n<p>这里需要注意下：</p>\n<ol>\n<li>TCP是可靠的连接协议，在建立连接是需要进行三次握手，每个收到的数据包都会向发送方发送<code>ack确认</code>，以确保发送成功。</li>\n<li>IP是不可靠的无连接协议，他不关心数据包是否到达，也不关心端口和地址，只关心连接到目标IP地址。</li>\n<li>当数据包比较大，在网络层会进行分包处理，分包后到达时间不一样，TCP会根据数据包携带的序列号排序重组，如果发送方在特定时间没有接收到接收方发送的ack确认，会再次重新发送。</li>\n<li>IP 是一种协议，分为IPV4(2^32次方) 和 IPV6(2^128次方)，IP地址是一串数组 192.168.1.1</li>\n</ol>\n<h3 id=\"互联网怎么构成的\"><a href=\"#互联网怎么构成的\" class=\"headerlink\" title=\"互联网怎么构成的\"></a>互联网怎么构成的</h3><p>电脑通过调制解调器moden，也就是俗称的<code>猫</code>， 将数字电信号转换成可延电话线传播的模拟信号后，在公共电话网络进行传输，公共电话网络通过连接<code>ISP</code>(internet server provider 互联网服务提供商，比如我们的电信、移动、联通)来接入互联网，通过<code>ISP</code>将连接到<code>ISP</code>的主干网络也就是<code>NSP(network server provider)</code>, <code>ISP</code>可以从<code>NSP</code>批量购买带宽，为客户提供网络接入服务，<code>NSP</code>通过网络访问点<code>NAP</code>相连接，来交换数据包流量，每个<code>NSP</code>必须至少连接三个<code>NAP</code>，<code>NSP</code>主干可以通过<code>NAP</code>链接到另一个<code>NSP</code>主干，当然互联网架构不会这么简单，这里只是一个简化 ，那互联网到底如何将数据包找到正确路线呢，互联网中有一个特殊的计算器<code>路由器</code> ,<code>路由器</code>上有一个<code>路由表</code>，记录了子网络所有IP地址，但是他不知道上层网络所包含的IP地址，当数据到达路由器，路由器检查路由表是否有对应的IP地址，如果有则直接发送给对应的网络，没有则向上层传递数据包在更高层级的路由器查找IP地址，如果依然没找到，则接着向上层找，直到到达<code>NSP</code>主干网为止，连接到<code>NSP</code>主干网的路由器拥有最大的路由表，通过这张表可以将数据包发送到正确的骨干网，然后向下传播，直到找到目的地为止，电脑连接服务器就是这样一个过程。</p>\n<p>但是也有一个问题，我们是不可能记住IP地址的，并且IP地址也可能更换，所有就会有一个域名，那浏览器怎么通过域名知道访问哪个IP地址呢，就要依靠一个叫<code>DNS</code>(domain names service)服务器， 上面记录了IP地址和域名的对应关系，在浏览器输入网址，浏览器首先访问<code>DNS服务器</code>，获取到该域名的IP地址后 ，浏览器再访问该IP地址的服务器。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"客户端和服务端通信\"><a href=\"#客户端和服务端通信\" class=\"headerlink\" title=\"客户端和服务端通信\"></a>客户端和服务端通信</h3><p>电脑连入互联网，电脑就会获得一个IP(internet  protocol address)地址。<br>服务器接入互联网，也会获得一个IP地址， 我们常说的访问这个网站，其实就是访问这个网站的服务器的IP地址。<br>假如你的电脑想访问服务器，那么这个时候电脑就是客户端，服务器就是服务端， 这种形式也就是客户端服务端模型。</p>","more":"<p>客户端想访问 <code>index.html</code>， 文本数据会转换成电子信号，通过电缆发送给服务器，在服务器端，再将电子信号转换成计算机使用的文本数据。<br>那么到底如何传递呢，就要通过 <code>TCP/IP协议族</code>，协议就是一种规则，用于指定计算机应该如何通过网络来相互通信。</p>\n<p><code>TCP/IP协议族</code>分为自顶向下的4层，网络协议通过分层，来实现每一层的职责。</p>\n<ol>\n<li>应用层：提供特定于应用程序的协议， HTTP(浏览器和服务器相互通信)、FTP(文件传输)、IMAP(邮件客户端检索)</li>\n<li>TCP传输控制层：发送数据包到计算机特定端口号的应用程序</li>\n<li>IP网络层 使用IP地址将数据包 发送到特定的计算机</li>\n<li>链路层：将二进制数据包与网络信号相互转换</li>\n</ol>\n<p>我们想请求的 <code>index.html</code> 首先分解为许多片段，我们称之为数据包。然后经过应用层来到TCP传输层，将每一个数据包分配端口号，然后进入网络层，每个数据包将赋予目标计算机的IP地址，最后进入链路层，将数据包的文本信息转译成电子信号，通过电缆传输。<br>在电缆的另一端的路由器，去检查每一个数据包的目标地址，并确定将其发送到何处，最终数据包到达指定的服务器后，数据包将从<code>TCP/IP协议族</code>的底部开始向上运行，在数据通过<code>TCP/IP协议族</code>的过程时，数据包的路由数据(例如IP地址，端口号)都将剥离出去，当数据包到达协议族应用层时，数据已经恢复成原始文本数据，通过端口号找到对应应用程序，应用程序根据请求内容做出响应。<br>比如刚才的<code>index.html</code>，服务器将数据，通过刚才客户端请求服务器的相同的方式，响应给客户端，这样就看到了首页内容，也就是完成了一次客户端与服务器在互联网中的数据交互。</p>\n<p>这里需要注意下：</p>\n<ol>\n<li>TCP是可靠的连接协议，在建立连接是需要进行三次握手，每个收到的数据包都会向发送方发送<code>ack确认</code>，以确保发送成功。</li>\n<li>IP是不可靠的无连接协议，他不关心数据包是否到达，也不关心端口和地址，只关心连接到目标IP地址。</li>\n<li>当数据包比较大，在网络层会进行分包处理，分包后到达时间不一样，TCP会根据数据包携带的序列号排序重组，如果发送方在特定时间没有接收到接收方发送的ack确认，会再次重新发送。</li>\n<li>IP 是一种协议，分为IPV4(2^32次方) 和 IPV6(2^128次方)，IP地址是一串数组 192.168.1.1</li>\n</ol>\n<h3 id=\"互联网怎么构成的\"><a href=\"#互联网怎么构成的\" class=\"headerlink\" title=\"互联网怎么构成的\"></a>互联网怎么构成的</h3><p>电脑通过调制解调器moden，也就是俗称的<code>猫</code>， 将数字电信号转换成可延电话线传播的模拟信号后，在公共电话网络进行传输，公共电话网络通过连接<code>ISP</code>(internet server provider 互联网服务提供商，比如我们的电信、移动、联通)来接入互联网，通过<code>ISP</code>将连接到<code>ISP</code>的主干网络也就是<code>NSP(network server provider)</code>, <code>ISP</code>可以从<code>NSP</code>批量购买带宽，为客户提供网络接入服务，<code>NSP</code>通过网络访问点<code>NAP</code>相连接，来交换数据包流量，每个<code>NSP</code>必须至少连接三个<code>NAP</code>，<code>NSP</code>主干可以通过<code>NAP</code>链接到另一个<code>NSP</code>主干，当然互联网架构不会这么简单，这里只是一个简化 ，那互联网到底如何将数据包找到正确路线呢，互联网中有一个特殊的计算器<code>路由器</code> ,<code>路由器</code>上有一个<code>路由表</code>，记录了子网络所有IP地址，但是他不知道上层网络所包含的IP地址，当数据到达路由器，路由器检查路由表是否有对应的IP地址，如果有则直接发送给对应的网络，没有则向上层传递数据包在更高层级的路由器查找IP地址，如果依然没找到，则接着向上层找，直到到达<code>NSP</code>主干网为止，连接到<code>NSP</code>主干网的路由器拥有最大的路由表，通过这张表可以将数据包发送到正确的骨干网，然后向下传播，直到找到目的地为止，电脑连接服务器就是这样一个过程。</p>\n<p>但是也有一个问题，我们是不可能记住IP地址的，并且IP地址也可能更换，所有就会有一个域名，那浏览器怎么通过域名知道访问哪个IP地址呢，就要依靠一个叫<code>DNS</code>(domain names service)服务器， 上面记录了IP地址和域名的对应关系，在浏览器输入网址，浏览器首先访问<code>DNS服务器</code>，获取到该域名的IP地址后 ，浏览器再访问该IP地址的服务器。</p>"},{"title":"前端性能优化","_content":"","source":"_posts/网络/03-前端性能优化.md","raw":"---\ntitle: 前端性能优化\ntags: 网络\n---\n","slug":"网络/03-前端性能优化","published":1,"date":"2023-03-03T14:35:15.276Z","updated":"2023-03-03T14:35:15.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clesom00t000e5oupdyk75n42","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clesom00f00015oup5pwkabpv","tag_id":"clesom00k00035oupcalpfgsi","_id":"clesom00p00085oup6rtf85c6"},{"post_id":"clesom00i00025oup1d0lgygd","tag_id":"clesom00o00075oupgjc5duwz","_id":"clesom00t000d5oupajgy5v8p"},{"post_id":"clesom00l00045oupgm2y9y89","tag_id":"clesom00o00075oupgjc5duwz","_id":"clesom00u000g5oup2zxxf1nr"},{"post_id":"clesom00m00055oup383cdo7r","tag_id":"clesom00o00075oupgjc5duwz","_id":"clesom00u000i5oupfjwn3p3n"},{"post_id":"clesom00n00065oupd8ffbyor","tag_id":"clesom00u000h5oupdusc760s","_id":"clesom00v000k5oup07qpae4g"},{"post_id":"clesom00p00095oup775i505q","tag_id":"clesom00u000h5oupdusc760s","_id":"clesom00v000m5ouph97jdtjb"},{"post_id":"clesom00q000a5oupeso1bmok","tag_id":"clesom00v000l5oupbvnobe4s","_id":"clesom00w000o5oup0ux0ca5f"},{"post_id":"clesom00r000c5oupc4gp0o2z","tag_id":"clesom00v000l5oupbvnobe4s","_id":"clesom00w000q5oupgjta3jku"},{"post_id":"clesom00t000e5oupdyk75n42","tag_id":"clesom00v000l5oupbvnobe4s","_id":"clesom00w000r5oup240y38mn"}],"Tag":[{"name":"CSS","_id":"clesom00k00035oupcalpfgsi"},{"name":"JS","_id":"clesom00o00075oupgjc5duwz"},{"name":"Vue","_id":"clesom00u000h5oupdusc760s"},{"name":"网络","_id":"clesom00v000l5oupbvnobe4s"}]}}