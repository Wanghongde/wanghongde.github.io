{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/concise/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/concise/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/concise/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/concise/source/js/scrollspy.min.js","path":"js/scrollspy.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/CSS/01-Flex布局.md","hash":"f12904c70eb42f40c763e22f2dc3e75b1b875f6f","modified":1679058540234},{"_id":"source/_posts/CSS/02-浅析BFC.md","hash":"c47c4bb8a62f4a91b65921df82330d54138f0ac5","modified":1679058540234},{"_id":"source/_posts/CSS/03-Grid布局.md","hash":"530245733abb9e0f05515b8fdba1dda3d46a306d","modified":1679058540234},{"_id":"source/_posts/JS/01-手写Promise.md","hash":"1d4d5e7a1601268d5c30b9f95e1de1ce654a5f29","modified":1679058540234},{"_id":"source/_posts/CSS/04-重绘重排.md","hash":"8afc0f7a6e767f48a86973367867d1cca272bf22","modified":1679058540234},{"_id":"source/_posts/JS/02-手写axios.md","hash":"e333a970a3430623ff3ca7db55567f3487622199","modified":1679058540235},{"_id":"source/_posts/JS/03-手写瀑布流.md","hash":"5c9e545f045dbf20f607e6b5a071d7dfd19f8905","modified":1679058540235},{"_id":"source/_posts/JS/05-手写toy_vue(上).md","hash":"210e4237f05301223b5da0e8c0d249844d179d4f","modified":1679058540235},{"_id":"source/about/index.md","hash":"6c22d8e5b7e3bd9265542a166b2683244fd88504","modified":1679058540238},{"_id":"source/_posts/JS/04-手写图片懒加载.md","hash":"6700e651e11593061f77ca342f040ef37255b305","modified":1679058540235},{"_id":"source/_posts/JS/06-手写toy_vue(下).md","hash":"a77103fb6629748dec3c196b31f33c50c7a63671","modified":1679058540235},{"_id":"source/_posts/JS/08-手写 new.md","hash":"c20d24b29fe31975eb6eee2e6db24bfe72b52e55","modified":1679058540236},{"_id":"source/_posts/JS/07-手写 call&bind&apply.md","hash":"a1e248f9065dccdc367db5ceecb37adb5e1d026d","modified":1679058540235},{"_id":"source/_posts/JS/09-防抖和节流.md","hash":"05ab0204ecb93c41aeafb1f786f193917e99bf51","modified":1679058540236},{"_id":"source/_posts/JS/10-浅拷贝和深拷贝.md","hash":"702710a7215056c45e75fc0ce54f07ece0d7ea0a","modified":1679058540236},{"_id":"source/_posts/Vue/02-虚拟列表.md","hash":"6e8f27ef1a03059c94f2167814f1b9cce07740ef","modified":1679058540237},{"_id":"source/_posts/Vue/01-Vue的Reactivity.md","hash":"8a58b7c748a28749063419332ca85549a9418e5e","modified":1679058540236},{"_id":"source/_posts/网络/01-互联网如何运作.md","hash":"841b3a95f3e9a7d8efd37517205b8163c0604631","modified":1679058540237},{"_id":"source/_posts/Vue/03-Vue开发移动端css适配.md","hash":"0e4c209125cf05f5c14c8f940239791548c928f8","modified":1679058540237},{"_id":"source/_posts/网络/02-浏览器如何运作.md","hash":"75a0058088a2ec9cc776c139d9b75586625f3a7e","modified":1679058540237},{"_id":"source/_posts/网络/03-前端性能优化.md","hash":"c2f197b4dd5e7668351418a2c43463d75480eaec","modified":1679058540238},{"_id":"themes/concise/.gitignore","hash":"9840ae7d87abbb5d1c3485fe49d208766e7e7a91","modified":1679058540238},{"_id":"themes/concise/_config.yml","hash":"1688b901f25177259fec4222ae89bad41df32e65","modified":1679060219846},{"_id":"themes/concise/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1679058540239},{"_id":"themes/concise/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1679058540239},{"_id":"themes/concise/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1679058540239},{"_id":"themes/concise/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1679058540239},{"_id":"themes/concise/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1679058540239},{"_id":"themes/concise/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1679058540240},{"_id":"themes/concise/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1679058540240},{"_id":"themes/concise/layout/categories.ejs","hash":"098548f25e3b0002197ca5a5c949413dfdfbc498","modified":1679058540241},{"_id":"themes/concise/layout/archive.ejs","hash":"5417c76f89e39198d55417995b199ac945ebd5be","modified":1679059855193},{"_id":"themes/concise/layout/category.ejs","hash":"e29542322fe798281a40eed476468aa8afba7d50","modified":1679059855194},{"_id":"themes/concise/layout/index.ejs","hash":"e29542322fe798281a40eed476468aa8afba7d50","modified":1679059855194},{"_id":"themes/concise/layout/layout.ejs","hash":"b09bdfeedd5e85ad492d648738fc3d4f44e5ec13","modified":1679059855194},{"_id":"themes/concise/layout/page.ejs","hash":"576ae239f3aa9cda0aede19e9a7ff13e92fed13c","modified":1679058540242},{"_id":"themes/concise/layout/tag.ejs","hash":"0ef29619219277632a221155e51a85673011e248","modified":1679059855194},{"_id":"themes/concise/layout/post.ejs","hash":"890b1c8413d7da9cf3e670d7d5296749ecf043a3","modified":1679059855194},{"_id":"themes/concise/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1679058540238},{"_id":"themes/concise/layout/tags.ejs","hash":"43fd00a1e3f75b7e2411047345b9091257920752","modified":1679059855194},{"_id":"themes/concise/scripts/include.js","hash":"3fd0947904a06209d1f58e97efe77d06abbabcb5","modified":1679058540244},{"_id":"themes/concise/scripts/md5.js","hash":"30cbb6ab90e07b57e5ea060534437c73a5ca3a65","modified":1679058540244},{"_id":"themes/concise/layout/_partial/article.ejs","hash":"40cff2943bda22e0ad6ffc5b4a24917d1a797bea","modified":1679059855192},{"_id":"themes/concise/layout/_partial/archive.ejs","hash":"67891e427712e39d73058f3001eabd8758dd0bbf","modified":1679059855192},{"_id":"themes/concise/layout/_partial/footer.ejs","hash":"fdc8922e49eb754e5bccb881f76b7c8b08c233ba","modified":1679059855193},{"_id":"themes/concise/layout/_partial/comments.ejs","hash":"c9162ae5511997169a6a0d41366a455519f3eabc","modified":1679058540240},{"_id":"themes/concise/layout/_partial/header.ejs","hash":"740d7291b058f99626f6fca568a1b92c092079f2","modified":1679059855193},{"_id":"themes/concise/layout/_partial/nav.ejs","hash":"c87ed02859a3e826dfc990af7e9a0564958a2c1c","modified":1679059855193},{"_id":"themes/concise/source/css/_archive.less","hash":"eeb86137568533fae120e00ef912213e07690724","modified":1679059855197},{"_id":"themes/concise/README.md","hash":"83ec4c89c96a979812b2e01d5b76956a78725194","modified":1679059855190},{"_id":"themes/concise/source/css/_category.less","hash":"50f72ccfc0ef72e7b11ee1afc120b97c769251f5","modified":1679058540245},{"_id":"themes/concise/source/css/_app.less","hash":"d7c5262b703e751ca571568c53b872a0139ed2dc","modified":1679059855197},{"_id":"themes/concise/source/css/_footer.less","hash":"e152a8e3f24ecb2354e7bd65e480ba6828577c22","modified":1679059855198},{"_id":"themes/concise/source/css/_aside.less","hash":"2547c63fa5853302968da3ff5b81286ddb56e513","modified":1679059855197},{"_id":"themes/concise/source/css/_article.less","hash":"4f90288a86f2be72403fad8f93233aadb7b0eac3","modified":1679059855197},{"_id":"themes/concise/source/css/_icons.less","hash":"f055a61fa6971272efc7ecea708f229d99a2cf58","modified":1679059855198},{"_id":"themes/concise/source/css/_markdown.less","hash":"2b82b41d0feb236b18bb4ad2e1451350b15394e1","modified":1679059855198},{"_id":"themes/concise/source/css/_comments.less","hash":"60f22ee2e9aa024672ec862d5968d97a02eb1a3f","modified":1679059855198},{"_id":"themes/concise/source/css/_monokai-sublime.less","hash":"4cf301989ec56deec414dcfbb0056964854f87d6","modified":1679059855199},{"_id":"themes/concise/source/css/_mixin.less","hash":"96f224ac301293c97dd313da67ca727c8ff17837","modified":1679059855198},{"_id":"themes/concise/source/css/_nav.less","hash":"3076584f8646eb8ab94039d8d5e9848c348332af","modified":1679059855199},{"_id":"themes/concise/source/css/style.less","hash":"42c74ccb0e0dfdbd13ce28cd388439ae617f9bda","modified":1679059855200},{"_id":"themes/concise/source/css/_vars.less","hash":"60dab5f5ca67e8d3d3f439f6d10f0a40a653f0c7","modified":1679059855200},{"_id":"themes/concise/source/css/_page.less","hash":"da37dc49f62551b6e6e32a6a1455acbd8bdd4bf7","modified":1679059855199},{"_id":"themes/concise/source/css/_tags.less","hash":"1f3c2214e93dad1e6ca7dd1cad79de6d236eaf10","modified":1679059855199},{"_id":"themes/concise/source/css/_reset.less","hash":"d080fd7536999b4f22e8a07b3b70d451f0c8c33c","modified":1679059855199},{"_id":"themes/concise/source/fonts/icomoon.eot","hash":"8300564edcd12262c6b8b97ba225bc00b72f5984","modified":1677638637132},{"_id":"themes/concise/source/fonts/icomoon.svg","hash":"53a7893b9b630440f7381b156d3b7c9566c47523","modified":1679058540247},{"_id":"themes/concise/source/fonts/icomoon.woff","hash":"5a3b86fa1122f78d9b285fbd390bf142721c51ed","modified":1677638637134},{"_id":"themes/concise/source/fonts/icomoon.ttf","hash":"6b577c657ccb5de7c321e51942a52922a4e95ec1","modified":1677638637133},{"_id":"themes/concise/source/svg/_github.svg","hash":"f2355900fe0ec5ed2f4e6d4cb271bda5feb90f06","modified":1679058540248},{"_id":"themes/concise/source/svg/_mail.svg","hash":"3a0421e792a0de74b85abf15fd8e1101984ae8cf","modified":1679058540248},{"_id":"themes/concise/source/images/avatar.jpg","hash":"a514e8593579a22a2d9b7f475a147f46f0fd147a","modified":1679060262107},{"_id":"themes/concise/layout/_partial/post/date.ejs","hash":"12dcac9e7fd9502b65b5167efd69d3bb01625c1c","modified":1679059855193},{"_id":"themes/concise/layout/_partial/post/tags.ejs","hash":"b57e62180b12ab5493e24a740f126970764ae4c0","modified":1679059855193},{"_id":"themes/concise/layout/_partial/articles.ejs","hash":"73c0e73d7ba9c75ee7750e891d797ea0c6f43bd6","modified":1679059855192},{"_id":"themes/concise/layout/_partial/aside.ejs","hash":"5607cfd592e3c593941e6c7e7e24ad85bdc653a1","modified":1679059855192},{"_id":"themes/concise/source/images/favicon.ico","hash":"dde598176c93ef1bd9dacfbc6b3dc82cf96c763b","modified":1679060279542},{"_id":"themes/concise/source/js/scrollspy.min.js","hash":"076f7db44c3a05147144f736cae159baf1612f72","modified":1679058540248},{"_id":"themes/concise/source/svg/_twitter.svg","hash":"05ad5df10a4495e85ae417e241186e5205af930d","modified":1679058540248},{"_id":"themes/concise/preview.png","hash":"3dd563ba6885b21e85e721daa4e038f748585f8c","modified":1677638637125},{"_id":"public/about/index.html","hash":"d00cdcff7aa3ed750f98da6537f8038d3ca14bdf","modified":1679060732633},{"_id":"public/2023/03/12/JS/10-浅拷贝和深拷贝/index.html","hash":"4ab1a1110b6280d379f98a3780d668b9932df433","modified":1678719879951},{"_id":"public/2023/03/12/CSS/04-重绘重排/index.html","hash":"3c979021d2f6287bc5405373fcbe58b16b6004ab","modified":1678720961452},{"_id":"public/2023/03/12/CSS/03-Grid布局/index.html","hash":"d4718cc13b2d738deb5238faeb632971fec273c7","modified":1678719879951},{"_id":"public/2023/03/09/CSS/02-浅析BFC/index.html","hash":"e024b8b28a2b87608adb94cbcf268bc5e5a522ce","modified":1678719879951},{"_id":"public/2023/03/06/Vue/03-Vue开发移动端css适配/index.html","hash":"80bc004f8436e25a7c5435c64e56de7871f0b2ef","modified":1678719879951},{"_id":"public/2023/03/03/网络/03-前端性能优化/index.html","hash":"8d3ecdd646a7cf3507a106c0d600e82842938f3e","modified":1678719879951},{"_id":"public/2023/03/01/网络/01-互联网如何运作/index.html","hash":"b2737ff883e9e1bf5bef3b298dc40c3f391a9c66","modified":1678719879951},{"_id":"public/archives/index.html","hash":"12c740733ffc6bf607346e3ed5bfa644932ad727","modified":1679060732633},{"_id":"public/archives/page/2/index.html","hash":"16a13f0a1ec19abda7f592d16e07b750c45a77fa","modified":1679060732633},{"_id":"public/archives/2023/index.html","hash":"3e100fcc2435cb4f332c6ce7ff4b726361f1b736","modified":1679060732633},{"_id":"public/archives/2023/page/2/index.html","hash":"48c102b302f21906d6ac8d052005926653ae95c9","modified":1679060732633},{"_id":"public/archives/2023/03/index.html","hash":"2df1bd7fd4d77682897a18e4029331c90ed4e418","modified":1679060732633},{"_id":"public/archives/2023/03/page/2/index.html","hash":"3650d00cbc56e9f050569cc6f7e4aec8661479d1","modified":1679060732633},{"_id":"public/tags/CSS/index.html","hash":"099d5c13d0cb453f0dbec2511e4dadb0743253dc","modified":1679060732633},{"_id":"public/tags/JS/index.html","hash":"644b80439e2a28a4fd8faf525dc9a2a8e47a4d9e","modified":1679060732633},{"_id":"public/tags/Vue/index.html","hash":"7296217214ed70b7bb6afddd7b75207af57db3de","modified":1679060732633},{"_id":"public/tags/网络/index.html","hash":"97b8151d2e3e40d129dded6891d57b907f9be395","modified":1679060732633},{"_id":"public/2023/03/12/JS/09-防抖和节流/index.html","hash":"a7eb00e53a2289367d0067695acf2e8644d026da","modified":1678719879951},{"_id":"public/2023/03/12/JS/08-手写 new/index.html","hash":"d4bbc2bf81615af4e219ca55b9affb0fcb5ca22a","modified":1678719879951},{"_id":"public/2023/03/12/JS/07-手写 call&bind&apply/index.html","hash":"ddf851f0331b5ab62ad4e2343180d0eb73d0ab4c","modified":1678719879951},{"_id":"public/2023/03/09/JS/06-手写toy_vue(下)/index.html","hash":"c36602f8a6d8849af85cd809f9df21fe18b8246f","modified":1678719879951},{"_id":"public/2023/03/09/JS/05-手写toy_vue(上)/index.html","hash":"080baaa19d7783383ddbd6f5d2b15e9091d0c435","modified":1678719879951},{"_id":"public/2023/03/05/JS/04-手写图片懒加载/index.html","hash":"0eb392723a0bf99b5f8fe62a38e76944c91e4fd9","modified":1678719879951},{"_id":"public/2023/03/03/JS/03-手写瀑布流/index.html","hash":"7e3ba5106de7e66a70e312708e4e89607b356112","modified":1678719879951},{"_id":"public/2023/03/01/网络/02-浏览器如何运作/index.html","hash":"e60bfece030b96ca96229255f74b1cfadfd6cd5f","modified":1678719879951},{"_id":"public/2023/03/01/Vue/02-虚拟列表/index.html","hash":"33e3f3af4688caaa3942c9a96b02bae711605425","modified":1678719879951},{"_id":"public/2023/03/01/JS/02-手写axios/index.html","hash":"7328e9bbc43c5f28115dde34eda42e28b97dc903","modified":1678719879951},{"_id":"public/2023/03/01/Vue/01-Vue的Reactivity/index.html","hash":"70e90ded8c50df0cdcf85c99426ed46422612297","modified":1678719879951},{"_id":"public/2023/03/01/JS/01-手写Promise/index.html","hash":"67694a90301b3bfb7ddeaf8d89f613e39b07489b","modified":1678719879951},{"_id":"public/2023/03/01/CSS/01-Flex布局/index.html","hash":"b509265398ec64d71bbdc9d6d4c57fa9633b842f","modified":1678719879951},{"_id":"public/index.html","hash":"036edf68d2017e962518f004f59108327c31756f","modified":1679060732633},{"_id":"public/page/2/index.html","hash":"6474ea4179ca0eef9a7b11f869140ad3b9be7a24","modified":1679060732633},{"_id":"public/page/3/index.html","hash":"35a7b0bcd0715072a77d33cbeeb60c6e0c93871f","modified":1679060732633},{"_id":"public/page/4/index.html","hash":"f701a3cab531da56a23a269a09a7e902bb1d933d","modified":1679060732633},{"_id":"public/fonts/icomoon.svg","hash":"821f98d8cdec4dbef208ed6f66c54e7b718fdd6a","modified":1678719879951},{"_id":"public/fonts/icomoon.ttf","hash":"6b577c657ccb5de7c321e51942a52922a4e95ec1","modified":1678719879951},{"_id":"public/images/avatar.jpg","hash":"a514e8593579a22a2d9b7f475a147f46f0fd147a","modified":1678719879951},{"_id":"public/fonts/icomoon.woff","hash":"5a3b86fa1122f78d9b285fbd390bf142721c51ed","modified":1678719879951},{"_id":"public/fonts/icomoon.eot","hash":"8300564edcd12262c6b8b97ba225bc00b72f5984","modified":1678719879951},{"_id":"public/images/favicon.ico","hash":"dde598176c93ef1bd9dacfbc6b3dc82cf96c763b","modified":1678719879951},{"_id":"public/js/scrollspy.min.js","hash":"076f7db44c3a05147144f736cae159baf1612f72","modified":1678719879951},{"_id":"public/css/style.css","hash":"f15056599ce0cbf703b7f43c997a62b917e486e8","modified":1678719879951},{"_id":"source/_posts/JS/11-手写数组的常用方法.md","hash":"8f134d08695d815ef6339ada1c9a0f405b9f0367","modified":1679058540236},{"_id":"public/2023/03/13/JS/11-手写数组的常用方法/index.html","hash":"ea85e085e8f2c716cca90e5a8baf7f3c067ffb96","modified":1678720961452},{"_id":"public/archives/page/3/index.html","hash":"f823e09ee3a0bc4db74d8c7b423ed754130cf4c9","modified":1679060732633},{"_id":"public/archives/2023/page/3/index.html","hash":"7ec736c9f11878249ae02d067c94d1d0bfb89ed8","modified":1679060732633},{"_id":"public/archives/2023/03/page/3/index.html","hash":"a0c879709394e0fe1210fb8a5ed709622dbe404f","modified":1679060732633},{"_id":"public/tags/JS/page/2/index.html","hash":"391bdc45ef321b6663a676457ab8c6d73665edbf","modified":1679060732633},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1679058901882},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1679058901693},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1679058900903},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1679058901691},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1679058901887},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1679058901886},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1679058901888},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1679058901889},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1679058901890},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1679058901891},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1679058901892},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1679058901893},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1679058901895},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1679058901897},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1679058901900},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1679058901901},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1679058901907},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1679058901912},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1679058901914},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1679058901898},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1679058901204},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1679058901158},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1679058901338},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1679058901313},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1679058901627},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1679058901360},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1679058901372},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1679058901421},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1679058901016},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1679058901034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1679058901049},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1679058901167},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1679058901248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1679058901281},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1679058901304},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1679058901298},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1679058901310},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1679058901347},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1679058901392},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1679058901103},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1679058901381},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1679058901193},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1679058901414},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1679058901728},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1679058901730},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1679058901426},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1679058901768},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1679058900931},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1679058901688},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1679058901227},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1679058901256},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1679058901187},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1679058901356},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1679058901410},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1679058901736},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1679058901433},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1679058901737},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1679058901739},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1679058901751},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1679058901741},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1679058901756},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1679058901765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1679058901761},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1679058901749},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1679058901764},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1679058901762},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1679058901759},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1679058901680},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1679058901670},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1679058901868},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1679058901882},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1679058901720},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1679058901554},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1679058901857},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1679058901620},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1679058901831},{"_id":"themes/concise/_config.example.yml","hash":"b1c0a090a385c86d7afa13fb35c9c927f3f93852","modified":1679059855191},{"_id":"public/2023/03/17/网络/01-互联网如何运作/index.html","hash":"ff88447af2e55fa9cf84f35495ae67b3663ab66a","modified":1679060732633},{"_id":"public/2023/03/17/Vue/03-Vue开发移动端css适配/index.html","hash":"65561afc3b40b2cd09e2368a10f9da183e221769","modified":1679060732633},{"_id":"public/2023/03/17/网络/03-前端性能优化/index.html","hash":"09c8df841499f1e2edc8c8f358125f5cecd0491d","modified":1679060732633},{"_id":"public/2023/03/17/CSS/03-Grid布局/index.html","hash":"039d6a010f0ceb6ab0d11aac86934c3fd96d8665","modified":1679060732633},{"_id":"public/2023/03/17/CSS/02-浅析BFC/index.html","hash":"9e13af9322a0a0489878b92bdac83394ad62c2b0","modified":1679060732633},{"_id":"public/2023/03/17/CSS/04-重绘重排/index.html","hash":"ea510569b016daf3456739e3e961f2dca88cf1a8","modified":1679060732633},{"_id":"public/2023/03/17/Vue/02-虚拟列表/index.html","hash":"07ca84840c88146b97c7741281c5af07d23628e1","modified":1679060732633},{"_id":"public/2023/03/17/网络/02-浏览器如何运作/index.html","hash":"7260199c82f1f6f7c53ccb21f19b927bab84f648","modified":1679060732633},{"_id":"public/2023/03/17/JS/08-手写 new/index.html","hash":"742656a58e0e01d88f72c09f59ec16f8628aa1ba","modified":1679060732633},{"_id":"public/2023/03/17/JS/09-防抖和节流/index.html","hash":"ca5110aa08b068867025adcf6127230963d21504","modified":1679060732633},{"_id":"public/2023/03/17/Vue/01-Vue的Reactivity/index.html","hash":"6a406692474125e74df2acc8fe3f5cae5b557ee6","modified":1679060732633},{"_id":"public/2023/03/17/JS/10-浅拷贝和深拷贝/index.html","hash":"bcca1c900aa8d382d9d79935f06a7072ce6fa0f8","modified":1679060732633},{"_id":"public/2023/03/17/JS/03-手写瀑布流/index.html","hash":"6810b4b0c797c5f5dde18715058f468a5abd7706","modified":1679060732633},{"_id":"public/2023/03/17/JS/11-手写数组的常用方法/index.html","hash":"2cf442fc5117da723c0a9b3994dd03381c170579","modified":1679060732633},{"_id":"public/2023/03/17/JS/04-手写图片懒加载/index.html","hash":"fb0a98356f1aeb5983f837cbaf4ddb3b23ca5177","modified":1679060732633},{"_id":"public/2023/03/17/JS/05-手写toy_vue(上)/index.html","hash":"dc457d4dcd0dd2022f54d8e1337f83cee3de37cc","modified":1679060732633},{"_id":"public/2023/03/17/JS/06-手写toy_vue(下)/index.html","hash":"be9841781d97c5aedbd2e292ec6db5824395775f","modified":1679060732633},{"_id":"public/2023/03/17/JS/07-手写 call&bind&apply/index.html","hash":"7536f7f27b8c73b4e2fcb01c628e37ea15e8af26","modified":1679060732633},{"_id":"public/2023/03/17/JS/02-手写axios/index.html","hash":"33d39368d5e29dd2bf89b990148941af27d6788e","modified":1679060732633},{"_id":"public/2023/03/17/JS/01-手写Promise/index.html","hash":"bc8a9adfee7b0f90b55cb2cb11eabd0bc396fd62","modified":1679060732633},{"_id":"public/2023/03/17/CSS/01-Flex布局/index.html","hash":"1c13faa45fd7fe4bd9fc9a1cec01d78e93d7cc01","modified":1679060732633},{"_id":"public/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1679060732633},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1679060732633},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1679060732633},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1679060732633},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1679060732633},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1679060732633},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1679060732633},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1679060732633},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1679060732633},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1679060732633},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1679060732633},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1679060732633}],"Category":[],"Data":[],"Page":[{"_content":"# 王洪德 - 前端工程师\n学校: 长春工业大学\n学历: 本科\n电话: 18811655833\n博客: [https://wanghongde.github.io/](https://wanghongde.github.io/ \"https://wanghongde.github.io/\")\nGihtub: [https://github.com/Wanghongde](https://github.com/Wanghongde \"https://github.com/Wanghongde\")\n邮箱: [18811655833@163.com](mailto:18811655833@163.com \"18811655833@163.com\")\n\n## 技能\n- 熟练掌握HTML5/CSS3/JS\n- 有 Vue 全家桶项目经验\n- 熟练使用 ES6/TS 编写代码\n- 熟悉组件化和模块化\n- 熟悉前端工程化\n- 熟悉Git进行团队协作\n\n## 工作\n### 江苏传智播客教育科技股份有限公司\n前端教研组-讲师\n  - 负责前端课程讲授\n  - 书写完善课程大纲及课件\n  - 辅助学生就业\n\n### 吉林省网开万物网络科技有限公司\n前端开发组-组员\n  - 根据产品需求，设计项目并实行\n  - 项目的推进及维护\n\n## 介绍\n\n- 讲原则，有自制力，热爱前端 \n- 有良好的沟通合作能力，善于沟通\n- 热爱生活，兴趣爱好广泛打球、喝茶、盘串、钓鱼、唱歌","source":"about/index.md","raw":"# 王洪德 - 前端工程师\n学校: 长春工业大学\n学历: 本科\n电话: 18811655833\n博客: [https://wanghongde.github.io/](https://wanghongde.github.io/ \"https://wanghongde.github.io/\")\nGihtub: [https://github.com/Wanghongde](https://github.com/Wanghongde \"https://github.com/Wanghongde\")\n邮箱: [18811655833@163.com](mailto:18811655833@163.com \"18811655833@163.com\")\n\n## 技能\n- 熟练掌握HTML5/CSS3/JS\n- 有 Vue 全家桶项目经验\n- 熟练使用 ES6/TS 编写代码\n- 熟悉组件化和模块化\n- 熟悉前端工程化\n- 熟悉Git进行团队协作\n\n## 工作\n### 江苏传智播客教育科技股份有限公司\n前端教研组-讲师\n  - 负责前端课程讲授\n  - 书写完善课程大纲及课件\n  - 辅助学生就业\n\n### 吉林省网开万物网络科技有限公司\n前端开发组-组员\n  - 根据产品需求，设计项目并实行\n  - 项目的推进及维护\n\n## 介绍\n\n- 讲原则，有自制力，热爱前端 \n- 有良好的沟通合作能力，善于沟通\n- 热爱生活，兴趣爱好广泛打球、喝茶、盘串、钓鱼、唱歌","date":"2023-03-17T13:09:00.238Z","updated":"2023-03-17T13:09:00.238Z","path":"about/index.html","_id":"clf6yh1pr00008cupapzafp5n","title":"","comments":1,"layout":"page","content":"<h1 id=\"王洪德-前端工程师\"><a href=\"#王洪德-前端工程师\" class=\"headerlink\" title=\"王洪德 - 前端工程师\"></a>王洪德 - 前端工程师</h1><p>学校: 长春工业大学<br>学历: 本科<br>电话: 18811655833<br>博客: <a href=\"https://wanghongde.github.io/\" title=\"https://wanghongde.github.io/\">https://wanghongde.github.io/</a><br>Gihtub: <a href=\"https://github.com/Wanghongde\" title=\"https://github.com/Wanghongde\">https://github.com/Wanghongde</a><br>邮箱: <a href=\"mailto:18811655833@163.com\" title=\"18811655833@163.com\">18811655833@163.com</a></p>\n<h2 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h2><ul>\n<li>熟练掌握HTML5/CSS3/JS</li>\n<li>有 Vue 全家桶项目经验</li>\n<li>熟练使用 ES6/TS 编写代码</li>\n<li>熟悉组件化和模块化</li>\n<li>熟悉前端工程化</li>\n<li>熟悉Git进行团队协作</li>\n</ul>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><h3 id=\"江苏传智播客教育科技股份有限公司\"><a href=\"#江苏传智播客教育科技股份有限公司\" class=\"headerlink\" title=\"江苏传智播客教育科技股份有限公司\"></a>江苏传智播客教育科技股份有限公司</h3><p>前端教研组-讲师</p>\n<ul>\n<li>负责前端课程讲授</li>\n<li>书写完善课程大纲及课件</li>\n<li>辅助学生就业</li>\n</ul>\n<h3 id=\"吉林省网开万物网络科技有限公司\"><a href=\"#吉林省网开万物网络科技有限公司\" class=\"headerlink\" title=\"吉林省网开万物网络科技有限公司\"></a>吉林省网开万物网络科技有限公司</h3><p>前端开发组-组员</p>\n<ul>\n<li>根据产品需求，设计项目并实行</li>\n<li>项目的推进及维护</li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>讲原则，有自制力，热爱前端 </li>\n<li>有良好的沟通合作能力，善于沟通</li>\n<li>热爱生活，兴趣爱好广泛打球、喝茶、盘串、钓鱼、唱歌</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"王洪德-前端工程师\"><a href=\"#王洪德-前端工程师\" class=\"headerlink\" title=\"王洪德 - 前端工程师\"></a>王洪德 - 前端工程师</h1><p>学校: 长春工业大学<br>学历: 本科<br>电话: 18811655833<br>博客: <a href=\"https://wanghongde.github.io/\" title=\"https://wanghongde.github.io/\">https://wanghongde.github.io/</a><br>Gihtub: <a href=\"https://github.com/Wanghongde\" title=\"https://github.com/Wanghongde\">https://github.com/Wanghongde</a><br>邮箱: <a href=\"mailto:18811655833@163.com\" title=\"18811655833@163.com\">18811655833@163.com</a></p>\n<h2 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h2><ul>\n<li>熟练掌握HTML5/CSS3/JS</li>\n<li>有 Vue 全家桶项目经验</li>\n<li>熟练使用 ES6/TS 编写代码</li>\n<li>熟悉组件化和模块化</li>\n<li>熟悉前端工程化</li>\n<li>熟悉Git进行团队协作</li>\n</ul>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><h3 id=\"江苏传智播客教育科技股份有限公司\"><a href=\"#江苏传智播客教育科技股份有限公司\" class=\"headerlink\" title=\"江苏传智播客教育科技股份有限公司\"></a>江苏传智播客教育科技股份有限公司</h3><p>前端教研组-讲师</p>\n<ul>\n<li>负责前端课程讲授</li>\n<li>书写完善课程大纲及课件</li>\n<li>辅助学生就业</li>\n</ul>\n<h3 id=\"吉林省网开万物网络科技有限公司\"><a href=\"#吉林省网开万物网络科技有限公司\" class=\"headerlink\" title=\"吉林省网开万物网络科技有限公司\"></a>吉林省网开万物网络科技有限公司</h3><p>前端开发组-组员</p>\n<ul>\n<li>根据产品需求，设计项目并实行</li>\n<li>项目的推进及维护</li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>讲原则，有自制力，热爱前端 </li>\n<li>有良好的沟通合作能力，善于沟通</li>\n<li>热爱生活，兴趣爱好广泛打球、喝茶、盘串、钓鱼、唱歌</li>\n</ul>\n"}],"Post":[{"title":"Flex布局","_content":"\n## Flex 的容器和项目\n\n随着主流框架的流行，人们已经渐渐抛弃了低版本浏览器了，flex 布局也成为了主流布局方式。\n\n现在的 flex布局 配合 `vw`和`vh` 也已经成为了移动端的主流布局方式, 这种移动端适配方案我们之后再聊。\n\n现在先主要聊一下flex相关内容。\n\nflex 是 `flexible box` 的缩写， 意为弹性布局，可以让我们布局页面更加灵活。\n\n任何元素都可以做为 flex元素(块元素、甚至行内元素)，采用flex布局的元素，我们可以叫他`容器`，而`容器`里的元素称为`项目`， `.box` 就是容器，`.item`就是项目。\n<!-- more -->\n\n```html\n<style>\n    .box {\n        display: flex;\n        width: 200px;\n        height: 200px;\n        border: 1px solid red;\n    }\n    .item {\n        width: 20px;\n        height: 20px;\n        background-color: aquamarine;\n        border-radius: 50%;\n    }\n</style>  \n\n<span class=\"box\">\n    <span class=\"item\"></span>\n</span>\n```\n\n## Flex 容器的属性\n\n容器默认存在两个轴线，默认水平的叫`主轴`，垂直的叫`交叉轴`也可以叫`侧轴`，当然轴线是可以修改的，项目默认沿着主轴排列。\n\nflex容器有六个属性:\n\n```\nflex-direction // 控制主轴的方向 \nflex-wrap  // 是否可以换行\njustify-content // 主轴的对齐方式\nalign-items  // 侧轴的对齐方式\nalign-contents // 主轴存在多根，才生效\n\nflex-flow: flex-direction flex-wrap // 复合属性 flex-flow:主轴方向 换行\n\n```\n\n## Flex 项目的属性\n\nflex项目也有六个属性\n\n```\norder //顺序 控制项目从左往右的排列顺序 默认是0，可以设置负数，越小越靠左\nflex-grow // 放大 控制项目 在剩余空间放大  0不放大  1放大   默认不放大 0\nflex-shrink // 缩小 控制项目在空不足缩小   0不缩小  1缩小   默认可缩小 1\nflex-basis // 分配剩余空间前 项目占据的大小 \t默认是 auto 元素本身的大小 可设置 px、%等单位\nalign-self // 设置项目本身的 侧轴对齐方式 可覆盖align-items\n\nflex: flex-grow flex-shrink flex-basis // 复合属性\n\n```\n\n## Flex 使用\n\n使用flex简单实现个圣杯布局\n\n```html\n<style>\n    body {\n        margin: 0;\n    }\n    .container {\n        display: flex;\n        min-height: 100vh;\n        flex-direction: column;\n    }\n    header{\n        background: pink;\n    }\n    footer{\n        background: #ccc;\n    }\n    .container-body-content {\n        background: chocolate;\n    }\n    .container-body-nav {\n        background: aquamarine;\n    }\n    .container-body-aside {\n        background: thistle;\n    }\n\n\n    header,\n    footer {\n        flex: 1;\n    }\n\n    .container-body {\n        display: flex;\n        align-self: center;\n        flex: 1;\n        width: 80vw;\n        min-height: 700px;\n    }\n\n    .container-body-content {\n        flex: 1;\n    }\n\n    .container-body-nav,\n    .container-body-aside {\n        flex: 0 0 12em;\n    }\n\n    .container-body-nav {\n        order: -1;\n    }\n</style>\n\n<div class=\"container\">\n    <header>头部</header>\n    <div class=\"container-body\">\n        <main class=\"container-body-content\">主要内容 我是很多内容</main>\n        <nav class=\"container-body-nav\">nav</nav>\n        <aside class=\"container-body-aside\">侧边栏</aside>\n    </div>\n    <footer>底部</footer>\n</div>\n```\n\n","source":"_posts/CSS/01-Flex布局.md","raw":"---\ntitle: Flex布局\ntags: CSS\n---\n\n## Flex 的容器和项目\n\n随着主流框架的流行，人们已经渐渐抛弃了低版本浏览器了，flex 布局也成为了主流布局方式。\n\n现在的 flex布局 配合 `vw`和`vh` 也已经成为了移动端的主流布局方式, 这种移动端适配方案我们之后再聊。\n\n现在先主要聊一下flex相关内容。\n\nflex 是 `flexible box` 的缩写， 意为弹性布局，可以让我们布局页面更加灵活。\n\n任何元素都可以做为 flex元素(块元素、甚至行内元素)，采用flex布局的元素，我们可以叫他`容器`，而`容器`里的元素称为`项目`， `.box` 就是容器，`.item`就是项目。\n<!-- more -->\n\n```html\n<style>\n    .box {\n        display: flex;\n        width: 200px;\n        height: 200px;\n        border: 1px solid red;\n    }\n    .item {\n        width: 20px;\n        height: 20px;\n        background-color: aquamarine;\n        border-radius: 50%;\n    }\n</style>  \n\n<span class=\"box\">\n    <span class=\"item\"></span>\n</span>\n```\n\n## Flex 容器的属性\n\n容器默认存在两个轴线，默认水平的叫`主轴`，垂直的叫`交叉轴`也可以叫`侧轴`，当然轴线是可以修改的，项目默认沿着主轴排列。\n\nflex容器有六个属性:\n\n```\nflex-direction // 控制主轴的方向 \nflex-wrap  // 是否可以换行\njustify-content // 主轴的对齐方式\nalign-items  // 侧轴的对齐方式\nalign-contents // 主轴存在多根，才生效\n\nflex-flow: flex-direction flex-wrap // 复合属性 flex-flow:主轴方向 换行\n\n```\n\n## Flex 项目的属性\n\nflex项目也有六个属性\n\n```\norder //顺序 控制项目从左往右的排列顺序 默认是0，可以设置负数，越小越靠左\nflex-grow // 放大 控制项目 在剩余空间放大  0不放大  1放大   默认不放大 0\nflex-shrink // 缩小 控制项目在空不足缩小   0不缩小  1缩小   默认可缩小 1\nflex-basis // 分配剩余空间前 项目占据的大小 \t默认是 auto 元素本身的大小 可设置 px、%等单位\nalign-self // 设置项目本身的 侧轴对齐方式 可覆盖align-items\n\nflex: flex-grow flex-shrink flex-basis // 复合属性\n\n```\n\n## Flex 使用\n\n使用flex简单实现个圣杯布局\n\n```html\n<style>\n    body {\n        margin: 0;\n    }\n    .container {\n        display: flex;\n        min-height: 100vh;\n        flex-direction: column;\n    }\n    header{\n        background: pink;\n    }\n    footer{\n        background: #ccc;\n    }\n    .container-body-content {\n        background: chocolate;\n    }\n    .container-body-nav {\n        background: aquamarine;\n    }\n    .container-body-aside {\n        background: thistle;\n    }\n\n\n    header,\n    footer {\n        flex: 1;\n    }\n\n    .container-body {\n        display: flex;\n        align-self: center;\n        flex: 1;\n        width: 80vw;\n        min-height: 700px;\n    }\n\n    .container-body-content {\n        flex: 1;\n    }\n\n    .container-body-nav,\n    .container-body-aside {\n        flex: 0 0 12em;\n    }\n\n    .container-body-nav {\n        order: -1;\n    }\n</style>\n\n<div class=\"container\">\n    <header>头部</header>\n    <div class=\"container-body\">\n        <main class=\"container-body-content\">主要内容 我是很多内容</main>\n        <nav class=\"container-body-nav\">nav</nav>\n        <aside class=\"container-body-aside\">侧边栏</aside>\n    </div>\n    <footer>底部</footer>\n</div>\n```\n\n","slug":"CSS/01-Flex布局","published":1,"date":"2023-03-17T13:09:00.233Z","updated":"2023-03-17T13:09:00.234Z","_id":"clf6yh1pu00018cup6qfw8xqh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Flex-的容器和项目\"><a href=\"#Flex-的容器和项目\" class=\"headerlink\" title=\"Flex 的容器和项目\"></a>Flex 的容器和项目</h2><p>随着主流框架的流行，人们已经渐渐抛弃了低版本浏览器了，flex 布局也成为了主流布局方式。</p>\n<p>现在的 flex布局 配合 <code>vw</code>和<code>vh</code> 也已经成为了移动端的主流布局方式, 这种移动端适配方案我们之后再聊。</p>\n<p>现在先主要聊一下flex相关内容。</p>\n<p>flex 是 <code>flexible box</code> 的缩写， 意为弹性布局，可以让我们布局页面更加灵活。</p>\n<p>任何元素都可以做为 flex元素(块元素、甚至行内元素)，采用flex布局的元素，我们可以叫他<code>容器</code>，而<code>容器</code>里的元素称为<code>项目</code>， <code>.box</code> 就是容器，<code>.item</code>就是项目。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: aquamarine;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-容器的属性\"><a href=\"#Flex-容器的属性\" class=\"headerlink\" title=\"Flex 容器的属性\"></a>Flex 容器的属性</h2><p>容器默认存在两个轴线，默认水平的叫<code>主轴</code>，垂直的叫<code>交叉轴</code>也可以叫<code>侧轴</code>，当然轴线是可以修改的，项目默认沿着主轴排列。</p>\n<p>flex容器有六个属性:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-direction // 控制主轴的方向 </span><br><span class=\"line\">flex-wrap  // 是否可以换行</span><br><span class=\"line\">justify-content // 主轴的对齐方式</span><br><span class=\"line\">align-items  // 侧轴的对齐方式</span><br><span class=\"line\">align-contents // 主轴存在多根，才生效</span><br><span class=\"line\"></span><br><span class=\"line\">flex-flow: flex-direction flex-wrap // 复合属性 flex-flow:主轴方向 换行</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-项目的属性\"><a href=\"#Flex-项目的属性\" class=\"headerlink\" title=\"Flex 项目的属性\"></a>Flex 项目的属性</h2><p>flex项目也有六个属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order //顺序 控制项目从左往右的排列顺序 默认是0，可以设置负数，越小越靠左</span><br><span class=\"line\">flex-grow // 放大 控制项目 在剩余空间放大  0不放大  1放大   默认不放大 0</span><br><span class=\"line\">flex-shrink // 缩小 控制项目在空不足缩小   0不缩小  1缩小   默认可缩小 1</span><br><span class=\"line\">flex-basis // 分配剩余空间前 项目占据的大小 \t默认是 auto 元素本身的大小 可设置 px、%等单位</span><br><span class=\"line\">align-self // 设置项目本身的 侧轴对齐方式 可覆盖align-items</span><br><span class=\"line\"></span><br><span class=\"line\">flex: flex-grow flex-shrink flex-basis // 复合属性</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-使用\"><a href=\"#Flex-使用\" class=\"headerlink\" title=\"Flex 使用\"></a>Flex 使用</h2><p>使用flex简单实现个圣杯布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex-direction</span>: column;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">header</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: pink;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">footer</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: chocolate;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: aquamarine;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: thistle;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">header</span>,</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">align-self</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">80vw</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">700px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span>,</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">12em</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">order</span>: -<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-content&quot;</span>&gt;</span>主要内容 我是很多内容<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-nav&quot;</span>&gt;</span>nav<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-aside&quot;</span>&gt;</span>侧边栏<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>底部<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Flex-的容器和项目\"><a href=\"#Flex-的容器和项目\" class=\"headerlink\" title=\"Flex 的容器和项目\"></a>Flex 的容器和项目</h2><p>随着主流框架的流行，人们已经渐渐抛弃了低版本浏览器了，flex 布局也成为了主流布局方式。</p>\n<p>现在的 flex布局 配合 <code>vw</code>和<code>vh</code> 也已经成为了移动端的主流布局方式, 这种移动端适配方案我们之后再聊。</p>\n<p>现在先主要聊一下flex相关内容。</p>\n<p>flex 是 <code>flexible box</code> 的缩写， 意为弹性布局，可以让我们布局页面更加灵活。</p>\n<p>任何元素都可以做为 flex元素(块元素、甚至行内元素)，采用flex布局的元素，我们可以叫他<code>容器</code>，而<code>容器</code>里的元素称为<code>项目</code>， <code>.box</code> 就是容器，<code>.item</code>就是项目。</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: aquamarine;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-容器的属性\"><a href=\"#Flex-容器的属性\" class=\"headerlink\" title=\"Flex 容器的属性\"></a>Flex 容器的属性</h2><p>容器默认存在两个轴线，默认水平的叫<code>主轴</code>，垂直的叫<code>交叉轴</code>也可以叫<code>侧轴</code>，当然轴线是可以修改的，项目默认沿着主轴排列。</p>\n<p>flex容器有六个属性:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-direction // 控制主轴的方向 </span><br><span class=\"line\">flex-wrap  // 是否可以换行</span><br><span class=\"line\">justify-content // 主轴的对齐方式</span><br><span class=\"line\">align-items  // 侧轴的对齐方式</span><br><span class=\"line\">align-contents // 主轴存在多根，才生效</span><br><span class=\"line\"></span><br><span class=\"line\">flex-flow: flex-direction flex-wrap // 复合属性 flex-flow:主轴方向 换行</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-项目的属性\"><a href=\"#Flex-项目的属性\" class=\"headerlink\" title=\"Flex 项目的属性\"></a>Flex 项目的属性</h2><p>flex项目也有六个属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order //顺序 控制项目从左往右的排列顺序 默认是0，可以设置负数，越小越靠左</span><br><span class=\"line\">flex-grow // 放大 控制项目 在剩余空间放大  0不放大  1放大   默认不放大 0</span><br><span class=\"line\">flex-shrink // 缩小 控制项目在空不足缩小   0不缩小  1缩小   默认可缩小 1</span><br><span class=\"line\">flex-basis // 分配剩余空间前 项目占据的大小 \t默认是 auto 元素本身的大小 可设置 px、%等单位</span><br><span class=\"line\">align-self // 设置项目本身的 侧轴对齐方式 可覆盖align-items</span><br><span class=\"line\"></span><br><span class=\"line\">flex: flex-grow flex-shrink flex-basis // 复合属性</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flex-使用\"><a href=\"#Flex-使用\" class=\"headerlink\" title=\"Flex 使用\"></a>Flex 使用</h2><p>使用flex简单实现个圣杯布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex-direction</span>: column;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">header</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: pink;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">footer</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: chocolate;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: aquamarine;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background</span>: thistle;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">header</span>,</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">align-self</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">80vw</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">700px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span>,</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">12em</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container-body-nav</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">order</span>: -<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-content&quot;</span>&gt;</span>主要内容 我是很多内容<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-nav&quot;</span>&gt;</span>nav<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container-body-aside&quot;</span>&gt;</span>侧边栏<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>底部<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Grid布局","_content":"\nGrid布局既网格布局，是一种新的 CSS 的布局模式，是比较强大的布局方式。\n\nFlex布局也就是弹性布局很好用，但是只能解决`一维布局`，也就是一行或者一列进行布局。\n\nGrid布局则是网格布局，可以解决`二维布局`，也就是由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列 。\n\n那在布局的时候，我们能用Flex布局就是用Flex布局解决，解决不了则使用 Grid布局。\n\n<!--more-->\n\nGrid布局属性可以分为两大类\n\n- 容器属性\n  - display: grid / inline-grid\n  - grid-template-rows:  显式网格分几行  分别是多高\n  - grid-template-columns:  显式网格分几列  分别是多宽\n  - grid-rows-gap / grid-columns-gap / grid-gap: 网格的间隙大小\n  - justify-item / align-item / place-item: 项目相对单元格 水平/垂直的 位置\n  - justify-content / align-content / place-content: 整个项目块在容器的 水平/垂直的位置\n  - grid-auto-flow: 网格的排列顺序 默认是row既 `先行后列`, 也可以改成column既`先列后行`\n  - grid-auto-rows: 隐式网格的高\n  - grid-auto-columns： 隐式网格的宽 \n  - grid-template-areas: 定义区域，一个区域由一个或者多个单元格组成\n- 项目属性\n  -  gird-area: 指定项目放在哪一个区域，需要与容器的 grid-template-areas搭配\n  - justify-self：指定单个项目 相对单元格 水平 的位置\n  - align-self： 指定单个项目 相对单元格垂直的位置\n  - place-self:  指定单个项目对象单元格 水平/垂直的位置\n  - grid-column-start：左边框所在的垂直网格线\n  - grid-column-end：右边框所在的垂直网格线\n  - grid-row-start：上边框所在的水平网格线\n  - grid-row-end：下边框所在的水平网格线","source":"_posts/CSS/03-Grid布局.md","raw":"---\ntitle: Grid布局\ntags: CSS\n---\n\nGrid布局既网格布局，是一种新的 CSS 的布局模式，是比较强大的布局方式。\n\nFlex布局也就是弹性布局很好用，但是只能解决`一维布局`，也就是一行或者一列进行布局。\n\nGrid布局则是网格布局，可以解决`二维布局`，也就是由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列 。\n\n那在布局的时候，我们能用Flex布局就是用Flex布局解决，解决不了则使用 Grid布局。\n\n<!--more-->\n\nGrid布局属性可以分为两大类\n\n- 容器属性\n  - display: grid / inline-grid\n  - grid-template-rows:  显式网格分几行  分别是多高\n  - grid-template-columns:  显式网格分几列  分别是多宽\n  - grid-rows-gap / grid-columns-gap / grid-gap: 网格的间隙大小\n  - justify-item / align-item / place-item: 项目相对单元格 水平/垂直的 位置\n  - justify-content / align-content / place-content: 整个项目块在容器的 水平/垂直的位置\n  - grid-auto-flow: 网格的排列顺序 默认是row既 `先行后列`, 也可以改成column既`先列后行`\n  - grid-auto-rows: 隐式网格的高\n  - grid-auto-columns： 隐式网格的宽 \n  - grid-template-areas: 定义区域，一个区域由一个或者多个单元格组成\n- 项目属性\n  -  gird-area: 指定项目放在哪一个区域，需要与容器的 grid-template-areas搭配\n  - justify-self：指定单个项目 相对单元格 水平 的位置\n  - align-self： 指定单个项目 相对单元格垂直的位置\n  - place-self:  指定单个项目对象单元格 水平/垂直的位置\n  - grid-column-start：左边框所在的垂直网格线\n  - grid-column-end：右边框所在的垂直网格线\n  - grid-row-start：上边框所在的水平网格线\n  - grid-row-end：下边框所在的水平网格线","slug":"CSS/03-Grid布局","published":1,"date":"2023-03-17T13:09:00.234Z","updated":"2023-03-17T13:09:00.234Z","_id":"clf6yh1py00028cup0vxk724h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Grid布局既网格布局，是一种新的 CSS 的布局模式，是比较强大的布局方式。</p>\n<p>Flex布局也就是弹性布局很好用，但是只能解决<code>一维布局</code>，也就是一行或者一列进行布局。</p>\n<p>Grid布局则是网格布局，可以解决<code>二维布局</code>，也就是由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列 。</p>\n<p>那在布局的时候，我们能用Flex布局就是用Flex布局解决，解决不了则使用 Grid布局。</p>\n<span id=\"more\"></span>\n\n<p>Grid布局属性可以分为两大类</p>\n<ul>\n<li>容器属性<ul>\n<li>display: grid / inline-grid</li>\n<li>grid-template-rows:  显式网格分几行  分别是多高</li>\n<li>grid-template-columns:  显式网格分几列  分别是多宽</li>\n<li>grid-rows-gap / grid-columns-gap / grid-gap: 网格的间隙大小</li>\n<li>justify-item / align-item / place-item: 项目相对单元格 水平/垂直的 位置</li>\n<li>justify-content / align-content / place-content: 整个项目块在容器的 水平/垂直的位置</li>\n<li>grid-auto-flow: 网格的排列顺序 默认是row既 <code>先行后列</code>, 也可以改成column既<code>先列后行</code></li>\n<li>grid-auto-rows: 隐式网格的高</li>\n<li>grid-auto-columns： 隐式网格的宽 </li>\n<li>grid-template-areas: 定义区域，一个区域由一个或者多个单元格组成</li>\n</ul>\n</li>\n<li>项目属性<ul>\n<li> gird-area: 指定项目放在哪一个区域，需要与容器的 grid-template-areas搭配</li>\n<li>justify-self：指定单个项目 相对单元格 水平 的位置</li>\n<li>align-self： 指定单个项目 相对单元格垂直的位置</li>\n<li>place-self:  指定单个项目对象单元格 水平/垂直的位置</li>\n<li>grid-column-start：左边框所在的垂直网格线</li>\n<li>grid-column-end：右边框所在的垂直网格线</li>\n<li>grid-row-start：上边框所在的水平网格线</li>\n<li>grid-row-end：下边框所在的水平网格线</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Grid布局既网格布局，是一种新的 CSS 的布局模式，是比较强大的布局方式。</p>\n<p>Flex布局也就是弹性布局很好用，但是只能解决<code>一维布局</code>，也就是一行或者一列进行布局。</p>\n<p>Grid布局则是网格布局，可以解决<code>二维布局</code>，也就是由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列 。</p>\n<p>那在布局的时候，我们能用Flex布局就是用Flex布局解决，解决不了则使用 Grid布局。</p>","more":"<p>Grid布局属性可以分为两大类</p>\n<ul>\n<li>容器属性<ul>\n<li>display: grid / inline-grid</li>\n<li>grid-template-rows:  显式网格分几行  分别是多高</li>\n<li>grid-template-columns:  显式网格分几列  分别是多宽</li>\n<li>grid-rows-gap / grid-columns-gap / grid-gap: 网格的间隙大小</li>\n<li>justify-item / align-item / place-item: 项目相对单元格 水平/垂直的 位置</li>\n<li>justify-content / align-content / place-content: 整个项目块在容器的 水平/垂直的位置</li>\n<li>grid-auto-flow: 网格的排列顺序 默认是row既 <code>先行后列</code>, 也可以改成column既<code>先列后行</code></li>\n<li>grid-auto-rows: 隐式网格的高</li>\n<li>grid-auto-columns： 隐式网格的宽 </li>\n<li>grid-template-areas: 定义区域，一个区域由一个或者多个单元格组成</li>\n</ul>\n</li>\n<li>项目属性<ul>\n<li> gird-area: 指定项目放在哪一个区域，需要与容器的 grid-template-areas搭配</li>\n<li>justify-self：指定单个项目 相对单元格 水平 的位置</li>\n<li>align-self： 指定单个项目 相对单元格垂直的位置</li>\n<li>place-self:  指定单个项目对象单元格 水平/垂直的位置</li>\n<li>grid-column-start：左边框所在的垂直网格线</li>\n<li>grid-column-end：右边框所在的垂直网格线</li>\n<li>grid-row-start：上边框所在的水平网格线</li>\n<li>grid-row-end：下边框所在的水平网格线</li>\n</ul>\n</li>\n</ul>"},{"title":"浅析BFC","_content":"\nCSS中有一个比较重要的概念 BFC，搞懂BFC可以是我们书写样式更加从容。\n\nBFC(block formatting context)直译过来就是 块级格式化上下问，简单来说就是，BFC 是一个独立的空间(布局环境)， 让空间里的子元素不会影响外面的布局。\n\n> BFC 可以想象成孙悟空金箍棒画的圈，圈里面的师傅自己玩自己的，不被外部影响，也不会影响外部\n\n<!--more-->\n\n将处于 BFC 区域内 和区域外 的元素进行互相隔离。 \n\n那怎么挥舞金箍棒画圈呢，不对，怎么使用 BFC 呢 ?\n\n其实可以把 BFC 也理解成CSS元素属性, 有自己的一套规则，比如`box-sizing`这个属性就可以开启怪异盒模型、标准盒模型\n\n\n\nBFC 也会有自己的规则:\n\n- BFC盒子就是页面中一个独立的容器，容器里的标签不会影响外部标签\n- 计算开启BFC 的盒子高度时，浮动子元素也参与计算\n- 同一个 BFC 的两个相邻的盒子 margin会发生折叠，不同 BFC则不会发生折叠\n- 开启BFC的盒子不会和 `float`的元素区域重叠\n\n那到底何时会形成BFC: \n\n- 浮动元素 float  值**不是** `none`  √\n- overflow  值**不是** `auto` √\n- 定位元素  值**是** `absolute`、`fixed` √\n- display     值是 `flex` 、`grid`、`inline-block`等  √\n- 根标签 `HTML`标签\n\n\n\nBFC  有哪些应用呢：\n\n- 清除浮动\n- 防止margin重叠","source":"_posts/CSS/02-浅析BFC.md","raw":"---\ntitle: 浅析BFC\ntags: CSS\n---\n\nCSS中有一个比较重要的概念 BFC，搞懂BFC可以是我们书写样式更加从容。\n\nBFC(block formatting context)直译过来就是 块级格式化上下问，简单来说就是，BFC 是一个独立的空间(布局环境)， 让空间里的子元素不会影响外面的布局。\n\n> BFC 可以想象成孙悟空金箍棒画的圈，圈里面的师傅自己玩自己的，不被外部影响，也不会影响外部\n\n<!--more-->\n\n将处于 BFC 区域内 和区域外 的元素进行互相隔离。 \n\n那怎么挥舞金箍棒画圈呢，不对，怎么使用 BFC 呢 ?\n\n其实可以把 BFC 也理解成CSS元素属性, 有自己的一套规则，比如`box-sizing`这个属性就可以开启怪异盒模型、标准盒模型\n\n\n\nBFC 也会有自己的规则:\n\n- BFC盒子就是页面中一个独立的容器，容器里的标签不会影响外部标签\n- 计算开启BFC 的盒子高度时，浮动子元素也参与计算\n- 同一个 BFC 的两个相邻的盒子 margin会发生折叠，不同 BFC则不会发生折叠\n- 开启BFC的盒子不会和 `float`的元素区域重叠\n\n那到底何时会形成BFC: \n\n- 浮动元素 float  值**不是** `none`  √\n- overflow  值**不是** `auto` √\n- 定位元素  值**是** `absolute`、`fixed` √\n- display     值是 `flex` 、`grid`、`inline-block`等  √\n- 根标签 `HTML`标签\n\n\n\nBFC  有哪些应用呢：\n\n- 清除浮动\n- 防止margin重叠","slug":"CSS/02-浅析BFC","published":1,"date":"2023-03-17T13:09:00.234Z","updated":"2023-03-17T13:09:00.234Z","_id":"clf6yh1q100048cup8um27ydy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>CSS中有一个比较重要的概念 BFC，搞懂BFC可以是我们书写样式更加从容。</p>\n<p>BFC(block formatting context)直译过来就是 块级格式化上下问，简单来说就是，BFC 是一个独立的空间(布局环境)， 让空间里的子元素不会影响外面的布局。</p>\n<blockquote>\n<p>BFC 可以想象成孙悟空金箍棒画的圈，圈里面的师傅自己玩自己的，不被外部影响，也不会影响外部</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>将处于 BFC 区域内 和区域外 的元素进行互相隔离。 </p>\n<p>那怎么挥舞金箍棒画圈呢，不对，怎么使用 BFC 呢 ?</p>\n<p>其实可以把 BFC 也理解成CSS元素属性, 有自己的一套规则，比如<code>box-sizing</code>这个属性就可以开启怪异盒模型、标准盒模型</p>\n<p>BFC 也会有自己的规则:</p>\n<ul>\n<li>BFC盒子就是页面中一个独立的容器，容器里的标签不会影响外部标签</li>\n<li>计算开启BFC 的盒子高度时，浮动子元素也参与计算</li>\n<li>同一个 BFC 的两个相邻的盒子 margin会发生折叠，不同 BFC则不会发生折叠</li>\n<li>开启BFC的盒子不会和 <code>float</code>的元素区域重叠</li>\n</ul>\n<p>那到底何时会形成BFC: </p>\n<ul>\n<li>浮动元素 float  值<strong>不是</strong> <code>none</code>  √</li>\n<li>overflow  值<strong>不是</strong> <code>auto</code> √</li>\n<li>定位元素  值<strong>是</strong> <code>absolute</code>、<code>fixed</code> √</li>\n<li>display     值是 <code>flex</code> 、<code>grid</code>、<code>inline-block</code>等  √</li>\n<li>根标签 <code>HTML</code>标签</li>\n</ul>\n<p>BFC  有哪些应用呢：</p>\n<ul>\n<li>清除浮动</li>\n<li>防止margin重叠</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>CSS中有一个比较重要的概念 BFC，搞懂BFC可以是我们书写样式更加从容。</p>\n<p>BFC(block formatting context)直译过来就是 块级格式化上下问，简单来说就是，BFC 是一个独立的空间(布局环境)， 让空间里的子元素不会影响外面的布局。</p>\n<blockquote>\n<p>BFC 可以想象成孙悟空金箍棒画的圈，圈里面的师傅自己玩自己的，不被外部影响，也不会影响外部</p>\n</blockquote>","more":"<p>将处于 BFC 区域内 和区域外 的元素进行互相隔离。 </p>\n<p>那怎么挥舞金箍棒画圈呢，不对，怎么使用 BFC 呢 ?</p>\n<p>其实可以把 BFC 也理解成CSS元素属性, 有自己的一套规则，比如<code>box-sizing</code>这个属性就可以开启怪异盒模型、标准盒模型</p>\n<p>BFC 也会有自己的规则:</p>\n<ul>\n<li>BFC盒子就是页面中一个独立的容器，容器里的标签不会影响外部标签</li>\n<li>计算开启BFC 的盒子高度时，浮动子元素也参与计算</li>\n<li>同一个 BFC 的两个相邻的盒子 margin会发生折叠，不同 BFC则不会发生折叠</li>\n<li>开启BFC的盒子不会和 <code>float</code>的元素区域重叠</li>\n</ul>\n<p>那到底何时会形成BFC: </p>\n<ul>\n<li>浮动元素 float  值<strong>不是</strong> <code>none</code>  √</li>\n<li>overflow  值<strong>不是</strong> <code>auto</code> √</li>\n<li>定位元素  值<strong>是</strong> <code>absolute</code>、<code>fixed</code> √</li>\n<li>display     值是 <code>flex</code> 、<code>grid</code>、<code>inline-block</code>等  √</li>\n<li>根标签 <code>HTML</code>标签</li>\n</ul>\n<p>BFC  有哪些应用呢：</p>\n<ul>\n<li>清除浮动</li>\n<li>防止margin重叠</li>\n</ul>"},{"title":"重绘重排","_content":"\n浏览器打开页面，在页面生成的时候，至少需要一次初始化渲染,也就是至少发生一次`重绘`和`重排`，用户访问页面的过程中还会不断的触发`重绘`和`重排`。\n\n不管是发生了`重绘`还是`重排`,都会影响性能，最可怕的是`重排`，它会让部分甚至整个渲染树重新分析，让元素的尺寸计算，重新排列元素。\n\n`重绘`的代价要小一些，表现为元素的外观被改变，比如文字颜色，背景颜色等。\n\n> 重排一定会导致重绘，重绘不一定出现重排\n\n<!-- more -->\n\n那到底重排什么时候会触发呢？\n\n- 添加或删除可见的 DOM元素\n- 元素位置改变\n- 元素尺寸改变，`边距`、`边框`、`宽高`等\n- 元素内容改变， 文本改变或者图片大小改变\n- 页面初始化渲染\n- 修改浏览器窗口尺寸\n\n那我们可以优化重排，减少重绘重排的次数\n\n1. 浏览器自动就会有一个维护的队列，把会引起重绘重排的操作放入1队列中，等队列中的操作到一定数量或者到一定的时间间隔，就会自动处理\n\n \t2. 集中的修改样式，比如设置类名，这样可以尽可能利用浏览器优化机制，一次重绘重排就完成渲染\n \t3. 利用 `transform` 实现动画效果，不需要进行布局绘制和样式计算等操作，不会影响到其他盒子，只触发自己的重绘\n \t4. 使用文档碎片， `createDocumentFragment` 操作的节点是在内存里处理，并不会更新页面，等处理完成在创建到页面，`Vue`的渲染就是使用的文档碎片","source":"_posts/CSS/04-重绘重排.md","raw":"---\ntitle: 重绘重排\ntags: CSS\n---\n\n浏览器打开页面，在页面生成的时候，至少需要一次初始化渲染,也就是至少发生一次`重绘`和`重排`，用户访问页面的过程中还会不断的触发`重绘`和`重排`。\n\n不管是发生了`重绘`还是`重排`,都会影响性能，最可怕的是`重排`，它会让部分甚至整个渲染树重新分析，让元素的尺寸计算，重新排列元素。\n\n`重绘`的代价要小一些，表现为元素的外观被改变，比如文字颜色，背景颜色等。\n\n> 重排一定会导致重绘，重绘不一定出现重排\n\n<!-- more -->\n\n那到底重排什么时候会触发呢？\n\n- 添加或删除可见的 DOM元素\n- 元素位置改变\n- 元素尺寸改变，`边距`、`边框`、`宽高`等\n- 元素内容改变， 文本改变或者图片大小改变\n- 页面初始化渲染\n- 修改浏览器窗口尺寸\n\n那我们可以优化重排，减少重绘重排的次数\n\n1. 浏览器自动就会有一个维护的队列，把会引起重绘重排的操作放入1队列中，等队列中的操作到一定数量或者到一定的时间间隔，就会自动处理\n\n \t2. 集中的修改样式，比如设置类名，这样可以尽可能利用浏览器优化机制，一次重绘重排就完成渲染\n \t3. 利用 `transform` 实现动画效果，不需要进行布局绘制和样式计算等操作，不会影响到其他盒子，只触发自己的重绘\n \t4. 使用文档碎片， `createDocumentFragment` 操作的节点是在内存里处理，并不会更新页面，等处理完成在创建到页面，`Vue`的渲染就是使用的文档碎片","slug":"CSS/04-重绘重排","published":1,"date":"2023-03-17T13:09:00.234Z","updated":"2023-03-17T13:09:00.234Z","_id":"clf6yh1q300058cupafgy93oz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>浏览器打开页面，在页面生成的时候，至少需要一次初始化渲染,也就是至少发生一次<code>重绘</code>和<code>重排</code>，用户访问页面的过程中还会不断的触发<code>重绘</code>和<code>重排</code>。</p>\n<p>不管是发生了<code>重绘</code>还是<code>重排</code>,都会影响性能，最可怕的是<code>重排</code>，它会让部分甚至整个渲染树重新分析，让元素的尺寸计算，重新排列元素。</p>\n<p><code>重绘</code>的代价要小一些，表现为元素的外观被改变，比如文字颜色，背景颜色等。</p>\n<blockquote>\n<p>重排一定会导致重绘，重绘不一定出现重排</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>那到底重排什么时候会触发呢？</p>\n<ul>\n<li>添加或删除可见的 DOM元素</li>\n<li>元素位置改变</li>\n<li>元素尺寸改变，<code>边距</code>、<code>边框</code>、<code>宽高</code>等</li>\n<li>元素内容改变， 文本改变或者图片大小改变</li>\n<li>页面初始化渲染</li>\n<li>修改浏览器窗口尺寸</li>\n</ul>\n<p>那我们可以优化重排，减少重绘重排的次数</p>\n<ol>\n<li><p>浏览器自动就会有一个维护的队列，把会引起重绘重排的操作放入1队列中，等队列中的操作到一定数量或者到一定的时间间隔，就会自动处理</p>\n<ol start=\"2\">\n<li>集中的修改样式，比如设置类名，这样可以尽可能利用浏览器优化机制，一次重绘重排就完成渲染</li>\n<li>利用 <code>transform</code> 实现动画效果，不需要进行布局绘制和样式计算等操作，不会影响到其他盒子，只触发自己的重绘</li>\n<li>使用文档碎片， <code>createDocumentFragment</code> 操作的节点是在内存里处理，并不会更新页面，等处理完成在创建到页面，<code>Vue</code>的渲染就是使用的文档碎片</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>浏览器打开页面，在页面生成的时候，至少需要一次初始化渲染,也就是至少发生一次<code>重绘</code>和<code>重排</code>，用户访问页面的过程中还会不断的触发<code>重绘</code>和<code>重排</code>。</p>\n<p>不管是发生了<code>重绘</code>还是<code>重排</code>,都会影响性能，最可怕的是<code>重排</code>，它会让部分甚至整个渲染树重新分析，让元素的尺寸计算，重新排列元素。</p>\n<p><code>重绘</code>的代价要小一些，表现为元素的外观被改变，比如文字颜色，背景颜色等。</p>\n<blockquote>\n<p>重排一定会导致重绘，重绘不一定出现重排</p>\n</blockquote>","more":"<p>那到底重排什么时候会触发呢？</p>\n<ul>\n<li>添加或删除可见的 DOM元素</li>\n<li>元素位置改变</li>\n<li>元素尺寸改变，<code>边距</code>、<code>边框</code>、<code>宽高</code>等</li>\n<li>元素内容改变， 文本改变或者图片大小改变</li>\n<li>页面初始化渲染</li>\n<li>修改浏览器窗口尺寸</li>\n</ul>\n<p>那我们可以优化重排，减少重绘重排的次数</p>\n<ol>\n<li><p>浏览器自动就会有一个维护的队列，把会引起重绘重排的操作放入1队列中，等队列中的操作到一定数量或者到一定的时间间隔，就会自动处理</p>\n<ol start=\"2\">\n<li>集中的修改样式，比如设置类名，这样可以尽可能利用浏览器优化机制，一次重绘重排就完成渲染</li>\n<li>利用 <code>transform</code> 实现动画效果，不需要进行布局绘制和样式计算等操作，不会影响到其他盒子，只触发自己的重绘</li>\n<li>使用文档碎片， <code>createDocumentFragment</code> 操作的节点是在内存里处理，并不会更新页面，等处理完成在创建到页面，<code>Vue</code>的渲染就是使用的文档碎片</li>\n</ol>\n</li>\n</ol>"},{"title":"手写 axios","_content":"\n`axios` 是当前比较流行的发请求的一个第三方库，`axios` 支持浏览器和node端，支持 promise语法，有丰富的配置项`拦截器`，那我们来一起边使用`axios`，边手动写一下`axios`的方法吧。\n\n<!-- more -->\n\n```js\nimport axios from 'axios'\n\n// 请求方式 1\naxios({\n    method: 'GET',\n    url: 'http://ajax-api.itheima.net/api/settings'\n}).then(res => console.log(res))\n\n// 请求方式 2\naxios.get('http://ajax-api.itheima.net/api/settings').then(res => console.log(res))\n```\n\n我们发现 `axios`发起请求有两种方式，我们来简单实现下\n\n```js\nclass MyAxios {\n  request(config) {\n    // 这里真正发起请求,并且使用 Promise封装就好了\n    return new Promise((resolve, reject) => {\n      const {method = 'GET', url = '', data = {}} = config\n\n      let xhr = new XMLHttpRequest()\n      xhr.open(method, url)\n      xhr.send(data)\n\n      xhr.onreadystatechange = function() {\n        if(xhr.readyState === 4 && xhr.status === 200) {\n          resolve({\n            status: 200,\n            data: JSON.parse(xhr.responseText),\n            statusText: 'OK'\n          })\n        }\n      }\n    })\n  }\n}\n\n\nfunction createMyAxios (){\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n  \n  return request\n}\n\nconst myaxios = createMyAxios()\n// 已经实现了axios方式一\nmyaxios({\n  method: 'GET',\n  url: 'http://ajax-api.itheima.net/api/settings'\n}).then(res => console.log(res))\n```\n\n`myaxios` 已经能够直接调用发起请求了。\n\n那么方式二怎么解决呢，并且除了`get`,还有其他比如`post`、`delete`等请求，我们可以把请求方法收集成一个数组，然后循环遍历依次创建请求就好。\n\n```js\nlet methodList = ['get', 'delete', 'head', 'options', 'put', 'post', 'patch']\n\nmethodList.forEach(method => {\n  MyAxios.prototype[method] = function(...arg) {\n    if(['get','delete','head','options'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0]\n      })\n    } else if(['put', 'post', 'patch'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0],\n        data: arg[1]\n      })\n    }\n  }\n})\n```\n\n我们已经给 MyAxios的原型对象挂载好方法了， 但是我们导出的`request` 是没有这些方法的，所以有必要把原型对象下的方法，复制到`request`里，所以我们封装一个方法。\n\n```js\nfunction extendFn(target, source, context) {\n  for(let key in source) {\n    if(source.hasOwnProperty(key)) {\n      if(typeof source[key] === 'function') {\n        // 这里注意, 函数可能有this不能直接赋值\n        // 所以把当前上下文环境 绑定过来\n        target[key] = source[key].bind(context)\n      } else {\n        target[key] = source[key]\n      }\n    }\n  }\n}\n```\n\n函数封装好了，我们调用函数，把原型对象下的方法，复制到`request`函数对象里\n\n```js\nfunction createMyAxios() {\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n\n  // 原型对象方法 复制到 request函数对象中\n  extendFn(request, MyAxios.prototype, myaxios)\n  \n  return request\n}\n```\n\n这样，我们终于可以用第二种方式发请求了, 完整代码如下\n\n```js\nclass MyAxios {\n  request(config) {\n    // 这里真正发起请求,并且使用 Promise封装就好了\n    return new Promise((resolve, reject) => {\n    \n      const {method = 'GET', url = '', data = {}} = config\n\n      let xhr = new XMLHttpRequest()\n      xhr.open(method, url)\n      xhr.send(data)\n\n      xhr.onreadystatechange = function() {\n        if(xhr.readyState === 4 && xhr.status === 200) {\n          resolve({\n            status: 200,\n            data: JSON.parse(xhr.responseText),\n            statusText: 'OK'\n          })\n        }\n      }\n    })\n  }\n}\n\nlet methodList = ['get', 'delete', 'head', 'options', 'put', 'post', 'patch']\n\nmethodList.forEach(method => {\n  MyAxios.prototype[method] = function(...arg) {\n    if(['get','delete','head','options'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0]\n      })\n    } else if(['put', 'post', 'patch'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0],\n        data: arg[1]\n      })\n    }\n  }\n})\n\nfunction extendFn(target, source, context) {\n  for(let key in source) {\n    if(source.hasOwnProperty(key)) {\n      if(typeof source[key] === 'function') {\n        // 这里注意, 函数可能有this不能直接赋值\n        // 所以把当前上下文环境 绑定过来\n        target[key] = source[key].bind(context)\n      } else {\n        target[key] = source[key]\n      }\n    }\n  }\n}\n\nfunction createMyAxios() {\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n\n  extendFn(request, MyAxios.prototype, myaxios)\n  \n  return request\n}\n\nconst myaxios = createMyAxios()\n\nmyaxios.get('http://ajax-api.itheima.net/api/settings').then(res => console.log(res))\n\n```\n\n\n\n","source":"_posts/JS/02-手写axios.md","raw":"---\ntitle: 手写 axios\ntags: JS\n---\n\n`axios` 是当前比较流行的发请求的一个第三方库，`axios` 支持浏览器和node端，支持 promise语法，有丰富的配置项`拦截器`，那我们来一起边使用`axios`，边手动写一下`axios`的方法吧。\n\n<!-- more -->\n\n```js\nimport axios from 'axios'\n\n// 请求方式 1\naxios({\n    method: 'GET',\n    url: 'http://ajax-api.itheima.net/api/settings'\n}).then(res => console.log(res))\n\n// 请求方式 2\naxios.get('http://ajax-api.itheima.net/api/settings').then(res => console.log(res))\n```\n\n我们发现 `axios`发起请求有两种方式，我们来简单实现下\n\n```js\nclass MyAxios {\n  request(config) {\n    // 这里真正发起请求,并且使用 Promise封装就好了\n    return new Promise((resolve, reject) => {\n      const {method = 'GET', url = '', data = {}} = config\n\n      let xhr = new XMLHttpRequest()\n      xhr.open(method, url)\n      xhr.send(data)\n\n      xhr.onreadystatechange = function() {\n        if(xhr.readyState === 4 && xhr.status === 200) {\n          resolve({\n            status: 200,\n            data: JSON.parse(xhr.responseText),\n            statusText: 'OK'\n          })\n        }\n      }\n    })\n  }\n}\n\n\nfunction createMyAxios (){\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n  \n  return request\n}\n\nconst myaxios = createMyAxios()\n// 已经实现了axios方式一\nmyaxios({\n  method: 'GET',\n  url: 'http://ajax-api.itheima.net/api/settings'\n}).then(res => console.log(res))\n```\n\n`myaxios` 已经能够直接调用发起请求了。\n\n那么方式二怎么解决呢，并且除了`get`,还有其他比如`post`、`delete`等请求，我们可以把请求方法收集成一个数组，然后循环遍历依次创建请求就好。\n\n```js\nlet methodList = ['get', 'delete', 'head', 'options', 'put', 'post', 'patch']\n\nmethodList.forEach(method => {\n  MyAxios.prototype[method] = function(...arg) {\n    if(['get','delete','head','options'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0]\n      })\n    } else if(['put', 'post', 'patch'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0],\n        data: arg[1]\n      })\n    }\n  }\n})\n```\n\n我们已经给 MyAxios的原型对象挂载好方法了， 但是我们导出的`request` 是没有这些方法的，所以有必要把原型对象下的方法，复制到`request`里，所以我们封装一个方法。\n\n```js\nfunction extendFn(target, source, context) {\n  for(let key in source) {\n    if(source.hasOwnProperty(key)) {\n      if(typeof source[key] === 'function') {\n        // 这里注意, 函数可能有this不能直接赋值\n        // 所以把当前上下文环境 绑定过来\n        target[key] = source[key].bind(context)\n      } else {\n        target[key] = source[key]\n      }\n    }\n  }\n}\n```\n\n函数封装好了，我们调用函数，把原型对象下的方法，复制到`request`函数对象里\n\n```js\nfunction createMyAxios() {\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n\n  // 原型对象方法 复制到 request函数对象中\n  extendFn(request, MyAxios.prototype, myaxios)\n  \n  return request\n}\n```\n\n这样，我们终于可以用第二种方式发请求了, 完整代码如下\n\n```js\nclass MyAxios {\n  request(config) {\n    // 这里真正发起请求,并且使用 Promise封装就好了\n    return new Promise((resolve, reject) => {\n    \n      const {method = 'GET', url = '', data = {}} = config\n\n      let xhr = new XMLHttpRequest()\n      xhr.open(method, url)\n      xhr.send(data)\n\n      xhr.onreadystatechange = function() {\n        if(xhr.readyState === 4 && xhr.status === 200) {\n          resolve({\n            status: 200,\n            data: JSON.parse(xhr.responseText),\n            statusText: 'OK'\n          })\n        }\n      }\n    })\n  }\n}\n\nlet methodList = ['get', 'delete', 'head', 'options', 'put', 'post', 'patch']\n\nmethodList.forEach(method => {\n  MyAxios.prototype[method] = function(...arg) {\n    if(['get','delete','head','options'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0]\n      })\n    } else if(['put', 'post', 'patch'].includes(method)) {\n      return this.request({\n        method: method,\n        url: arg[0],\n        data: arg[1]\n      })\n    }\n  }\n})\n\nfunction extendFn(target, source, context) {\n  for(let key in source) {\n    if(source.hasOwnProperty(key)) {\n      if(typeof source[key] === 'function') {\n        // 这里注意, 函数可能有this不能直接赋值\n        // 所以把当前上下文环境 绑定过来\n        target[key] = source[key].bind(context)\n      } else {\n        target[key] = source[key]\n      }\n    }\n  }\n}\n\nfunction createMyAxios() {\n  let myaxios = new MyAxios()\n\n  let request = myaxios.request.bind(myaxios)\n\n  extendFn(request, MyAxios.prototype, myaxios)\n  \n  return request\n}\n\nconst myaxios = createMyAxios()\n\nmyaxios.get('http://ajax-api.itheima.net/api/settings').then(res => console.log(res))\n\n```\n\n\n\n","slug":"JS/02-手写axios","published":1,"date":"2023-03-17T13:09:00.234Z","updated":"2023-03-17T13:09:00.235Z","_id":"clf6yh1q300068cup6yns36dg","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>axios</code> 是当前比较流行的发请求的一个第三方库，<code>axios</code> 支持浏览器和node端，支持 promise语法，有丰富的配置项<code>拦截器</code>，那我们来一起边使用<code>axios</code>，边手动写一下<code>axios</code>的方法吧。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求方式 1</span></span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求方式 2</span></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p>我们发现 <code>axios</code>发起请求有两种方式，我们来简单实现下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAxios</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">request</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里真正发起请求,并且使用 Promise封装就好了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;method = <span class=\"string\">&#x27;GET&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>, data = &#123;&#125;&#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(method, url)</span><br><span class=\"line\">      xhr.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>),</span><br><span class=\"line\">            <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;OK&#x27;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span> ()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myaxios = <span class=\"title function_\">createMyAxios</span>()</span><br><span class=\"line\"><span class=\"comment\">// 已经实现了axios方式一</span></span><br><span class=\"line\"><span class=\"title function_\">myaxios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p><code>myaxios</code> 已经能够直接调用发起请求了。</p>\n<p>那么方式二怎么解决呢，并且除了<code>get</code>,还有其他比如<code>post</code>、<code>delete</code>等请求，我们可以把请求方法收集成一个数组，然后循环遍历依次创建请求就好。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> methodList = [<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;options&#x27;</span>, <span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[method] = <span class=\"keyword\">function</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;delete&#x27;</span>,<span class=\"string\">&#x27;head&#x27;</span>,<span class=\"string\">&#x27;options&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"attr\">data</span>: arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们已经给 MyAxios的原型对象挂载好方法了， 但是我们导出的<code>request</code> 是没有这些方法的，所以有必要把原型对象下的方法，复制到<code>request</code>里，所以我们封装一个方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extendFn</span>(<span class=\"params\">target, source, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里注意, 函数可能有this不能直接赋值</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以把当前上下文环境 绑定过来</span></span><br><span class=\"line\">        target[key] = source[key].<span class=\"title function_\">bind</span>(context)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        target[key] = source[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数封装好了，我们调用函数，把原型对象下的方法，复制到<code>request</code>函数对象里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 原型对象方法 复制到 request函数对象中</span></span><br><span class=\"line\">  <span class=\"title function_\">extendFn</span>(request, <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们终于可以用第二种方式发请求了, 完整代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAxios</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">request</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里真正发起请求,并且使用 Promise封装就好了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;method = <span class=\"string\">&#x27;GET&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>, data = &#123;&#125;&#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(method, url)</span><br><span class=\"line\">      xhr.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>),</span><br><span class=\"line\">            <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;OK&#x27;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> methodList = [<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;options&#x27;</span>, <span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[method] = <span class=\"keyword\">function</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;delete&#x27;</span>,<span class=\"string\">&#x27;head&#x27;</span>,<span class=\"string\">&#x27;options&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"attr\">data</span>: arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extendFn</span>(<span class=\"params\">target, source, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里注意, 函数可能有this不能直接赋值</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以把当前上下文环境 绑定过来</span></span><br><span class=\"line\">        target[key] = source[key].<span class=\"title function_\">bind</span>(context)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        target[key] = source[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">extendFn</span>(request, <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myaxios = <span class=\"title function_\">createMyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">myaxios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p><code>axios</code> 是当前比较流行的发请求的一个第三方库，<code>axios</code> 支持浏览器和node端，支持 promise语法，有丰富的配置项<code>拦截器</code>，那我们来一起边使用<code>axios</code>，边手动写一下<code>axios</code>的方法吧。</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求方式 1</span></span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求方式 2</span></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p>我们发现 <code>axios</code>发起请求有两种方式，我们来简单实现下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAxios</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">request</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里真正发起请求,并且使用 Promise封装就好了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;method = <span class=\"string\">&#x27;GET&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>, data = &#123;&#125;&#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(method, url)</span><br><span class=\"line\">      xhr.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>),</span><br><span class=\"line\">            <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;OK&#x27;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span> ()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myaxios = <span class=\"title function_\">createMyAxios</span>()</span><br><span class=\"line\"><span class=\"comment\">// 已经实现了axios方式一</span></span><br><span class=\"line\"><span class=\"title function_\">myaxios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p><code>myaxios</code> 已经能够直接调用发起请求了。</p>\n<p>那么方式二怎么解决呢，并且除了<code>get</code>,还有其他比如<code>post</code>、<code>delete</code>等请求，我们可以把请求方法收集成一个数组，然后循环遍历依次创建请求就好。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> methodList = [<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;options&#x27;</span>, <span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[method] = <span class=\"keyword\">function</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;delete&#x27;</span>,<span class=\"string\">&#x27;head&#x27;</span>,<span class=\"string\">&#x27;options&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"attr\">data</span>: arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们已经给 MyAxios的原型对象挂载好方法了， 但是我们导出的<code>request</code> 是没有这些方法的，所以有必要把原型对象下的方法，复制到<code>request</code>里，所以我们封装一个方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extendFn</span>(<span class=\"params\">target, source, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里注意, 函数可能有this不能直接赋值</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以把当前上下文环境 绑定过来</span></span><br><span class=\"line\">        target[key] = source[key].<span class=\"title function_\">bind</span>(context)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        target[key] = source[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数封装好了，我们调用函数，把原型对象下的方法，复制到<code>request</code>函数对象里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 原型对象方法 复制到 request函数对象中</span></span><br><span class=\"line\">  <span class=\"title function_\">extendFn</span>(request, <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们终于可以用第二种方式发请求了, 完整代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyAxios</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">request</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里真正发起请求,并且使用 Promise封装就好了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;method = <span class=\"string\">&#x27;GET&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>, data = &#123;&#125;&#125; = config</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(method, url)</span><br><span class=\"line\">      xhr.<span class=\"title function_\">send</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>),</span><br><span class=\"line\">            <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;OK&#x27;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> methodList = [<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;options&#x27;</span>, <span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">methodList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[method] = <span class=\"keyword\">function</span>(<span class=\"params\">...arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;delete&#x27;</span>,<span class=\"string\">&#x27;head&#x27;</span>,<span class=\"string\">&#x27;options&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([<span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>].<span class=\"title function_\">includes</span>(method)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: method,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: arg[<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"attr\">data</span>: arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extendFn</span>(<span class=\"params\">target, source, context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source[key] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里注意, 函数可能有this不能直接赋值</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以把当前上下文环境 绑定过来</span></span><br><span class=\"line\">        target[key] = source[key].<span class=\"title function_\">bind</span>(context)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        target[key] = source[key]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createMyAxios</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myaxios = <span class=\"keyword\">new</span> <span class=\"title class_\">MyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> request = myaxios.<span class=\"property\">request</span>.<span class=\"title function_\">bind</span>(myaxios)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">extendFn</span>(request, <span class=\"title class_\">MyAxios</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, myaxios)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myaxios = <span class=\"title function_\">createMyAxios</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">myaxios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://ajax-api.itheima.net/api/settings&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"手写Promise","_content":"\n### Promise 的基本语法\n\npromise 是 es6 提供的解决异步编程的新语法， 主要解决两个问题，第一个解决之前回调地狱(层层嵌套)， 第二个不需要立即指定回调函数，还可以在异步操作执行完提供。\n\npromise 可以有三个状态 `pendding`、`resolved`、`rejected`，并且是不可逆的。\n\n1. 由`pendding` 变成 `resolved`: \n\n   a. 构造函数内调用 resolve\n\n2. 由 `pendding` 变成 `rejected`\n\n​       a. 构造函数调用reject\n\n​       b. 构造函数抛出错误\n\n<!-- more -->\n\n### Promise 构造函数的书写\n\n之前说了 promise是有状态的`pendding`，并且需要返回数据暂定`null`\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态  \n    this.initValue()\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n}\n```\n\npromise的初始状态是`pendding`，并且 `resolve`和`reject`函数的this需要指向promise实例，防止随着函数执行环境而改变\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n}\n```\n\n当执行resolve则状态改为`resolved`并返回结果，当执行reject状态改为`rejected`也返回结果\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n```\n\n简单测试\n\n```js\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'resolved', PromiseResult: 111}\n\nlet p2 = new MyPromise((resolve, reject) => {\n  reject('失败')\n})\nconsole.log(p2)  // MyPromise { PromiseState: 'rejected', PromiseResult: '失败'}\n```\n\n但是有个问题，如果测试代码改成这样， promise的状态由`pendding`改成了`resolved`， 接着又新改成了`rejected`，这跟我们的初衷违背`promise的状态不可逆`\n\n```js\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功')\n  reject('失败')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'rejected', PromiseResult: '失败'}\n```\n\n既然发现了问题，那么解决其实很简单，只需要判断修改前的状态是否是`pendding` 就可以， 如果是 `pendding` 则状态可以修改，如果不是那么状态定死不可修改\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功11')\n  reject('失败11')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'resolved', PromiseResult: '成功11'}\n```\n\n之前说过，promise执行`reject`有两种情况，`1. 构造函数调用` 、`2. 抛出异常`\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    // 构造函数内抛出异常，直接执行 catch\n    try {\n      executor(this.resolve, this.reject)\n    } catch {\n      this.reject()\n    }\n    \n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n\nlet p = new MyPromise((resolve, reject) => {\n  throw '直接报错'\n})\nconsole.log(p)  // MyPromise {PromiseState: 'rejected', PromiseResult: '直接报错' }\n```\n\nok，我们基本搞定了Promise类的功能，待会我们再完善。\n\n### Promise.then() 的实现\n\npromise 的then可以接受两个回调函数，一个是成功回调，一个是失败回调。\n\n1. 当promise的状态为 `resolved` 则执行**成功**回调函数，当promise的状态为 `rejected` 则执行**失败** 回调函数\n\n   ```js\n// then 接受两个回调函数 onResolve成功  onRejct失败\nMyPromise.prototype.then = function(onResolve, onReject) {\n    // then接收两个函数，所以需要校验下\n    // 1. 传递的是函数 则正常使用\n    // 2. 传递的不是函数 则修改成函数\n    onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n    onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n     if(this.PromiseState === 'resolved') {\n       onResolve(this.PromiseResult)\n     } else if(this.PromiseState === 'rejected') {\n       onReject(this.PromiseResult)\n     }\n      console.log('1. 当构造函数里有定时器时，先执行了 then 函数')\n   }\n   \n   \n   new MyPromise((resolve, reject) => {\n     resolve('成功')\n   }).then(res => {\n     console.log(res) // 成功\n   })\n   \n   new MyPromise((resolve, reject) => {\n     reject('错了')\n   }).then(() => {}, err => {\n     console.log(err)  // 错了\n   })\n   \n   new MyPromise((resolve, reject) => {\n     throw '错了22'\n   }).then(() => {}, err => {\n     console.log(err)  // 错了22\n   })\n   \n   // ******** 有个问题 ********\n   new MyPromise((resolve, reject) => {\n     setTimeout(() => {\n       console.log('2. 再执行的异步定时器')\n       resolve('成功')\n     }, 1000)\n   \n   }).then(res => {\n     console.log(res)\n   })\n   // 打印\n   // 先执行: 1. 当构造函数里有定时器时，先执行了 then 函数\n   // 等一秒钟后: 2. 再执行的异步定时器\n   ```\n2. 如果resolve或者reject在定时器里，则等定时器结束在执行\n\n   当promise为`pendding`，则说明定时器调用，并将定时器内的方法挂载起来\n\n   当定时器时间结束，则promise的状态发生改变，重新调用定时器里的方法\n\n   由于then可以串联，所以可能挂载的方法很多，最好用数组进行存储\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    // 构造函数内抛出异常，直接执行 catch\n    try {\n      executor(this.resolve, this.reject)\n    } catch(err) {\n      this.reject(err)\n    }\n    \n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n\n    // 创建两个容器，存放函数\n    this.onResolveArr = []\n    this.onRejectArr = []\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n\n    // 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数\n    if(this.onResolveArr.length) {\n      this.onResolveArr.shift()(this.PromiseResult)\n    }\n  }\n\n  reject(reason) {\n    console.log('88')\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n\n    // 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数\n    if(this.onRejectArr.length) {\n      this.onRejectArr.shift()(this.PromiseResult)\n    }\n  }\n}\n\nMyPromise.prototype.then = function(onResolve, onReject) {\n  // then接收两个函数，所以需要校验下\n  // 1. 传递的是函数 则正常使用\n  // 2. 传递的不是函数 则修改成函数\n  onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n  onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n\n  if(this.PromiseState === 'resolved') {\n    onResolve(this.PromiseResult)\n  } else if(this.PromiseState === 'rejected') {\n    onReject(this.PromiseResult)\n  } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n    this.onResolveArr.push(onResolve.bind(this))\n    this.onRejectArr.push(onReject.bind(this))\n  }\n}\n\nnew MyPromise(resolve=> {\n    setTimeout(() => {\n        resolve('成功')\n    }, 1000)\n}).then(res => console.log(res))  // 一秒后打印 成功\n\n```\n\n\n3. then是支持链式调用的，then能够链式调用的关键在于，整个then方法返回值也是一个promise，而这个返回的promise到底是成功还是失败，分为三种情况：\n\n   a.  返回值是promise对象，返回值为成功，新的promise为成功\n\n   b.  返回值是promise对象，返回值为失败，新的promise为失败\n\n   c.  返回值不是promise对象，返回值为成功，值就是这个返回值\n\n   ```js\nMyPromise.prototype.then = function(onResolve, onReject) {\n    // then接收两个函数，所以需要校验下\n    // 1. 传递的是函数 则正常使用\n    // 2. 传递的不是函数 则修改成函数\n    onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n    onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n    let thenPromise = new MyPromise((resolve, reject) => {\n      const resolvePromise = cb => {\n        try {\n              let result = cb(this.PromiseResult)\n              // 说明返回的是一个Promise对象\n              if(result instanceof MyPromise) {  \n                // 到底是成功还是失败，得交给then\n                result.then(resolve, reject)\n              } else {  // 其他值 当成成功处理\n                resolve(result)\n              }\n        } catch(err) {  // 捕获代码的异常\n            reject(err)\n            throw new Error(err)\n        }\n      }\n  \n      if(this.PromiseState === 'resolved') {\n          resolvePromise(onResolve)\n      } else if(this.PromiseState === 'rejected') {\n          resolvePromise(onReject)\n      } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n          this.onResolveArr.push(onResolve.bind(this))\n          this.onRejectArr.push(onReject.bind(this))\n      }\n    })\n  \n    // then的返回值是一个promise, 解决了链式调用问题\n    return thenPromise\n  }\n  \n  new MyPromise((resolve, reject) => {\n    resolve('第一层')\n  }).then(res => {\n    console.log(res)  // 第一层\n    return new MyPromise((resolve, reject) => reject('第二层'))\n  }).then(res => {}, err => {\n    console.log(err)  // 第二层\n  })\n  ```\n\n\n\n4. promise的then其实是一个微任务，也就是需要等同步任务做完在执行then\n\n   ```js\nlet thenPromise = new MyPromise((resolve, reject) => {\n    const resolvePromise = cb => {\n      // 加一个定时器,别介意苦笑😂\n      // 这样就会等待同步执行完, 再执行微任务 then\n      setTimeout(() => {\n        try {\n          let result = cb(this.PromiseResult)\n          // 说明返回的是一个Promise对象\n          if(result instanceof MyPromise) {  \n            // 到底是成功还是失败，得交给then\n            result.then(resolve, reject)\n          } else {  // 其他值 当成成功处理\n            resolve(result)\n          }\n  \n        } catch(err) {  // 捕获代码的异常\n          reject(err)\n          throw new Error(err)\n        }\n      })\n      \n    }\n\n    if(this.PromiseState === 'resolved') {\n      resolvePromise(onResolve)\n    } else if(this.PromiseState === 'rejected') {\n      resolvePromise(onReject)\n    } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n      this.onResolveArr.push(onResolve.bind(this))\n      this.onRejectArr.push(onReject.bind(this))\n    }\n\n  })\n   ```\n\n### Promise.all的实现\n\n- 接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n- 如果所有Promise都成功，则返回成功结果数组\n- 如果有一个Promise失败，则返回这个失败结果\n\n```js\nclass MyPromise {  \n  ...\n  ...\n  \n  static all(list) {\n    const result = []\n    let count = 0\n    return new MyPromise((resolve, reject) => {\n      const addData = (index, value) => {\n        result[index] = value\n        count++\n        if (count === list.length) {\n          resolve(result)\n        }\n      }\n\n      list.forEach((item, index) => {\n        if (item instanceof MyPromise) {\n          item.then(res => {\n            addData(index, res)\n          }, err => reject(err))\n        } else {\n          addData(index, item)\n        }\n      })\n    })\n  }\n}\n\nlet p1 = new MyPromise(resolve => {\n  resolve(1)\n})\nlet p2 = new MyPromise(resolve => {\n  resolve(2)\n})\nlet p3 = new MyPromise(resolve => {\n  resolve(3)\n})\n\nMyPromise.all([p1, p2, p3]).then(res => {\n  console.log(res) // [1, 2, 3]\n})\n\n```\n\n### Promise.race的实现\n\n- 接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n- 哪个Promise最快得到结果，就返回那个结果，无论成功失败\n\n```js\nclass MyPromise {  \n  ...\n  ...\n  \n  static race(promises) {\n    return new MyPromise((resolve, reject) => {\n      promises.forEach((promise) => {\n        if (promise instanceof MyPromise) {\n          promise.then(\n            (res) => {\n              resolve(res)\n            },\n            (err) => {\n              reject(err)\n            }\n          )\n        } else {\n          resolve(promise)\n        }\n      })\n    })\n  }\n}\n\nlet p1 = new MyPromise(resolve => {\n  resolve(1)\n})\nlet p2 = new MyPromise(resolve => {\n  resolve(2)\n})\nlet p3 = new MyPromise(resolve => {\n  resolve(3)\n})\n\nMyPromise.race([p1, p2, p3]).then(res => {\n  console.log(res) // 1\n})\n```\n\n","source":"_posts/JS/01-手写Promise.md","raw":"---\ntitle: 手写Promise\ntags: JS\n---\n\n### Promise 的基本语法\n\npromise 是 es6 提供的解决异步编程的新语法， 主要解决两个问题，第一个解决之前回调地狱(层层嵌套)， 第二个不需要立即指定回调函数，还可以在异步操作执行完提供。\n\npromise 可以有三个状态 `pendding`、`resolved`、`rejected`，并且是不可逆的。\n\n1. 由`pendding` 变成 `resolved`: \n\n   a. 构造函数内调用 resolve\n\n2. 由 `pendding` 变成 `rejected`\n\n​       a. 构造函数调用reject\n\n​       b. 构造函数抛出错误\n\n<!-- more -->\n\n### Promise 构造函数的书写\n\n之前说了 promise是有状态的`pendding`，并且需要返回数据暂定`null`\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态  \n    this.initValue()\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n}\n```\n\npromise的初始状态是`pendding`，并且 `resolve`和`reject`函数的this需要指向promise实例，防止随着函数执行环境而改变\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n}\n```\n\n当执行resolve则状态改为`resolved`并返回结果，当执行reject状态改为`rejected`也返回结果\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n```\n\n简单测试\n\n```js\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'resolved', PromiseResult: 111}\n\nlet p2 = new MyPromise((resolve, reject) => {\n  reject('失败')\n})\nconsole.log(p2)  // MyPromise { PromiseState: 'rejected', PromiseResult: '失败'}\n```\n\n但是有个问题，如果测试代码改成这样， promise的状态由`pendding`改成了`resolved`， 接着又新改成了`rejected`，这跟我们的初衷违背`promise的状态不可逆`\n\n```js\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功')\n  reject('失败')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'rejected', PromiseResult: '失败'}\n```\n\n既然发现了问题，那么解决其实很简单，只需要判断修改前的状态是否是`pendding` 就可以， 如果是 `pendding` 则状态可以修改，如果不是那么状态定死不可修改\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    executor(this.resolve, this.reject)\n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n\nlet p = new MyPromise((resolve, reject) => {\n  resolve('成功11')\n  reject('失败11')\n})\nconsole.log(p)  // MyPromise { PromiseState: 'resolved', PromiseResult: '成功11'}\n```\n\n之前说过，promise执行`reject`有两种情况，`1. 构造函数调用` 、`2. 抛出异常`\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    // 构造函数内抛出异常，直接执行 catch\n    try {\n      executor(this.resolve, this.reject)\n    } catch {\n      this.reject()\n    }\n    \n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n  }\n\n  reject(reason) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n  }\n}\n\nlet p = new MyPromise((resolve, reject) => {\n  throw '直接报错'\n})\nconsole.log(p)  // MyPromise {PromiseState: 'rejected', PromiseResult: '直接报错' }\n```\n\nok，我们基本搞定了Promise类的功能，待会我们再完善。\n\n### Promise.then() 的实现\n\npromise 的then可以接受两个回调函数，一个是成功回调，一个是失败回调。\n\n1. 当promise的状态为 `resolved` 则执行**成功**回调函数，当promise的状态为 `rejected` 则执行**失败** 回调函数\n\n   ```js\n// then 接受两个回调函数 onResolve成功  onRejct失败\nMyPromise.prototype.then = function(onResolve, onReject) {\n    // then接收两个函数，所以需要校验下\n    // 1. 传递的是函数 则正常使用\n    // 2. 传递的不是函数 则修改成函数\n    onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n    onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n     if(this.PromiseState === 'resolved') {\n       onResolve(this.PromiseResult)\n     } else if(this.PromiseState === 'rejected') {\n       onReject(this.PromiseResult)\n     }\n      console.log('1. 当构造函数里有定时器时，先执行了 then 函数')\n   }\n   \n   \n   new MyPromise((resolve, reject) => {\n     resolve('成功')\n   }).then(res => {\n     console.log(res) // 成功\n   })\n   \n   new MyPromise((resolve, reject) => {\n     reject('错了')\n   }).then(() => {}, err => {\n     console.log(err)  // 错了\n   })\n   \n   new MyPromise((resolve, reject) => {\n     throw '错了22'\n   }).then(() => {}, err => {\n     console.log(err)  // 错了22\n   })\n   \n   // ******** 有个问题 ********\n   new MyPromise((resolve, reject) => {\n     setTimeout(() => {\n       console.log('2. 再执行的异步定时器')\n       resolve('成功')\n     }, 1000)\n   \n   }).then(res => {\n     console.log(res)\n   })\n   // 打印\n   // 先执行: 1. 当构造函数里有定时器时，先执行了 then 函数\n   // 等一秒钟后: 2. 再执行的异步定时器\n   ```\n2. 如果resolve或者reject在定时器里，则等定时器结束在执行\n\n   当promise为`pendding`，则说明定时器调用，并将定时器内的方法挂载起来\n\n   当定时器时间结束，则promise的状态发生改变，重新调用定时器里的方法\n\n   由于then可以串联，所以可能挂载的方法很多，最好用数组进行存储\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 初始化promise的数据和状态\n    this.initValue()\n    // 修改resolve和reject的this\n    this.initBind()\n\n    // 构造函数内抛出异常，直接执行 catch\n    try {\n      executor(this.resolve, this.reject)\n    } catch(err) {\n      this.reject(err)\n    }\n    \n  }\n\n  initValue() {\n    this.PromiseState = 'pendding'\n    this.PromiseResult = null\n\n    // 创建两个容器，存放函数\n    this.onResolveArr = []\n    this.onRejectArr = []\n  }\n\n  initBind() {\n    this.resolve = this.resolve.bind(this)\n    this.reject = this.reject.bind(this)\n  }\n\n  resolve(value) {\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'resolved'\n    this.PromiseResult = value\n\n    // 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数\n    if(this.onResolveArr.length) {\n      this.onResolveArr.shift()(this.PromiseResult)\n    }\n  }\n\n  reject(reason) {\n    console.log('88')\n    if(this.PromiseState !== 'pendding') {\n      return \n    }\n    this.PromiseState = 'rejected'\n    this.PromiseResult = reason\n\n    // 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数\n    if(this.onRejectArr.length) {\n      this.onRejectArr.shift()(this.PromiseResult)\n    }\n  }\n}\n\nMyPromise.prototype.then = function(onResolve, onReject) {\n  // then接收两个函数，所以需要校验下\n  // 1. 传递的是函数 则正常使用\n  // 2. 传递的不是函数 则修改成函数\n  onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n  onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n\n  if(this.PromiseState === 'resolved') {\n    onResolve(this.PromiseResult)\n  } else if(this.PromiseState === 'rejected') {\n    onReject(this.PromiseResult)\n  } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n    this.onResolveArr.push(onResolve.bind(this))\n    this.onRejectArr.push(onReject.bind(this))\n  }\n}\n\nnew MyPromise(resolve=> {\n    setTimeout(() => {\n        resolve('成功')\n    }, 1000)\n}).then(res => console.log(res))  // 一秒后打印 成功\n\n```\n\n\n3. then是支持链式调用的，then能够链式调用的关键在于，整个then方法返回值也是一个promise，而这个返回的promise到底是成功还是失败，分为三种情况：\n\n   a.  返回值是promise对象，返回值为成功，新的promise为成功\n\n   b.  返回值是promise对象，返回值为失败，新的promise为失败\n\n   c.  返回值不是promise对象，返回值为成功，值就是这个返回值\n\n   ```js\nMyPromise.prototype.then = function(onResolve, onReject) {\n    // then接收两个函数，所以需要校验下\n    // 1. 传递的是函数 则正常使用\n    // 2. 传递的不是函数 则修改成函数\n    onResolve = typeof(onResolve) === 'function' ? onResolve : val => val\n    onReject = typeof(onReject) === 'function' ? onReject : reason => {throw reason}\n    let thenPromise = new MyPromise((resolve, reject) => {\n      const resolvePromise = cb => {\n        try {\n              let result = cb(this.PromiseResult)\n              // 说明返回的是一个Promise对象\n              if(result instanceof MyPromise) {  \n                // 到底是成功还是失败，得交给then\n                result.then(resolve, reject)\n              } else {  // 其他值 当成成功处理\n                resolve(result)\n              }\n        } catch(err) {  // 捕获代码的异常\n            reject(err)\n            throw new Error(err)\n        }\n      }\n  \n      if(this.PromiseState === 'resolved') {\n          resolvePromise(onResolve)\n      } else if(this.PromiseState === 'rejected') {\n          resolvePromise(onReject)\n      } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n          this.onResolveArr.push(onResolve.bind(this))\n          this.onRejectArr.push(onReject.bind(this))\n      }\n    })\n  \n    // then的返回值是一个promise, 解决了链式调用问题\n    return thenPromise\n  }\n  \n  new MyPromise((resolve, reject) => {\n    resolve('第一层')\n  }).then(res => {\n    console.log(res)  // 第一层\n    return new MyPromise((resolve, reject) => reject('第二层'))\n  }).then(res => {}, err => {\n    console.log(err)  // 第二层\n  })\n  ```\n\n\n\n4. promise的then其实是一个微任务，也就是需要等同步任务做完在执行then\n\n   ```js\nlet thenPromise = new MyPromise((resolve, reject) => {\n    const resolvePromise = cb => {\n      // 加一个定时器,别介意苦笑😂\n      // 这样就会等待同步执行完, 再执行微任务 then\n      setTimeout(() => {\n        try {\n          let result = cb(this.PromiseResult)\n          // 说明返回的是一个Promise对象\n          if(result instanceof MyPromise) {  \n            // 到底是成功还是失败，得交给then\n            result.then(resolve, reject)\n          } else {  // 其他值 当成成功处理\n            resolve(result)\n          }\n  \n        } catch(err) {  // 捕获代码的异常\n          reject(err)\n          throw new Error(err)\n        }\n      })\n      \n    }\n\n    if(this.PromiseState === 'resolved') {\n      resolvePromise(onResolve)\n    } else if(this.PromiseState === 'rejected') {\n      resolvePromise(onReject)\n    } else if(this.PromiseState === 'pendding') {  // 说明可能有定时器,把方法存放起来，等待之后调用\n      this.onResolveArr.push(onResolve.bind(this))\n      this.onRejectArr.push(onReject.bind(this))\n    }\n\n  })\n   ```\n\n### Promise.all的实现\n\n- 接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n- 如果所有Promise都成功，则返回成功结果数组\n- 如果有一个Promise失败，则返回这个失败结果\n\n```js\nclass MyPromise {  \n  ...\n  ...\n  \n  static all(list) {\n    const result = []\n    let count = 0\n    return new MyPromise((resolve, reject) => {\n      const addData = (index, value) => {\n        result[index] = value\n        count++\n        if (count === list.length) {\n          resolve(result)\n        }\n      }\n\n      list.forEach((item, index) => {\n        if (item instanceof MyPromise) {\n          item.then(res => {\n            addData(index, res)\n          }, err => reject(err))\n        } else {\n          addData(index, item)\n        }\n      })\n    })\n  }\n}\n\nlet p1 = new MyPromise(resolve => {\n  resolve(1)\n})\nlet p2 = new MyPromise(resolve => {\n  resolve(2)\n})\nlet p3 = new MyPromise(resolve => {\n  resolve(3)\n})\n\nMyPromise.all([p1, p2, p3]).then(res => {\n  console.log(res) // [1, 2, 3]\n})\n\n```\n\n### Promise.race的实现\n\n- 接收一个Promise数组，数组中如有非Promise项，则此项当做成功\n- 哪个Promise最快得到结果，就返回那个结果，无论成功失败\n\n```js\nclass MyPromise {  \n  ...\n  ...\n  \n  static race(promises) {\n    return new MyPromise((resolve, reject) => {\n      promises.forEach((promise) => {\n        if (promise instanceof MyPromise) {\n          promise.then(\n            (res) => {\n              resolve(res)\n            },\n            (err) => {\n              reject(err)\n            }\n          )\n        } else {\n          resolve(promise)\n        }\n      })\n    })\n  }\n}\n\nlet p1 = new MyPromise(resolve => {\n  resolve(1)\n})\nlet p2 = new MyPromise(resolve => {\n  resolve(2)\n})\nlet p3 = new MyPromise(resolve => {\n  resolve(3)\n})\n\nMyPromise.race([p1, p2, p3]).then(res => {\n  console.log(res) // 1\n})\n```\n\n","slug":"JS/01-手写Promise","published":1,"date":"2023-03-17T13:09:00.234Z","updated":"2023-03-17T13:09:00.234Z","_id":"clf6yh1q600098cupadgg904t","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Promise-的基本语法\"><a href=\"#Promise-的基本语法\" class=\"headerlink\" title=\"Promise 的基本语法\"></a>Promise 的基本语法</h3><p>promise 是 es6 提供的解决异步编程的新语法， 主要解决两个问题，第一个解决之前回调地狱(层层嵌套)， 第二个不需要立即指定回调函数，还可以在异步操作执行完提供。</p>\n<p>promise 可以有三个状态 <code>pendding</code>、<code>resolved</code>、<code>rejected</code>，并且是不可逆的。</p>\n<ol>\n<li><p>由<code>pendding</code> 变成 <code>resolved</code>: </p>\n<p>a. 构造函数内调用 resolve</p>\n</li>\n<li><p>由 <code>pendding</code> 变成 <code>rejected</code></p>\n</li>\n</ol>\n<p>​       a. 构造函数调用reject</p>\n<p>​       b. 构造函数抛出错误</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Promise-构造函数的书写\"><a href=\"#Promise-构造函数的书写\" class=\"headerlink\" title=\"Promise 构造函数的书写\"></a>Promise 构造函数的书写</h3><p>之前说了 promise是有状态的<code>pendding</code>，并且需要返回数据暂定<code>null</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态  </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>promise的初始状态是<code>pendding</code>，并且 <code>resolve</code>和<code>reject</code>函数的this需要指向promise实例，防止随着函数执行环境而改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当执行resolve则状态改为<code>resolved</code>并返回结果，当执行reject状态改为<code>rejected</code>也返回结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;resolved&#x27;, PromiseResult: 111&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p2)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;失败&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是有个问题，如果测试代码改成这样， promise的状态由<code>pendding</code>改成了<code>resolved</code>， 接着又新改成了<code>rejected</code>，这跟我们的初衷违背<code>promise的状态不可逆</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;失败&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>既然发现了问题，那么解决其实很简单，只需要判断修改前的状态是否是<code>pendding</code> 就可以， 如果是 <code>pendding</code> 则状态可以修改，如果不是那么状态定死不可修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功11&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败11&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;resolved&#x27;, PromiseResult: &#x27;成功11&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>之前说过，promise执行<code>reject</code>有两种情况，<code>1. 构造函数调用</code> 、<code>2. 抛出异常</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数内抛出异常，直接执行 catch</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;直接报错&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123;PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;直接报错&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>ok，我们基本搞定了Promise类的功能，待会我们再完善。</p>\n<h3 id=\"Promise-then-的实现\"><a href=\"#Promise-then-的实现\" class=\"headerlink\" title=\"Promise.then() 的实现\"></a>Promise.then() 的实现</h3><p>promise 的then可以接受两个回调函数，一个是成功回调，一个是失败回调。</p>\n<ol>\n<li><p>当promise的状态为 <code>resolved</code> 则执行<strong>成功</strong>回调函数，当promise的状态为 <code>rejected</code> 则执行<strong>失败</strong> 回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// then 接受两个回调函数 onResolve成功  onRejct失败</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">    onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">    onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1. 当构造函数里有定时器时，先执行了 then 函数&#x27;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 成功</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;错了&#x27;</span>)</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 错了</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;错了22&#x27;</span></span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 错了22</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// ******** 有个问题 ********</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2. 再执行的异步定时器&#x27;</span>)</span><br><span class=\"line\">       <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">     &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"comment\">// 打印</span></span><br><span class=\"line\">   <span class=\"comment\">// 先执行: 1. 当构造函数里有定时器时，先执行了 then 函数</span></span><br><span class=\"line\">   <span class=\"comment\">// 等一秒钟后: 2. 再执行的异步定时器</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果resolve或者reject在定时器里，则等定时器结束在执行</p>\n<p>当promise为<code>pendding</code>，则说明定时器调用，并将定时器内的方法挂载起来</p>\n<p>当定时器时间结束，则promise的状态发生改变，重新调用定时器里的方法</p>\n<p>由于then可以串联，所以可能挂载的方法很多，最好用数组进行存储</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数内抛出异常，直接执行 catch</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建两个容器，存放函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;88&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">  onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">  onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))  <span class=\"comment\">// 一秒后打印 成功</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li><p>then是支持链式调用的，then能够链式调用的关键在于，整个then方法返回值也是一个promise，而这个返回的promise到底是成功还是失败，分为三种情况：</p>\n<p>a.  返回值是promise对象，返回值为成功，新的promise为成功</p>\n<p>b.  返回值是promise对象，返回值为失败，新的promise为失败</p>\n<p>c.  返回值不是promise对象，返回值为成功，值就是这个返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">    onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">    onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = cb =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> result = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">              <span class=\"comment\">// 说明返回的是一个Promise对象</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;  </span><br><span class=\"line\">                <span class=\"comment\">// 到底是成功还是失败，得交给then</span></span><br><span class=\"line\">                result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 其他值 当成成功处理</span></span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(err) &#123;  <span class=\"comment\">// 捕获代码的异常</span></span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(onResolve)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(onReject)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// then的返回值是一个promise, 解决了链式调用问题</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> thenPromise</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;第一层&#x27;</span>)</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)  <span class=\"comment\">// 第一层</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;第二层&#x27;</span>))</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 第二层</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ol start=\"4\">\n<li><p>promise的then其实是一个微任务，也就是需要等同步任务做完在执行then</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = cb =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 加一个定时器,别介意苦笑😂</span></span><br><span class=\"line\">      <span class=\"comment\">// 这样就会等待同步执行完, 再执行微任务 then</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> result = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 说明返回的是一个Promise对象</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 到底是成功还是失败，得交给then</span></span><br><span class=\"line\">            result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 其他值 当成成功处理</span></span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(err) &#123;  <span class=\"comment\">// 捕获代码的异常</span></span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolvePromise</span>(onResolve)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolvePromise</span>(onReject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Promise-all的实现\"><a href=\"#Promise-all的实现\" class=\"headerlink\" title=\"Promise.all的实现\"></a>Promise.all的实现</h3><ul>\n<li>接收一个Promise数组，数组中如有非Promise项，则此项当做成功</li>\n<li>如果所有Promise都成功，则返回成功结果数组</li>\n<li>如果有一个Promise失败，则返回这个失败结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">addData</span> = (<span class=\"params\">index, value</span>) =&gt; &#123;</span><br><span class=\"line\">        result[index] = value</span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count === list.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          item.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">addData</span>(index, res)</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"title function_\">reject</span>(err))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">addData</span>(index, item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race的实现\"><a href=\"#Promise-race的实现\" class=\"headerlink\" title=\"Promise.race的实现\"></a>Promise.race的实现</h3><ul>\n<li>接收一个Promise数组，数组中如有非Promise项，则此项当做成功</li>\n<li>哪个Promise最快得到结果，就返回那个结果，无论成功失败</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">race</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      promises.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">promise</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(promise)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"Promise-的基本语法\"><a href=\"#Promise-的基本语法\" class=\"headerlink\" title=\"Promise 的基本语法\"></a>Promise 的基本语法</h3><p>promise 是 es6 提供的解决异步编程的新语法， 主要解决两个问题，第一个解决之前回调地狱(层层嵌套)， 第二个不需要立即指定回调函数，还可以在异步操作执行完提供。</p>\n<p>promise 可以有三个状态 <code>pendding</code>、<code>resolved</code>、<code>rejected</code>，并且是不可逆的。</p>\n<ol>\n<li><p>由<code>pendding</code> 变成 <code>resolved</code>: </p>\n<p>a. 构造函数内调用 resolve</p>\n</li>\n<li><p>由 <code>pendding</code> 变成 <code>rejected</code></p>\n</li>\n</ol>\n<p>​       a. 构造函数调用reject</p>\n<p>​       b. 构造函数抛出错误</p>","more":"<h3 id=\"Promise-构造函数的书写\"><a href=\"#Promise-构造函数的书写\" class=\"headerlink\" title=\"Promise 构造函数的书写\"></a>Promise 构造函数的书写</h3><p>之前说了 promise是有状态的<code>pendding</code>，并且需要返回数据暂定<code>null</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态  </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>promise的初始状态是<code>pendding</code>，并且 <code>resolve</code>和<code>reject</code>函数的this需要指向promise实例，防止随着函数执行环境而改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当执行resolve则状态改为<code>resolved</code>并返回结果，当执行reject状态改为<code>rejected</code>也返回结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;resolved&#x27;, PromiseResult: 111&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p2)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;失败&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是有个问题，如果测试代码改成这样， promise的状态由<code>pendding</code>改成了<code>resolved</code>， 接着又新改成了<code>rejected</code>，这跟我们的初衷违背<code>promise的状态不可逆</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;失败&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>既然发现了问题，那么解决其实很简单，只需要判断修改前的状态是否是<code>pendding</code> 就可以， 如果是 <code>pendding</code> 则状态可以修改，如果不是那么状态定死不可修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功11&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败11&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123; PromiseState: &#x27;resolved&#x27;, PromiseResult: &#x27;成功11&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>之前说过，promise执行<code>reject</code>有两种情况，<code>1. 构造函数调用</code> 、<code>2. 抛出异常</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数内抛出异常，直接执行 catch</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;直接报错&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// MyPromise &#123;PromiseState: &#x27;rejected&#x27;, PromiseResult: &#x27;直接报错&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>ok，我们基本搞定了Promise类的功能，待会我们再完善。</p>\n<h3 id=\"Promise-then-的实现\"><a href=\"#Promise-then-的实现\" class=\"headerlink\" title=\"Promise.then() 的实现\"></a>Promise.then() 的实现</h3><p>promise 的then可以接受两个回调函数，一个是成功回调，一个是失败回调。</p>\n<ol>\n<li><p>当promise的状态为 <code>resolved</code> 则执行<strong>成功</strong>回调函数，当promise的状态为 <code>rejected</code> 则执行<strong>失败</strong> 回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// then 接受两个回调函数 onResolve成功  onRejct失败</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">    onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">    onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1. 当构造函数里有定时器时，先执行了 then 函数&#x27;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 成功</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;错了&#x27;</span>)</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 错了</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;错了22&#x27;</span></span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 错了22</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// ******** 有个问题 ********</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2. 再执行的异步定时器&#x27;</span>)</span><br><span class=\"line\">       <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">     &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">   &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"comment\">// 打印</span></span><br><span class=\"line\">   <span class=\"comment\">// 先执行: 1. 当构造函数里有定时器时，先执行了 then 函数</span></span><br><span class=\"line\">   <span class=\"comment\">// 等一秒钟后: 2. 再执行的异步定时器</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果resolve或者reject在定时器里，则等定时器结束在执行</p>\n<p>当promise为<code>pendding</code>，则说明定时器调用，并将定时器内的方法挂载起来</p>\n<p>当定时器时间结束，则promise的状态发生改变，重新调用定时器里的方法</p>\n<p>由于then可以串联，所以可能挂载的方法很多，最好用数组进行存储</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化promise的数据和状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initValue</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 修改resolve和reject的this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数内抛出异常，直接执行 catch</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pendding&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建两个容器，存放函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;88&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = reason</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 状态发生改变说明定时器到时间了, 容器里有函数, 调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">  onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">  onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))  <span class=\"comment\">// 一秒后打印 成功</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li><p>then是支持链式调用的，then能够链式调用的关键在于，整个then方法返回值也是一个promise，而这个返回的promise到底是成功还是失败，分为三种情况：</p>\n<p>a.  返回值是promise对象，返回值为成功，新的promise为成功</p>\n<p>b.  返回值是promise对象，返回值为失败，新的promise为失败</p>\n<p>c.  返回值不是promise对象，返回值为成功，值就是这个返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then接收两个函数，所以需要校验下</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 传递的是函数 则正常使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 传递的不是函数 则修改成函数</span></span><br><span class=\"line\">    onResolve = <span class=\"title function_\">typeof</span>(onResolve) === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val</span><br><span class=\"line\">    onReject = <span class=\"title function_\">typeof</span>(onReject) === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = cb =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> result = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">              <span class=\"comment\">// 说明返回的是一个Promise对象</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;  </span><br><span class=\"line\">                <span class=\"comment\">// 到底是成功还是失败，得交给then</span></span><br><span class=\"line\">                result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 其他值 当成成功处理</span></span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(err) &#123;  <span class=\"comment\">// 捕获代码的异常</span></span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(onResolve)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(onReject)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// then的返回值是一个promise, 解决了链式调用问题</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> thenPromise</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;第一层&#x27;</span>)</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)  <span class=\"comment\">// 第一层</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;第二层&#x27;</span>))</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)  <span class=\"comment\">// 第二层</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ol start=\"4\">\n<li><p>promise的then其实是一个微任务，也就是需要等同步任务做完在执行then</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = cb =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 加一个定时器,别介意苦笑😂</span></span><br><span class=\"line\">      <span class=\"comment\">// 这样就会等待同步执行完, 再执行微任务 then</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> result = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 说明返回的是一个Promise对象</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 到底是成功还是失败，得交给then</span></span><br><span class=\"line\">            result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 其他值 当成成功处理</span></span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(err) &#123;  <span class=\"comment\">// 捕获代码的异常</span></span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolvePromise</span>(onResolve)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolvePromise</span>(onReject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> === <span class=\"string\">&#x27;pendding&#x27;</span>) &#123;  <span class=\"comment\">// 说明可能有定时器,把方法存放起来，等待之后调用</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveArr</span>.<span class=\"title function_\">push</span>(onResolve.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectArr</span>.<span class=\"title function_\">push</span>(onReject.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Promise-all的实现\"><a href=\"#Promise-all的实现\" class=\"headerlink\" title=\"Promise.all的实现\"></a>Promise.all的实现</h3><ul>\n<li>接收一个Promise数组，数组中如有非Promise项，则此项当做成功</li>\n<li>如果所有Promise都成功，则返回成功结果数组</li>\n<li>如果有一个Promise失败，则返回这个失败结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">addData</span> = (<span class=\"params\">index, value</span>) =&gt; &#123;</span><br><span class=\"line\">        result[index] = value</span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count === list.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          item.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">addData</span>(index, res)</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"title function_\">reject</span>(err))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">addData</span>(index, item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race的实现\"><a href=\"#Promise-race的实现\" class=\"headerlink\" title=\"Promise.race的实现\"></a>Promise.race的实现</h3><ul>\n<li>接收一个Promise数组，数组中如有非Promise项，则此项当做成功</li>\n<li>哪个Promise最快得到结果，就返回那个结果，无论成功失败</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">race</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      promises.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">promise</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (promise <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(promise)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"手写瀑布流","_content":"\n瀑布流是我们经常用到的效果，它有一个特点就是`等宽不定高`\n\n那我们如何实现一个这样的效果呢，我们一步一步来做一下\n\n<!-- more -->\n\n首先我们准备容器样式和模拟数据：\n\n```html\n<style>\n    html, body, .container {\n        margin: 0;\n        height: 100vh;\n    }\n    .container {\n        position: relative;\n    }\n    .container div {\n        position: absolute;\n        width: 120px;\n    }\n</style>\n\n<div class=\"container\"></div>\n\n<script>\n    let list =  [\n        {\n            height: 300,\n            background: 'red'\n        },\n        ...\n        ...\n        {\n            height: 400,\n            background: 'pink'\n        },\n     ]\n</script>\n```\n\n`list`就是我们希望渲染到页面的数据，但是我们不能直接循环渲染到页面，我们需要调整调整数组顺序，计算每一项元素的位置，我们准备一个`renderList` 来盛放新数据，我们还需要准备一个`heightList`来盛放每一行的各个元素的高度。\n\n```js\nlet renderList = []  // 用来盛放要渲染的数组\nlet heightList = []  // 盛放每一行元素的高度\n```\n\n那一行到底盛放几个元素呢，我们暂定元素宽度`130px`，那就是页面宽度`document.body.clientWidth`除元素宽度\n\n```js\nlet column = Math.floor(document.body.clientWidth / 130)  // 一行几列\n```\n\n接下来就是循环`list` 先丢满一整行，并记录位置`left`、`top`\n\n```js\nlist.forEach((item, index) => {\n    if(index < column) {\n        item.top = 0\n        item.left = 130 * index\n\n        renderList.push(item)\n        heightList.push(item.height)  // 记录下一整行各个元素的高度\n    }\n})\n```\n\n`renderList`第一行数据我们准备好了，渲染到页面看下效果\n\n```js\nlet result = ``\n\nrenderList.forEach(item => {\n    result += `<div style=\"\n        height: ${item.height}px; \n        background: ${item.background}; \n        left: ${item.left}px; \n        top: ${item.top}px\">\n\t</div>`\n})\n\ndocument.querySelector('.container').innerHTML = result\n```\n\n第一行搞定了😊\n\n接下来难点来了，我们需要接着循环`list`数据并找高度最小的那一列，把数据放到高度最小的下边，以此类推，直到`list`所有数据循环完毕，并每一次都放到重新计算了最小列的下边。\n\n```js\nlist.forEach((item, index) => {\n    if(index < column) {\n        item.top = 0\n        item.left = 130 * index\n\n        renderList.push(item)\n        heightList.push(item.height)  // 记录下一整行各个元素的高度\n    } else {  // 数据超过第一行，就需要逐个元素去判断放置的位置\n        let shotHeight = heightList[0]  // 假设第一个是最小高度\n        let shotIndex = 0  // 假设最小高度的列索引\n\n        heightList.forEach((heightItem, heightIndex) => {  // 循环遍历高度列表\n            if(shotHeight > heightItem) {  // 当高度小于标识 则替换\n                shotHeight = heightItem\n                shotIndex = heightIndex\n            }\n        })\n\n        item.left = 130 * shotIndex  // 设置最小高度列的左偏移\n        item.top = shotHeight + 10  // 给最小高度列下边 并留10px 间距\n\n        renderList.push(item)  // 将元素 放到渲染数组\n\n        heightList[shotIndex] = shotHeight + item.height  // 更新heightlist高度列表\n    }\n})\n```\n\n再次查看效果,成功了。\n\n我们希望页面大小改变重新计算并排列，贴上完整代码：\n\n```js\nlet list =  [\n      {\n          height: 300,\n          background: 'red'\n      },\n   \t  ...\n      ...\n      {\n        height: 400,\n        background: 'skyblue'\n      }\n    ]\n\n    function renderListFn () {\n      let renderList = []  // 用来盛放要渲染的数组\n      let heightList = []  // 盛放每一行元素的高度\n\n      let column = Math.floor(document.body.clientWidth / 130)  // 一行几列\n\n      list.forEach((item, index) => {\n        if(index < column) {\n          item.top = 0\n          item.left = 130 * index\n\n          renderList.push(item)\n          heightList.push(item.height)  // 记录下一整行各个元素的高度\n        } else {  // 数据超过第一行，就需要逐个元素去判断放置的位置\n          let shotHeight = heightList[0]  // 假设第一个是最小高度\n          let shotIndex = 0  // 假设最小高度的列索引\n\n          heightList.forEach((heightItem, heightIndex) => {  // 循环遍历高度列表\n            if(shotHeight > heightItem) {  // 当高度小于标识 则替换\n              shotHeight = heightItem\n              shotIndex = heightIndex\n            }\n          })\n\n          item.left = 130 * shotIndex  // 设置最小高度列的左偏移\n          item.top = shotHeight + 10  // 给最小高度列下边 并留10px 间距\n\n          renderList.push(item)  // 将元素 放到渲染数组\n\n          heightList[shotIndex] = shotHeight + item.height  // 更新heightlist高度列表\n\n\n        }\n      })\n\n      let result = ``\n\n      renderList.forEach(item => {\n        result += `<div style=\"\n          height: ${item.height}px; \n          background: ${item.background}; \n          left: ${item.left}px; \n          top: ${item.top}px\"></div>`\n      })\n\n      document.querySelector('.container').innerHTML = result\n    }\n\n    renderListFn()\n\n    window.onresize = renderListFn\n```\n\n","source":"_posts/JS/03-手写瀑布流.md","raw":"---\ntitle: 手写瀑布流\ntags: JS\n---\n\n瀑布流是我们经常用到的效果，它有一个特点就是`等宽不定高`\n\n那我们如何实现一个这样的效果呢，我们一步一步来做一下\n\n<!-- more -->\n\n首先我们准备容器样式和模拟数据：\n\n```html\n<style>\n    html, body, .container {\n        margin: 0;\n        height: 100vh;\n    }\n    .container {\n        position: relative;\n    }\n    .container div {\n        position: absolute;\n        width: 120px;\n    }\n</style>\n\n<div class=\"container\"></div>\n\n<script>\n    let list =  [\n        {\n            height: 300,\n            background: 'red'\n        },\n        ...\n        ...\n        {\n            height: 400,\n            background: 'pink'\n        },\n     ]\n</script>\n```\n\n`list`就是我们希望渲染到页面的数据，但是我们不能直接循环渲染到页面，我们需要调整调整数组顺序，计算每一项元素的位置，我们准备一个`renderList` 来盛放新数据，我们还需要准备一个`heightList`来盛放每一行的各个元素的高度。\n\n```js\nlet renderList = []  // 用来盛放要渲染的数组\nlet heightList = []  // 盛放每一行元素的高度\n```\n\n那一行到底盛放几个元素呢，我们暂定元素宽度`130px`，那就是页面宽度`document.body.clientWidth`除元素宽度\n\n```js\nlet column = Math.floor(document.body.clientWidth / 130)  // 一行几列\n```\n\n接下来就是循环`list` 先丢满一整行，并记录位置`left`、`top`\n\n```js\nlist.forEach((item, index) => {\n    if(index < column) {\n        item.top = 0\n        item.left = 130 * index\n\n        renderList.push(item)\n        heightList.push(item.height)  // 记录下一整行各个元素的高度\n    }\n})\n```\n\n`renderList`第一行数据我们准备好了，渲染到页面看下效果\n\n```js\nlet result = ``\n\nrenderList.forEach(item => {\n    result += `<div style=\"\n        height: ${item.height}px; \n        background: ${item.background}; \n        left: ${item.left}px; \n        top: ${item.top}px\">\n\t</div>`\n})\n\ndocument.querySelector('.container').innerHTML = result\n```\n\n第一行搞定了😊\n\n接下来难点来了，我们需要接着循环`list`数据并找高度最小的那一列，把数据放到高度最小的下边，以此类推，直到`list`所有数据循环完毕，并每一次都放到重新计算了最小列的下边。\n\n```js\nlist.forEach((item, index) => {\n    if(index < column) {\n        item.top = 0\n        item.left = 130 * index\n\n        renderList.push(item)\n        heightList.push(item.height)  // 记录下一整行各个元素的高度\n    } else {  // 数据超过第一行，就需要逐个元素去判断放置的位置\n        let shotHeight = heightList[0]  // 假设第一个是最小高度\n        let shotIndex = 0  // 假设最小高度的列索引\n\n        heightList.forEach((heightItem, heightIndex) => {  // 循环遍历高度列表\n            if(shotHeight > heightItem) {  // 当高度小于标识 则替换\n                shotHeight = heightItem\n                shotIndex = heightIndex\n            }\n        })\n\n        item.left = 130 * shotIndex  // 设置最小高度列的左偏移\n        item.top = shotHeight + 10  // 给最小高度列下边 并留10px 间距\n\n        renderList.push(item)  // 将元素 放到渲染数组\n\n        heightList[shotIndex] = shotHeight + item.height  // 更新heightlist高度列表\n    }\n})\n```\n\n再次查看效果,成功了。\n\n我们希望页面大小改变重新计算并排列，贴上完整代码：\n\n```js\nlet list =  [\n      {\n          height: 300,\n          background: 'red'\n      },\n   \t  ...\n      ...\n      {\n        height: 400,\n        background: 'skyblue'\n      }\n    ]\n\n    function renderListFn () {\n      let renderList = []  // 用来盛放要渲染的数组\n      let heightList = []  // 盛放每一行元素的高度\n\n      let column = Math.floor(document.body.clientWidth / 130)  // 一行几列\n\n      list.forEach((item, index) => {\n        if(index < column) {\n          item.top = 0\n          item.left = 130 * index\n\n          renderList.push(item)\n          heightList.push(item.height)  // 记录下一整行各个元素的高度\n        } else {  // 数据超过第一行，就需要逐个元素去判断放置的位置\n          let shotHeight = heightList[0]  // 假设第一个是最小高度\n          let shotIndex = 0  // 假设最小高度的列索引\n\n          heightList.forEach((heightItem, heightIndex) => {  // 循环遍历高度列表\n            if(shotHeight > heightItem) {  // 当高度小于标识 则替换\n              shotHeight = heightItem\n              shotIndex = heightIndex\n            }\n          })\n\n          item.left = 130 * shotIndex  // 设置最小高度列的左偏移\n          item.top = shotHeight + 10  // 给最小高度列下边 并留10px 间距\n\n          renderList.push(item)  // 将元素 放到渲染数组\n\n          heightList[shotIndex] = shotHeight + item.height  // 更新heightlist高度列表\n\n\n        }\n      })\n\n      let result = ``\n\n      renderList.forEach(item => {\n        result += `<div style=\"\n          height: ${item.height}px; \n          background: ${item.background}; \n          left: ${item.left}px; \n          top: ${item.top}px\"></div>`\n      })\n\n      document.querySelector('.container').innerHTML = result\n    }\n\n    renderListFn()\n\n    window.onresize = renderListFn\n```\n\n","slug":"JS/03-手写瀑布流","published":1,"date":"2023-03-17T13:09:00.235Z","updated":"2023-03-17T13:09:00.235Z","_id":"clf6yh1q6000b8cup92xn1lq3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>瀑布流是我们经常用到的效果，它有一个特点就是<code>等宽不定高</code></p>\n<p>那我们如何实现一个这样的效果呢，我们一步一步来做一下</p>\n<span id=\"more\"></span>\n\n<p>首先我们准备容器样式和模拟数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> list =  [</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">height</span>: <span class=\"number\">300</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">background</span>: <span class=\"string\">&#x27;red&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">background</span>: <span class=\"string\">&#x27;pink&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">     ]</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>list</code>就是我们希望渲染到页面的数据，但是我们不能直接循环渲染到页面，我们需要调整调整数组顺序，计算每一项元素的位置，我们准备一个<code>renderList</code> 来盛放新数据，我们还需要准备一个<code>heightList</code>来盛放每一行的各个元素的高度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> renderList = []  <span class=\"comment\">// 用来盛放要渲染的数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> heightList = []  <span class=\"comment\">// 盛放每一行元素的高度</span></span><br></pre></td></tr></table></figure>\n\n<p>那一行到底盛放几个元素呢，我们暂定元素宽度<code>130px</code>，那就是页面宽度<code>document.body.clientWidth</code>除元素宽度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> column = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / <span class=\"number\">130</span>)  <span class=\"comment\">// 一行几列</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就是循环<code>list</code> 先丢满一整行，并记录位置<code>left</code>、<code>top</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">        item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>renderList</code>第一行数据我们准备好了，渲染到页面看下效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"string\">``</span></span><br><span class=\"line\"></span><br><span class=\"line\">renderList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    result += <span class=\"string\">`&lt;div style=&quot;</span></span><br><span class=\"line\"><span class=\"string\">        height: <span class=\"subst\">$&#123;item.height&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">        background: <span class=\"subst\">$&#123;item.background&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">        left: <span class=\"subst\">$&#123;item.left&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">        top: <span class=\"subst\">$&#123;item.top&#125;</span>px&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>).<span class=\"property\">innerHTML</span> = result</span><br></pre></td></tr></table></figure>\n\n<p>第一行搞定了😊</p>\n<p>接下来难点来了，我们需要接着循环<code>list</code>数据并找高度最小的那一列，把数据放到高度最小的下边，以此类推，直到<code>list</code>所有数据循环完毕，并每一次都放到重新计算了最小列的下边。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">        item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 数据超过第一行，就需要逐个元素去判断放置的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> shotHeight = heightList[<span class=\"number\">0</span>]  <span class=\"comment\">// 假设第一个是最小高度</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> shotIndex = <span class=\"number\">0</span>  <span class=\"comment\">// 假设最小高度的列索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        heightList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">heightItem, heightIndex</span>) =&gt;</span> &#123;  <span class=\"comment\">// 循环遍历高度列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(shotHeight &gt; heightItem) &#123;  <span class=\"comment\">// 当高度小于标识 则替换</span></span><br><span class=\"line\">                shotHeight = heightItem</span><br><span class=\"line\">                shotIndex = heightIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * shotIndex  <span class=\"comment\">// 设置最小高度列的左偏移</span></span><br><span class=\"line\">        item.<span class=\"property\">top</span> = shotHeight + <span class=\"number\">10</span>  <span class=\"comment\">// 给最小高度列下边 并留10px 间距</span></span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)  <span class=\"comment\">// 将元素 放到渲染数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        heightList[shotIndex] = shotHeight + item.<span class=\"property\">height</span>  <span class=\"comment\">// 更新heightlist高度列表</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>再次查看效果,成功了。</p>\n<p>我们希望页面大小改变重新计算并排列，贴上完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list =  [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"attr\">height</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">          <span class=\"attr\">background</span>: <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   \t  ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"string\">&#x27;skyblue&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">renderListFn</span> () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> renderList = []  <span class=\"comment\">// 用来盛放要渲染的数组</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> heightList = []  <span class=\"comment\">// 盛放每一行元素的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> column = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / <span class=\"number\">130</span>)  <span class=\"comment\">// 一行几列</span></span><br><span class=\"line\"></span><br><span class=\"line\">      list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">          item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">          item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">          renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">          heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 数据超过第一行，就需要逐个元素去判断放置的位置</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> shotHeight = heightList[<span class=\"number\">0</span>]  <span class=\"comment\">// 假设第一个是最小高度</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> shotIndex = <span class=\"number\">0</span>  <span class=\"comment\">// 假设最小高度的列索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">          heightList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">heightItem, heightIndex</span>) =&gt;</span> &#123;  <span class=\"comment\">// 循环遍历高度列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(shotHeight &gt; heightItem) &#123;  <span class=\"comment\">// 当高度小于标识 则替换</span></span><br><span class=\"line\">              shotHeight = heightItem</span><br><span class=\"line\">              shotIndex = heightIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">          item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * shotIndex  <span class=\"comment\">// 设置最小高度列的左偏移</span></span><br><span class=\"line\">          item.<span class=\"property\">top</span> = shotHeight + <span class=\"number\">10</span>  <span class=\"comment\">// 给最小高度列下边 并留10px 间距</span></span><br><span class=\"line\"></span><br><span class=\"line\">          renderList.<span class=\"title function_\">push</span>(item)  <span class=\"comment\">// 将元素 放到渲染数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">          heightList[shotIndex] = shotHeight + item.<span class=\"property\">height</span>  <span class=\"comment\">// 更新heightlist高度列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = <span class=\"string\">``</span></span><br><span class=\"line\"></span><br><span class=\"line\">      renderList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        result += <span class=\"string\">`&lt;div style=&quot;</span></span><br><span class=\"line\"><span class=\"string\">          height: <span class=\"subst\">$&#123;item.height&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">          background: <span class=\"subst\">$&#123;item.background&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">          left: <span class=\"subst\">$&#123;item.left&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">          top: <span class=\"subst\">$&#123;item.top&#125;</span>px&quot;&gt;&lt;/div&gt;`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>).<span class=\"property\">innerHTML</span> = result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">renderListFn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = renderListFn</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>瀑布流是我们经常用到的效果，它有一个特点就是<code>等宽不定高</code></p>\n<p>那我们如何实现一个这样的效果呢，我们一步一步来做一下</p>","more":"<p>首先我们准备容器样式和模拟数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> list =  [</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">height</span>: <span class=\"number\">300</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">background</span>: <span class=\"string\">&#x27;red&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">background</span>: <span class=\"string\">&#x27;pink&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">     ]</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>list</code>就是我们希望渲染到页面的数据，但是我们不能直接循环渲染到页面，我们需要调整调整数组顺序，计算每一项元素的位置，我们准备一个<code>renderList</code> 来盛放新数据，我们还需要准备一个<code>heightList</code>来盛放每一行的各个元素的高度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> renderList = []  <span class=\"comment\">// 用来盛放要渲染的数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> heightList = []  <span class=\"comment\">// 盛放每一行元素的高度</span></span><br></pre></td></tr></table></figure>\n\n<p>那一行到底盛放几个元素呢，我们暂定元素宽度<code>130px</code>，那就是页面宽度<code>document.body.clientWidth</code>除元素宽度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> column = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / <span class=\"number\">130</span>)  <span class=\"comment\">// 一行几列</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就是循环<code>list</code> 先丢满一整行，并记录位置<code>left</code>、<code>top</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">        item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>renderList</code>第一行数据我们准备好了，渲染到页面看下效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"string\">``</span></span><br><span class=\"line\"></span><br><span class=\"line\">renderList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    result += <span class=\"string\">`&lt;div style=&quot;</span></span><br><span class=\"line\"><span class=\"string\">        height: <span class=\"subst\">$&#123;item.height&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">        background: <span class=\"subst\">$&#123;item.background&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">        left: <span class=\"subst\">$&#123;item.left&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">        top: <span class=\"subst\">$&#123;item.top&#125;</span>px&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>).<span class=\"property\">innerHTML</span> = result</span><br></pre></td></tr></table></figure>\n\n<p>第一行搞定了😊</p>\n<p>接下来难点来了，我们需要接着循环<code>list</code>数据并找高度最小的那一列，把数据放到高度最小的下边，以此类推，直到<code>list</code>所有数据循环完毕，并每一次都放到重新计算了最小列的下边。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">        item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 数据超过第一行，就需要逐个元素去判断放置的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> shotHeight = heightList[<span class=\"number\">0</span>]  <span class=\"comment\">// 假设第一个是最小高度</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> shotIndex = <span class=\"number\">0</span>  <span class=\"comment\">// 假设最小高度的列索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        heightList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">heightItem, heightIndex</span>) =&gt;</span> &#123;  <span class=\"comment\">// 循环遍历高度列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(shotHeight &gt; heightItem) &#123;  <span class=\"comment\">// 当高度小于标识 则替换</span></span><br><span class=\"line\">                shotHeight = heightItem</span><br><span class=\"line\">                shotIndex = heightIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * shotIndex  <span class=\"comment\">// 设置最小高度列的左偏移</span></span><br><span class=\"line\">        item.<span class=\"property\">top</span> = shotHeight + <span class=\"number\">10</span>  <span class=\"comment\">// 给最小高度列下边 并留10px 间距</span></span><br><span class=\"line\"></span><br><span class=\"line\">        renderList.<span class=\"title function_\">push</span>(item)  <span class=\"comment\">// 将元素 放到渲染数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        heightList[shotIndex] = shotHeight + item.<span class=\"property\">height</span>  <span class=\"comment\">// 更新heightlist高度列表</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>再次查看效果,成功了。</p>\n<p>我们希望页面大小改变重新计算并排列，贴上完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list =  [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"attr\">height</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">          <span class=\"attr\">background</span>: <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   \t  ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">400</span>,</span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"string\">&#x27;skyblue&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">renderListFn</span> () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> renderList = []  <span class=\"comment\">// 用来盛放要渲染的数组</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> heightList = []  <span class=\"comment\">// 盛放每一行元素的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> column = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / <span class=\"number\">130</span>)  <span class=\"comment\">// 一行几列</span></span><br><span class=\"line\"></span><br><span class=\"line\">      list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; column) &#123;</span><br><span class=\"line\">          item.<span class=\"property\">top</span> = <span class=\"number\">0</span></span><br><span class=\"line\">          item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * index</span><br><span class=\"line\"></span><br><span class=\"line\">          renderList.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">          heightList.<span class=\"title function_\">push</span>(item.<span class=\"property\">height</span>)  <span class=\"comment\">// 记录下一整行各个元素的高度</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 数据超过第一行，就需要逐个元素去判断放置的位置</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> shotHeight = heightList[<span class=\"number\">0</span>]  <span class=\"comment\">// 假设第一个是最小高度</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> shotIndex = <span class=\"number\">0</span>  <span class=\"comment\">// 假设最小高度的列索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">          heightList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">heightItem, heightIndex</span>) =&gt;</span> &#123;  <span class=\"comment\">// 循环遍历高度列表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(shotHeight &gt; heightItem) &#123;  <span class=\"comment\">// 当高度小于标识 则替换</span></span><br><span class=\"line\">              shotHeight = heightItem</span><br><span class=\"line\">              shotIndex = heightIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">          item.<span class=\"property\">left</span> = <span class=\"number\">130</span> * shotIndex  <span class=\"comment\">// 设置最小高度列的左偏移</span></span><br><span class=\"line\">          item.<span class=\"property\">top</span> = shotHeight + <span class=\"number\">10</span>  <span class=\"comment\">// 给最小高度列下边 并留10px 间距</span></span><br><span class=\"line\"></span><br><span class=\"line\">          renderList.<span class=\"title function_\">push</span>(item)  <span class=\"comment\">// 将元素 放到渲染数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">          heightList[shotIndex] = shotHeight + item.<span class=\"property\">height</span>  <span class=\"comment\">// 更新heightlist高度列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = <span class=\"string\">``</span></span><br><span class=\"line\"></span><br><span class=\"line\">      renderList.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        result += <span class=\"string\">`&lt;div style=&quot;</span></span><br><span class=\"line\"><span class=\"string\">          height: <span class=\"subst\">$&#123;item.height&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">          background: <span class=\"subst\">$&#123;item.background&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">          left: <span class=\"subst\">$&#123;item.left&#125;</span>px; </span></span><br><span class=\"line\"><span class=\"string\">          top: <span class=\"subst\">$&#123;item.top&#125;</span>px&quot;&gt;&lt;/div&gt;`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>).<span class=\"property\">innerHTML</span> = result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">renderListFn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = renderListFn</span><br></pre></td></tr></table></figure>"},{"title":"手写图片懒加载","_content":"\n图片懒加载是我们再处理图片展示，从而提升`页面性能`的一个重要手段\n\n懒加载，也就是说不会页面一打开就立即请求并展示，而是等待一会再去展示，那么等待多久呢，设置个固定的时间肯定是不对的，但是却能够感受到`懒`\n\n<!-- more -->\n\n```html\n<style>\n    li {\n        list-style: none;\n        height: 300px;\n        border: 1px solid #ccc;\n        padding: 50px 0;\n    }\n</style> \n\n<ul>\n     <li>1</li>\n     <li>2</li>\n     <li>3</li>\n     <li>4</li>\n     <li>5</li>\n</ul>\n\n<img data-src=\"https://avatars.githubusercontent.com/u/20986264?v=4\">\n\n<script>\n    const img = document.querySelector('img')\n\n    setTimeout(() => {\n        img.src = img.dataset.src  // 3秒后图片src设置成真实的url\n    }, 3000)\n</script>\n```\n\n我们发现个问题，如果用户始终不滚动页面，那图片用户是看不到的，那加载也是没有必要的，所以我们不应该设置固定\n\n我们可以这样，设置页面的`滚动事件`，监听`图片`是否要进入到页面的`可视窗口`，当滚动到将要出现图片的位置，则设置图片的`src`。\n\n```js\n const img = document.querySelector('img')\n        \n window.onscroll = function() {\n     let imgTop = img.getBoundingClientRect().top  // 图片上边框到可视窗口上边框的距离\n     let viewHeight = document.documentElement.clientHeight  // 可视窗口高度\n\n     if(imgTop <= viewHeight) {  // 将要出现到可视区域\n         img.src = img.dataset.src\n     }\n }\n```\n\n我们已经初步实现了，当图片要出现到可视窗口，再去加载。\n\n优化：这里应该加一个`节流`，当图片加载完成也应该`移除`滚动事件监听\n\n```js\nconst img = document.querySelector('img')\nlet flag = null\n\nconst delayFn = function() {\n    if(flag) clearTimeout(flag)\n\n    flag = setTimeout(() => {\n        windowScrollFn()\n        flag = null\n    }, 200)\n}\n\nconst windowScrollFn = function() {\n    const imgTop = img.getBoundingClientRect().top\n    const viewHeight = document.documentElement.clientHeight\n\n    console.log(11)\n\n    if(imgTop <= viewHeight) {\n        img.src = img.dataset.src\n\n        window.removeEventListener('scroll', delayFn)\n    }\n}\n\nwindow.addEventListener('scroll', delayFn)\n```\n\n","source":"_posts/JS/04-手写图片懒加载.md","raw":"---\ntitle: 手写图片懒加载\ntags: JS\n---\n\n图片懒加载是我们再处理图片展示，从而提升`页面性能`的一个重要手段\n\n懒加载，也就是说不会页面一打开就立即请求并展示，而是等待一会再去展示，那么等待多久呢，设置个固定的时间肯定是不对的，但是却能够感受到`懒`\n\n<!-- more -->\n\n```html\n<style>\n    li {\n        list-style: none;\n        height: 300px;\n        border: 1px solid #ccc;\n        padding: 50px 0;\n    }\n</style> \n\n<ul>\n     <li>1</li>\n     <li>2</li>\n     <li>3</li>\n     <li>4</li>\n     <li>5</li>\n</ul>\n\n<img data-src=\"https://avatars.githubusercontent.com/u/20986264?v=4\">\n\n<script>\n    const img = document.querySelector('img')\n\n    setTimeout(() => {\n        img.src = img.dataset.src  // 3秒后图片src设置成真实的url\n    }, 3000)\n</script>\n```\n\n我们发现个问题，如果用户始终不滚动页面，那图片用户是看不到的，那加载也是没有必要的，所以我们不应该设置固定\n\n我们可以这样，设置页面的`滚动事件`，监听`图片`是否要进入到页面的`可视窗口`，当滚动到将要出现图片的位置，则设置图片的`src`。\n\n```js\n const img = document.querySelector('img')\n        \n window.onscroll = function() {\n     let imgTop = img.getBoundingClientRect().top  // 图片上边框到可视窗口上边框的距离\n     let viewHeight = document.documentElement.clientHeight  // 可视窗口高度\n\n     if(imgTop <= viewHeight) {  // 将要出现到可视区域\n         img.src = img.dataset.src\n     }\n }\n```\n\n我们已经初步实现了，当图片要出现到可视窗口，再去加载。\n\n优化：这里应该加一个`节流`，当图片加载完成也应该`移除`滚动事件监听\n\n```js\nconst img = document.querySelector('img')\nlet flag = null\n\nconst delayFn = function() {\n    if(flag) clearTimeout(flag)\n\n    flag = setTimeout(() => {\n        windowScrollFn()\n        flag = null\n    }, 200)\n}\n\nconst windowScrollFn = function() {\n    const imgTop = img.getBoundingClientRect().top\n    const viewHeight = document.documentElement.clientHeight\n\n    console.log(11)\n\n    if(imgTop <= viewHeight) {\n        img.src = img.dataset.src\n\n        window.removeEventListener('scroll', delayFn)\n    }\n}\n\nwindow.addEventListener('scroll', delayFn)\n```\n\n","slug":"JS/04-手写图片懒加载","published":1,"date":"2023-03-17T13:09:00.235Z","updated":"2023-03-17T13:09:00.235Z","_id":"clf6yh1q8000e8cupg459cup5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>图片懒加载是我们再处理图片展示，从而提升<code>页面性能</code>的一个重要手段</p>\n<p>懒加载，也就是说不会页面一打开就立即请求并展示，而是等待一会再去展示，那么等待多久呢，设置个固定的时间肯定是不对的，但是却能够感受到<code>懒</code></p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">list-style</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;https://avatars.githubusercontent.com/u/20986264?v=4&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        img.<span class=\"property\">src</span> = img.<span class=\"property\">dataset</span>.<span class=\"property\">src</span>  <span class=\"comment\">// 3秒后图片src设置成真实的url</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;, <span class=\"number\">3000</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们发现个问题，如果用户始终不滚动页面，那图片用户是看不到的，那加载也是没有必要的，所以我们不应该设置固定</p>\n<p>我们可以这样，设置页面的<code>滚动事件</code>，监听<code>图片</code>是否要进入到页面的<code>可视窗口</code>，当滚动到将要出现图片的位置，则设置图片的<code>src</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onscroll</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imgTop = img.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">top</span>  <span class=\"comment\">// 图片上边框到可视窗口上边框的距离</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> viewHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>  <span class=\"comment\">// 可视窗口高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(imgTop &lt;= viewHeight) &#123;  <span class=\"comment\">// 将要出现到可视区域</span></span><br><span class=\"line\">        img.<span class=\"property\">src</span> = img.<span class=\"property\">dataset</span>.<span class=\"property\">src</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们已经初步实现了，当图片要出现到可视窗口，再去加载。</p>\n<p>优化：这里应该加一个<code>节流</code>，当图片加载完成也应该<code>移除</code>滚动事件监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> flag = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> delayFn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">clearTimeout</span>(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">    flag = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">windowScrollFn</span>()</span><br><span class=\"line\">        flag = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">200</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> windowScrollFn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> imgTop = img.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">top</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> viewHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">11</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(imgTop &lt;= viewHeight) &#123;</span><br><span class=\"line\">        img.<span class=\"property\">src</span> = img.<span class=\"property\">dataset</span>.<span class=\"property\">src</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, delayFn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, delayFn)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>图片懒加载是我们再处理图片展示，从而提升<code>页面性能</code>的一个重要手段</p>\n<p>懒加载，也就是说不会页面一打开就立即请求并展示，而是等待一会再去展示，那么等待多久呢，设置个固定的时间肯定是不对的，但是却能够感受到<code>懒</code></p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">list-style</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;https://avatars.githubusercontent.com/u/20986264?v=4&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        img.<span class=\"property\">src</span> = img.<span class=\"property\">dataset</span>.<span class=\"property\">src</span>  <span class=\"comment\">// 3秒后图片src设置成真实的url</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;, <span class=\"number\">3000</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们发现个问题，如果用户始终不滚动页面，那图片用户是看不到的，那加载也是没有必要的，所以我们不应该设置固定</p>\n<p>我们可以这样，设置页面的<code>滚动事件</code>，监听<code>图片</code>是否要进入到页面的<code>可视窗口</code>，当滚动到将要出现图片的位置，则设置图片的<code>src</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onscroll</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imgTop = img.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">top</span>  <span class=\"comment\">// 图片上边框到可视窗口上边框的距离</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> viewHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>  <span class=\"comment\">// 可视窗口高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(imgTop &lt;= viewHeight) &#123;  <span class=\"comment\">// 将要出现到可视区域</span></span><br><span class=\"line\">        img.<span class=\"property\">src</span> = img.<span class=\"property\">dataset</span>.<span class=\"property\">src</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们已经初步实现了，当图片要出现到可视窗口，再去加载。</p>\n<p>优化：这里应该加一个<code>节流</code>，当图片加载完成也应该<code>移除</code>滚动事件监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> flag = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> delayFn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">clearTimeout</span>(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">    flag = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">windowScrollFn</span>()</span><br><span class=\"line\">        flag = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">200</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> windowScrollFn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> imgTop = img.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">top</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> viewHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">11</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(imgTop &lt;= viewHeight) &#123;</span><br><span class=\"line\">        img.<span class=\"property\">src</span> = img.<span class=\"property\">dataset</span>.<span class=\"property\">src</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, delayFn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, delayFn)</span><br></pre></td></tr></table></figure>"},{"title":"手写 toy_vue (上)","_content":"\nvue 是现在比较主流的基于`MVVM`的框架，当数据改变页面就更新，页面更新数据也相应改变。\n\n```html\n<div id=\"app\">\n    <h1>\n        {{ title }}\n    </h1>\n    <input type=\"text\" v-model=\"info.address\" />\n</div>\n\n<script src=\"vue.js\"></script>\n<script>\n\tlet app = new Vue({\n        el: 'app',\n        data: {\n            title: '使用vue',\n            info: {\n                address: '石家庄'\n            }\n        }\n    })\n</script>\n```\n\n那么`vue` 是如何做到将data的数据渲染到页面，又是如何实现双向绑定呢，我们来一起做一下。\n\n<!--more-->\n\n首先创建`Vue`构造函数，然后进行data`、`options`等参数的处理\n\n另外，数据的修改需要做页面的更新，所以数据需要劫持，这样当数据修改的时候我们可以做页面更新等一系列的操作\n\n```js\nfunction Vue(options = {}) {\n  this.$options = options\n  let data = this._data = options.data\n\n  observe(data)\n}\n\nfunction Observe(data) {\n  for(let key in data) {\n    let value = data[key]\n    observe(value)\n\n    Object.defineProperty(data, key, {\n      enumerable: true,\n      get() {\n        return value\n      },\n      set(newVal) {\n        if(value === newVal) return \n\n        value = newVal\n\n        observe(newVal)\n      }\n    })\n  }\n}\n\nfunction observe(data) {\n  if(typeof data !== 'object') return \n  new Observe(data)\n}\n```\n\n我们在使用vue时，可以直接`app.title`进行数据修改，所以我们有必要做一个代理，把data对象的数据，代理到`app实例`下\n\n```js\nfunction Vue(options = {}) {\n  // ...\n\n  for(let key in data) {\n    Object.defineProperty(this, key, {\n      enumerable: true,\n      get() {\n        return data[key]\n      },\n      set(newVal) {\n        if(data[key] === newVal) return \n        data[key] = newVal\n      }\n    })\n  }\n}\n```\n\n我们已经可以对数据进行修改，并且操作数据，会有相应的`getter`和`setter`了。\n\n下一步我们需要把页面内容进行渲染，当碰到双大括号，我们利用正则进行替换，并且这里为了减少页面回流，可以使用文档碎片接受页面内容并进行处理\n\n```js\nfunction Vue(options = {}) {\n  // ...\n\n  new Compile(options.el, this)\n \n}\n\n\nfunction Compile(el, vm) {\n  let app = document.querySelector(el)\n  let fragment = document.createDocumentFragment()\n  let reg = /\\{\\{\\s*(\\S*)\\s*\\}\\}/g\n\n  while(first = app.firstChild) {\n    fragment.appendChild(first)\n  }\n\n  replace(fragment)\n\n  function replace(fragment) {\n    Array.from(fragment.childNodes).forEach(node => {\n      if(node.nodeType === 3 && reg.test(node.textContent)) {\n        let arr = RegExp.$1.split('.')\n        let val = vm\n        arr.forEach(key => val = val[key])\n\n        node.textContent = node.textContent.replace(reg, val)\n      }\n  \n      if(node.childNodes) {\n        replace(node)\n      }\n    })\n  }\n\n  app.append(fragment)\n}\n```\n\n这里已经可以将双大括号也就是小胡子语法进行替换了，但是`v-model`还没有处理，首先得是一个标签也就是`nodeType` 是1，然后标签身上得有`v-bind`属性，我们就可以给这个标签设置value了(当然这里暂时不考虑组件)。\n\n```js\nfunction replace(fragment) {\n    Array.from(fragment.childNodes).forEach(node => {\n      // ...\n \n      if(node.nodeType === 1) {\n        Array.from(node.attributes).forEach(item => {\n          if(item.name === 'v-model') {\n            let arr = item.textContent.split('.')\n            let val = vm\n\n            arr.forEach((key, index) => {\n              if(index === arr.length - 1) {\n                return  node.value = val[key]\n              }\n              val = val[key]\n            })\n            \n          }\n        })\n      }\n      if(node.childNodes) {\n        replace(node)\n      }\n    })\n  }\n```\n\n至此我们已经实现了最基本的`model`,渲染到`view`上了。\n\n但是我们修改数据`model`，并没有更新页面，这里就要使用`数据劫持`配合我们的`发布订阅模式`了。\n\n","source":"_posts/JS/05-手写toy_vue(上).md","raw":"---\ntitle: 手写 toy_vue (上)\ntags: JS\n---\n\nvue 是现在比较主流的基于`MVVM`的框架，当数据改变页面就更新，页面更新数据也相应改变。\n\n```html\n<div id=\"app\">\n    <h1>\n        {{ title }}\n    </h1>\n    <input type=\"text\" v-model=\"info.address\" />\n</div>\n\n<script src=\"vue.js\"></script>\n<script>\n\tlet app = new Vue({\n        el: 'app',\n        data: {\n            title: '使用vue',\n            info: {\n                address: '石家庄'\n            }\n        }\n    })\n</script>\n```\n\n那么`vue` 是如何做到将data的数据渲染到页面，又是如何实现双向绑定呢，我们来一起做一下。\n\n<!--more-->\n\n首先创建`Vue`构造函数，然后进行data`、`options`等参数的处理\n\n另外，数据的修改需要做页面的更新，所以数据需要劫持，这样当数据修改的时候我们可以做页面更新等一系列的操作\n\n```js\nfunction Vue(options = {}) {\n  this.$options = options\n  let data = this._data = options.data\n\n  observe(data)\n}\n\nfunction Observe(data) {\n  for(let key in data) {\n    let value = data[key]\n    observe(value)\n\n    Object.defineProperty(data, key, {\n      enumerable: true,\n      get() {\n        return value\n      },\n      set(newVal) {\n        if(value === newVal) return \n\n        value = newVal\n\n        observe(newVal)\n      }\n    })\n  }\n}\n\nfunction observe(data) {\n  if(typeof data !== 'object') return \n  new Observe(data)\n}\n```\n\n我们在使用vue时，可以直接`app.title`进行数据修改，所以我们有必要做一个代理，把data对象的数据，代理到`app实例`下\n\n```js\nfunction Vue(options = {}) {\n  // ...\n\n  for(let key in data) {\n    Object.defineProperty(this, key, {\n      enumerable: true,\n      get() {\n        return data[key]\n      },\n      set(newVal) {\n        if(data[key] === newVal) return \n        data[key] = newVal\n      }\n    })\n  }\n}\n```\n\n我们已经可以对数据进行修改，并且操作数据，会有相应的`getter`和`setter`了。\n\n下一步我们需要把页面内容进行渲染，当碰到双大括号，我们利用正则进行替换，并且这里为了减少页面回流，可以使用文档碎片接受页面内容并进行处理\n\n```js\nfunction Vue(options = {}) {\n  // ...\n\n  new Compile(options.el, this)\n \n}\n\n\nfunction Compile(el, vm) {\n  let app = document.querySelector(el)\n  let fragment = document.createDocumentFragment()\n  let reg = /\\{\\{\\s*(\\S*)\\s*\\}\\}/g\n\n  while(first = app.firstChild) {\n    fragment.appendChild(first)\n  }\n\n  replace(fragment)\n\n  function replace(fragment) {\n    Array.from(fragment.childNodes).forEach(node => {\n      if(node.nodeType === 3 && reg.test(node.textContent)) {\n        let arr = RegExp.$1.split('.')\n        let val = vm\n        arr.forEach(key => val = val[key])\n\n        node.textContent = node.textContent.replace(reg, val)\n      }\n  \n      if(node.childNodes) {\n        replace(node)\n      }\n    })\n  }\n\n  app.append(fragment)\n}\n```\n\n这里已经可以将双大括号也就是小胡子语法进行替换了，但是`v-model`还没有处理，首先得是一个标签也就是`nodeType` 是1，然后标签身上得有`v-bind`属性，我们就可以给这个标签设置value了(当然这里暂时不考虑组件)。\n\n```js\nfunction replace(fragment) {\n    Array.from(fragment.childNodes).forEach(node => {\n      // ...\n \n      if(node.nodeType === 1) {\n        Array.from(node.attributes).forEach(item => {\n          if(item.name === 'v-model') {\n            let arr = item.textContent.split('.')\n            let val = vm\n\n            arr.forEach((key, index) => {\n              if(index === arr.length - 1) {\n                return  node.value = val[key]\n              }\n              val = val[key]\n            })\n            \n          }\n        })\n      }\n      if(node.childNodes) {\n        replace(node)\n      }\n    })\n  }\n```\n\n至此我们已经实现了最基本的`model`,渲染到`view`上了。\n\n但是我们修改数据`model`，并没有更新页面，这里就要使用`数据劫持`配合我们的`发布订阅模式`了。\n\n","slug":"JS/05-手写toy_vue(上)","published":1,"date":"2023-03-17T13:09:00.235Z","updated":"2023-03-17T13:09:00.235Z","_id":"clf6yh1q9000f8cup0y4xdj40","comments":1,"layout":"post","photos":[],"link":"","content":"<p>vue 是现在比较主流的基于<code>MVVM</code>的框架，当数据改变页面就更新，页面更新数据也相应改变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;info.address&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">title</span>: <span class=\"string\">&#x27;使用vue&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">info</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">address</span>: <span class=\"string\">&#x27;石家庄&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么<code>vue</code> 是如何做到将data的数据渲染到页面，又是如何实现双向绑定呢，我们来一起做一下。</p>\n<span id=\"more\"></span>\n\n<p>首先创建<code>Vue</code>构造函数，然后进行data<code>、</code>options`等参数的处理</p>\n<p>另外，数据的修改需要做页面的更新，所以数据需要劫持，这样当数据修改的时候我们可以做页面更新等一系列的操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Vue</span>(<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span> = options</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = options.<span class=\"property\">data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">observe</span>(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Observe</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = data[key]</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value === newVal) <span class=\"keyword\">return</span> </span><br><span class=\"line\"></span><br><span class=\"line\">        value = newVal</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observe</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> data !== <span class=\"string\">&#x27;object&#x27;</span>) <span class=\"keyword\">return</span> </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Observe</span>(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在使用vue时，可以直接<code>app.title</code>进行数据修改，所以我们有必要做一个代理，把data对象的数据，代理到<code>app实例</code>下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Vue</span>(<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"variable language_\">this</span>, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[key]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data[key] === newVal) <span class=\"keyword\">return</span> </span><br><span class=\"line\">        data[key] = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们已经可以对数据进行修改，并且操作数据，会有相应的<code>getter</code>和<code>setter</code>了。</p>\n<p>下一步我们需要把页面内容进行渲染，当碰到双大括号，我们利用正则进行替换，并且这里为了减少页面回流，可以使用文档碎片接受页面内容并进行处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Vue</span>(<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Compile</span>(options.<span class=\"property\">el</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Compile</span>(<span class=\"params\">el, vm</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> app = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(el)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fragment = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createDocumentFragment</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;\\s*(\\S*)\\s*\\&#125;\\&#125;/g</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(first = app.<span class=\"property\">firstChild</span>) &#123;</span><br><span class=\"line\">    fragment.<span class=\"title function_\">appendChild</span>(first)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">replace</span>(fragment)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">replace</span>(<span class=\"params\">fragment</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(fragment.<span class=\"property\">childNodes</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">3</span> &amp;&amp; reg.<span class=\"title function_\">test</span>(node.<span class=\"property\">textContent</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arr = <span class=\"title class_\">RegExp</span>.<span class=\"property\">$1</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\">        arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> val = val[key])</span><br><span class=\"line\"></span><br><span class=\"line\">        node.<span class=\"property\">textContent</span> = node.<span class=\"property\">textContent</span>.<span class=\"title function_\">replace</span>(reg, val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.<span class=\"property\">childNodes</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">replace</span>(node)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  app.<span class=\"title function_\">append</span>(fragment)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里已经可以将双大括号也就是小胡子语法进行替换了，但是<code>v-model</code>还没有处理，首先得是一个标签也就是<code>nodeType</code> 是1，然后标签身上得有<code>v-bind</code>属性，我们就可以给这个标签设置value了(当然这里暂时不考虑组件)。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">replace</span>(<span class=\"params\">fragment</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(fragment.<span class=\"property\">childNodes</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(node.<span class=\"property\">attributes</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(item.<span class=\"property\">name</span> === <span class=\"string\">&#x27;v-model&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> arr = item.<span class=\"property\">textContent</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\"></span><br><span class=\"line\">            arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(index === arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>  node.<span class=\"property\">value</span> = val[key]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              val = val[key]</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.<span class=\"property\">childNodes</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">replace</span>(node)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此我们已经实现了最基本的<code>model</code>,渲染到<code>view</code>上了。</p>\n<p>但是我们修改数据<code>model</code>，并没有更新页面，这里就要使用<code>数据劫持</code>配合我们的<code>发布订阅模式</code>了。</p>\n","site":{"data":{}},"excerpt":"<p>vue 是现在比较主流的基于<code>MVVM</code>的框架，当数据改变页面就更新，页面更新数据也相应改变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;info.address&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">title</span>: <span class=\"string\">&#x27;使用vue&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">info</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">address</span>: <span class=\"string\">&#x27;石家庄&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么<code>vue</code> 是如何做到将data的数据渲染到页面，又是如何实现双向绑定呢，我们来一起做一下。</p>","more":"<p>首先创建<code>Vue</code>构造函数，然后进行data<code>、</code>options`等参数的处理</p>\n<p>另外，数据的修改需要做页面的更新，所以数据需要劫持，这样当数据修改的时候我们可以做页面更新等一系列的操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Vue</span>(<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span> = options</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = options.<span class=\"property\">data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">observe</span>(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Observe</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = data[key]</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value === newVal) <span class=\"keyword\">return</span> </span><br><span class=\"line\"></span><br><span class=\"line\">        value = newVal</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observe</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> data !== <span class=\"string\">&#x27;object&#x27;</span>) <span class=\"keyword\">return</span> </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Observe</span>(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在使用vue时，可以直接<code>app.title</code>进行数据修改，所以我们有必要做一个代理，把data对象的数据，代理到<code>app实例</code>下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Vue</span>(<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"variable language_\">this</span>, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[key]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data[key] === newVal) <span class=\"keyword\">return</span> </span><br><span class=\"line\">        data[key] = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们已经可以对数据进行修改，并且操作数据，会有相应的<code>getter</code>和<code>setter</code>了。</p>\n<p>下一步我们需要把页面内容进行渲染，当碰到双大括号，我们利用正则进行替换，并且这里为了减少页面回流，可以使用文档碎片接受页面内容并进行处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Vue</span>(<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Compile</span>(options.<span class=\"property\">el</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Compile</span>(<span class=\"params\">el, vm</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> app = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(el)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fragment = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createDocumentFragment</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;\\s*(\\S*)\\s*\\&#125;\\&#125;/g</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(first = app.<span class=\"property\">firstChild</span>) &#123;</span><br><span class=\"line\">    fragment.<span class=\"title function_\">appendChild</span>(first)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">replace</span>(fragment)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">replace</span>(<span class=\"params\">fragment</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(fragment.<span class=\"property\">childNodes</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">3</span> &amp;&amp; reg.<span class=\"title function_\">test</span>(node.<span class=\"property\">textContent</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arr = <span class=\"title class_\">RegExp</span>.<span class=\"property\">$1</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\">        arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> val = val[key])</span><br><span class=\"line\"></span><br><span class=\"line\">        node.<span class=\"property\">textContent</span> = node.<span class=\"property\">textContent</span>.<span class=\"title function_\">replace</span>(reg, val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.<span class=\"property\">childNodes</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">replace</span>(node)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  app.<span class=\"title function_\">append</span>(fragment)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里已经可以将双大括号也就是小胡子语法进行替换了，但是<code>v-model</code>还没有处理，首先得是一个标签也就是<code>nodeType</code> 是1，然后标签身上得有<code>v-bind</code>属性，我们就可以给这个标签设置value了(当然这里暂时不考虑组件)。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">replace</span>(<span class=\"params\">fragment</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(fragment.<span class=\"property\">childNodes</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(node.<span class=\"property\">attributes</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(item.<span class=\"property\">name</span> === <span class=\"string\">&#x27;v-model&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> arr = item.<span class=\"property\">textContent</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\"></span><br><span class=\"line\">            arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(index === arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>  node.<span class=\"property\">value</span> = val[key]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              val = val[key]</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(node.<span class=\"property\">childNodes</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">replace</span>(node)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此我们已经实现了最基本的<code>model</code>,渲染到<code>view</code>上了。</p>\n<p>但是我们修改数据<code>model</code>，并没有更新页面，这里就要使用<code>数据劫持</code>配合我们的<code>发布订阅模式</code>了。</p>"},{"title":"手写 toy_vue (下)","_content":"\n我们已经可以将数据编译到页面上，但是数据改变不能影响页面的从新编译，所以要在数据修改时，也就是`setter`中，进行事件的发布，在`getter`时进行事件的监听。这里肯定需要用到`发布订阅`，所以先抛开其他，我们先实现一个`发布订阅`\n\n```js\nfunction Dep() {\n  this.list = []\n}\n\nDep.prototype.addSub = function(sub) {\n  this.list.push(sub)\n}\n\nDep.prototype.notify = function() {\n  this.list.forEach(sub => {\n    sub.update()\n  })\n}\n\nfunction Watcher(fn) {\n  this.fn = fn\n}\n\nWatcher.prototype.update = function() {\n  this.fn()\n}\n```\n\n<!--more-->\n\n当我们编译页面时，应该实例化一个Watcher,并将实例缓存到`list`列表中\n\n```js\nfunction Compile() {\n    if(node.nodeType === 3 && reg.test(node.textContent)) {\n        let text = node.textContent  // 缓存一下最初的内容\n     // ...\n     new Watcher(function(newVal) {\n         node.textContent = text.replace(reg, newVal)  // 这里要拿到修改后的新数据\n     })\n \t}\n} \n```\n\n这里需要注意，在调用watcher的函数时，需要传入新修改的值，所以这里要想办法让`update`里能计算出最新的值，所以在实例化的时候，要把计算前需要的数据传递到watcher实例下:\n\n```js\nfunction Compile() {\n    if(node.nodeType === 3 && reg.test(node.textContent)) {\n     // ...\n        \n     // vm: vue实例 有所有的数据\n     // RegExp.$1: 提取分组的数据的key  \n     new Watcher(vm, RegExp.$1,function(newVal) {\n         node.textContent = node.textContent.replace(reg, newVal)  // 这里要拿到修改后的新数据\n     })\n \t}\n} \n```\n\n那我们还需要改造`Watcher`构造函数了，这样`update`就可以通过`this`访问到数据了\n\n```js\nfunction Watcher(vm, expression, fn) {\n  this.vm = vm\n  this.expression = expression\n  this.fn = fn\n  \n}\n```\n\n这里我们不仅仅需要处理字段，还应该将这一次的 `watcher实例` 存储到`list`缓存列表，这样之后修改数据，才能执行`watcher实例`的`update`函数\n\n```js\nfunction Watcher(vm, expression, fn) {\n  this.vm = vm\n  this.expression = expression\n  this.fn = fn\n\n  Dep.target = this\n\n  let val = vm\n  expression.split('.').forEach(key => val[key])  // 这里在读取数据所以回触发数据的getter\n\n  Dep.target = null\n\n}\n```\n\n由于我们在`val[key]`的时候会读取数据，所以会触发`getter`，那么就可以将 `Dep.target`,也就是`watcher实例` 存到`list`缓存列表,，在设置值的时候我们去触发`notify`，让缓存列表的`update`都执行。\n\n```js\nfunction Observe(data) {\n  let dep = new Dep()\n  for(let key in data) {\n    let value = data[key]\n    observe(value)\n\n    Object.defineProperty(data, key, {\n      enumerable: true,\n      get() {\n        Dep.target && dep.addSub(Dep.target)\n\n        return value\n      },\n      set(newVal) {\n        if(value === newVal) return \n\n        value = newVal\n\n        observe(newVal)\n        dep.notify() \n      }\n    })\n  }\n}\n```\n\n到这里，我们已经可以修改内容，并实现页面更新了，但是`v-model`我们还没处理，当`nodeType`是1,并且有`v-model`属性我们也需要进行数据的缓存，以响应数据，我们还需要注册`input`事件，监听输入内容，同步到`model`数据里。\n\n```js\nfunction Compile() {\n    // ...\n    if(node.nodeType === 1) {\n       Array.from(node.attributes).forEach(item => {\n           if(item.name === 'v-model') {\n               let arr = item.textContent.split('.')\n               let val = vm\n\n               arr.forEach((key, index) => {\n                   if(index === arr.length - 1) {\n                       new Watcher(vm, item.textContent, function(newVal) {\n                           node.value = val[key]\n                       })\n                       return node.value = val[key]\n                   }\n                   val = val[key]\n               })\n\n               node.addEventListener('input', e => {\n                   let val = vm\n                   arr.forEach((key, index) => {\n                       if(index === arr.length - 1) {\n                           return val[key] = e.target.value\n                       }\n                       val = val[key]\n                   })\n               })\n\n           }\n       })\n   }\n}  \n```\n\n这样我们就彻底完成了一个`toy_vue`。","source":"_posts/JS/06-手写toy_vue(下).md","raw":"---\ntitle: 手写 toy_vue (下)\ntags: JS\n---\n\n我们已经可以将数据编译到页面上，但是数据改变不能影响页面的从新编译，所以要在数据修改时，也就是`setter`中，进行事件的发布，在`getter`时进行事件的监听。这里肯定需要用到`发布订阅`，所以先抛开其他，我们先实现一个`发布订阅`\n\n```js\nfunction Dep() {\n  this.list = []\n}\n\nDep.prototype.addSub = function(sub) {\n  this.list.push(sub)\n}\n\nDep.prototype.notify = function() {\n  this.list.forEach(sub => {\n    sub.update()\n  })\n}\n\nfunction Watcher(fn) {\n  this.fn = fn\n}\n\nWatcher.prototype.update = function() {\n  this.fn()\n}\n```\n\n<!--more-->\n\n当我们编译页面时，应该实例化一个Watcher,并将实例缓存到`list`列表中\n\n```js\nfunction Compile() {\n    if(node.nodeType === 3 && reg.test(node.textContent)) {\n        let text = node.textContent  // 缓存一下最初的内容\n     // ...\n     new Watcher(function(newVal) {\n         node.textContent = text.replace(reg, newVal)  // 这里要拿到修改后的新数据\n     })\n \t}\n} \n```\n\n这里需要注意，在调用watcher的函数时，需要传入新修改的值，所以这里要想办法让`update`里能计算出最新的值，所以在实例化的时候，要把计算前需要的数据传递到watcher实例下:\n\n```js\nfunction Compile() {\n    if(node.nodeType === 3 && reg.test(node.textContent)) {\n     // ...\n        \n     // vm: vue实例 有所有的数据\n     // RegExp.$1: 提取分组的数据的key  \n     new Watcher(vm, RegExp.$1,function(newVal) {\n         node.textContent = node.textContent.replace(reg, newVal)  // 这里要拿到修改后的新数据\n     })\n \t}\n} \n```\n\n那我们还需要改造`Watcher`构造函数了，这样`update`就可以通过`this`访问到数据了\n\n```js\nfunction Watcher(vm, expression, fn) {\n  this.vm = vm\n  this.expression = expression\n  this.fn = fn\n  \n}\n```\n\n这里我们不仅仅需要处理字段，还应该将这一次的 `watcher实例` 存储到`list`缓存列表，这样之后修改数据，才能执行`watcher实例`的`update`函数\n\n```js\nfunction Watcher(vm, expression, fn) {\n  this.vm = vm\n  this.expression = expression\n  this.fn = fn\n\n  Dep.target = this\n\n  let val = vm\n  expression.split('.').forEach(key => val[key])  // 这里在读取数据所以回触发数据的getter\n\n  Dep.target = null\n\n}\n```\n\n由于我们在`val[key]`的时候会读取数据，所以会触发`getter`，那么就可以将 `Dep.target`,也就是`watcher实例` 存到`list`缓存列表,，在设置值的时候我们去触发`notify`，让缓存列表的`update`都执行。\n\n```js\nfunction Observe(data) {\n  let dep = new Dep()\n  for(let key in data) {\n    let value = data[key]\n    observe(value)\n\n    Object.defineProperty(data, key, {\n      enumerable: true,\n      get() {\n        Dep.target && dep.addSub(Dep.target)\n\n        return value\n      },\n      set(newVal) {\n        if(value === newVal) return \n\n        value = newVal\n\n        observe(newVal)\n        dep.notify() \n      }\n    })\n  }\n}\n```\n\n到这里，我们已经可以修改内容，并实现页面更新了，但是`v-model`我们还没处理，当`nodeType`是1,并且有`v-model`属性我们也需要进行数据的缓存，以响应数据，我们还需要注册`input`事件，监听输入内容，同步到`model`数据里。\n\n```js\nfunction Compile() {\n    // ...\n    if(node.nodeType === 1) {\n       Array.from(node.attributes).forEach(item => {\n           if(item.name === 'v-model') {\n               let arr = item.textContent.split('.')\n               let val = vm\n\n               arr.forEach((key, index) => {\n                   if(index === arr.length - 1) {\n                       new Watcher(vm, item.textContent, function(newVal) {\n                           node.value = val[key]\n                       })\n                       return node.value = val[key]\n                   }\n                   val = val[key]\n               })\n\n               node.addEventListener('input', e => {\n                   let val = vm\n                   arr.forEach((key, index) => {\n                       if(index === arr.length - 1) {\n                           return val[key] = e.target.value\n                       }\n                       val = val[key]\n                   })\n               })\n\n           }\n       })\n   }\n}  \n```\n\n这样我们就彻底完成了一个`toy_vue`。","slug":"JS/06-手写toy_vue(下)","published":1,"date":"2023-03-17T13:09:00.235Z","updated":"2023-03-17T13:09:00.235Z","_id":"clf6yh1qa000i8cupdtdad8kb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们已经可以将数据编译到页面上，但是数据改变不能影响页面的从新编译，所以要在数据修改时，也就是<code>setter</code>中，进行事件的发布，在<code>getter</code>时进行事件的监听。这里肯定需要用到<code>发布订阅</code>，所以先抛开其他，我们先实现一个<code>发布订阅</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Dep</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dep</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">addSub</span> = <span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(sub)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dep</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">notify</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">    sub.<span class=\"title function_\">update</span>()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Watcher</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Watcher</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">update</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>当我们编译页面时，应该实例化一个Watcher,并将实例缓存到<code>list</code>列表中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Compile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">3</span> &amp;&amp; reg.<span class=\"title function_\">test</span>(node.<span class=\"property\">textContent</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> text = node.<span class=\"property\">textContent</span>  <span class=\"comment\">// 缓存一下最初的内容</span></span><br><span class=\"line\">     <span class=\"comment\">// ...</span></span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(<span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">         node.<span class=\"property\">textContent</span> = text.<span class=\"title function_\">replace</span>(reg, newVal)  <span class=\"comment\">// 这里要拿到修改后的新数据</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意，在调用watcher的函数时，需要传入新修改的值，所以这里要想办法让<code>update</code>里能计算出最新的值，所以在实例化的时候，要把计算前需要的数据传递到watcher实例下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Compile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">3</span> &amp;&amp; reg.<span class=\"title function_\">test</span>(node.<span class=\"property\">textContent</span>)) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// ...</span></span><br><span class=\"line\">        </span><br><span class=\"line\">     <span class=\"comment\">// vm: vue实例 有所有的数据</span></span><br><span class=\"line\">     <span class=\"comment\">// RegExp.$1: 提取分组的数据的key  </span></span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, <span class=\"title class_\">RegExp</span>.<span class=\"property\">$1</span>,<span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">         node.<span class=\"property\">textContent</span> = node.<span class=\"property\">textContent</span>.<span class=\"title function_\">replace</span>(reg, newVal)  <span class=\"comment\">// 这里要拿到修改后的新数据</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>那我们还需要改造<code>Watcher</code>构造函数了，这样<code>update</code>就可以通过<code>this</code>访问到数据了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Watcher</span>(<span class=\"params\">vm, expression, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">expression</span> = expression</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们不仅仅需要处理字段，还应该将这一次的 <code>watcher实例</code> 存储到<code>list</code>缓存列表，这样之后修改数据，才能执行<code>watcher实例</code>的<code>update</code>函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Watcher</span>(<span class=\"params\">vm, expression, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">expression</span> = expression</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\">  expression.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> val[key])  <span class=\"comment\">// 这里在读取数据所以回触发数据的getter</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们在<code>val[key]</code>的时候会读取数据，所以会触发<code>getter</code>，那么就可以将 <code>Dep.target</code>,也就是<code>watcher实例</code> 存到<code>list</code>缓存列表,，在设置值的时候我们去触发<code>notify</code>，让缓存列表的<code>update</code>都执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Observe</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = data[key]</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> &amp;&amp; dep.<span class=\"title function_\">addSub</span>(<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value === newVal) <span class=\"keyword\">return</span> </span><br><span class=\"line\"></span><br><span class=\"line\">        value = newVal</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">        dep.<span class=\"title function_\">notify</span>() </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里，我们已经可以修改内容，并实现页面更新了，但是<code>v-model</code>我们还没处理，当<code>nodeType</code>是1,并且有<code>v-model</code>属性我们也需要进行数据的缓存，以响应数据，我们还需要注册<code>input</code>事件，监听输入内容，同步到<code>model</code>数据里。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Compile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(node.<span class=\"property\">attributes</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(item.<span class=\"property\">name</span> === <span class=\"string\">&#x27;v-model&#x27;</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">let</span> arr = item.<span class=\"property\">textContent</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">               <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\"></span><br><span class=\"line\">               arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(index === arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, item.<span class=\"property\">textContent</span>, <span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">                           node.<span class=\"property\">value</span> = val[key]</span><br><span class=\"line\">                       &#125;)</span><br><span class=\"line\">                       <span class=\"keyword\">return</span> node.<span class=\"property\">value</span> = val[key]</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   val = val[key]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">               node.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\">                   arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span>(index === arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                           <span class=\"keyword\">return</span> val[key] = e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       val = val[key]</span><br><span class=\"line\">                   &#125;)</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>这样我们就彻底完成了一个<code>toy_vue</code>。</p>\n","site":{"data":{}},"excerpt":"<p>我们已经可以将数据编译到页面上，但是数据改变不能影响页面的从新编译，所以要在数据修改时，也就是<code>setter</code>中，进行事件的发布，在<code>getter</code>时进行事件的监听。这里肯定需要用到<code>发布订阅</code>，所以先抛开其他，我们先实现一个<code>发布订阅</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Dep</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dep</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">addSub</span> = <span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(sub)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dep</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">notify</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">    sub.<span class=\"title function_\">update</span>()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Watcher</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Watcher</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">update</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>当我们编译页面时，应该实例化一个Watcher,并将实例缓存到<code>list</code>列表中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Compile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">3</span> &amp;&amp; reg.<span class=\"title function_\">test</span>(node.<span class=\"property\">textContent</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> text = node.<span class=\"property\">textContent</span>  <span class=\"comment\">// 缓存一下最初的内容</span></span><br><span class=\"line\">     <span class=\"comment\">// ...</span></span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(<span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">         node.<span class=\"property\">textContent</span> = text.<span class=\"title function_\">replace</span>(reg, newVal)  <span class=\"comment\">// 这里要拿到修改后的新数据</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意，在调用watcher的函数时，需要传入新修改的值，所以这里要想办法让<code>update</code>里能计算出最新的值，所以在实例化的时候，要把计算前需要的数据传递到watcher实例下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Compile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">3</span> &amp;&amp; reg.<span class=\"title function_\">test</span>(node.<span class=\"property\">textContent</span>)) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// ...</span></span><br><span class=\"line\">        </span><br><span class=\"line\">     <span class=\"comment\">// vm: vue实例 有所有的数据</span></span><br><span class=\"line\">     <span class=\"comment\">// RegExp.$1: 提取分组的数据的key  </span></span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, <span class=\"title class_\">RegExp</span>.<span class=\"property\">$1</span>,<span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">         node.<span class=\"property\">textContent</span> = node.<span class=\"property\">textContent</span>.<span class=\"title function_\">replace</span>(reg, newVal)  <span class=\"comment\">// 这里要拿到修改后的新数据</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>那我们还需要改造<code>Watcher</code>构造函数了，这样<code>update</code>就可以通过<code>this</code>访问到数据了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Watcher</span>(<span class=\"params\">vm, expression, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">expression</span> = expression</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们不仅仅需要处理字段，还应该将这一次的 <code>watcher实例</code> 存储到<code>list</code>缓存列表，这样之后修改数据，才能执行<code>watcher实例</code>的<code>update</code>函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Watcher</span>(<span class=\"params\">vm, expression, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">expression</span> = expression</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\">  expression.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> val[key])  <span class=\"comment\">// 这里在读取数据所以回触发数据的getter</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们在<code>val[key]</code>的时候会读取数据，所以会触发<code>getter</code>，那么就可以将 <code>Dep.target</code>,也就是<code>watcher实例</code> 存到<code>list</code>缓存列表,，在设置值的时候我们去触发<code>notify</code>，让缓存列表的<code>update</code>都执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Observe</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = data[key]</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> &amp;&amp; dep.<span class=\"title function_\">addSub</span>(<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value === newVal) <span class=\"keyword\">return</span> </span><br><span class=\"line\"></span><br><span class=\"line\">        value = newVal</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">        dep.<span class=\"title function_\">notify</span>() </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里，我们已经可以修改内容，并实现页面更新了，但是<code>v-model</code>我们还没处理，当<code>nodeType</code>是1,并且有<code>v-model</code>属性我们也需要进行数据的缓存，以响应数据，我们还需要注册<code>input</code>事件，监听输入内容，同步到<code>model</code>数据里。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Compile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(node.<span class=\"property\">attributes</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(item.<span class=\"property\">name</span> === <span class=\"string\">&#x27;v-model&#x27;</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">let</span> arr = item.<span class=\"property\">textContent</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">               <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\"></span><br><span class=\"line\">               arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(index === arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, item.<span class=\"property\">textContent</span>, <span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">                           node.<span class=\"property\">value</span> = val[key]</span><br><span class=\"line\">                       &#125;)</span><br><span class=\"line\">                       <span class=\"keyword\">return</span> node.<span class=\"property\">value</span> = val[key]</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   val = val[key]</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">               node.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">let</span> val = vm</span><br><span class=\"line\">                   arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span>(index === arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                           <span class=\"keyword\">return</span> val[key] = e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       val = val[key]</span><br><span class=\"line\">                   &#125;)</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>这样我们就彻底完成了一个<code>toy_vue</code>。</p>"},{"title":"手写 new","_content":"\n我们先写一段构造函数创建实例的代码感受下`new`\n\n```js\nfunction Person(uname, address) {\n    this.uname = uname\n    this.address = address\n}\n\nPerson.prototype.sayHi = function() {\n    console.log(`你好, 我是${this.uname}, 我来自${this.address}`)\n}\n\nlet p = new Person('张三', '石家庄')\nconsole.log(p.address)  // 石家庄\np.sayHi()  // 你好, 我是张三, 我来自石家庄\n```\n\n通过打印和分析，我们可以知道`new`做了这几件事\n\n1. 创建了新对象\n2. 将 `Person`的属性添加到新对象上\n3. 继承`Person`原型对象上的方法\n4. 返回新对象\n\n<!--more-->\n\n因为`new`是关键字，我们这里就模拟一个 `createFactory`方法， `Person`当成参数传递进去\n\n```js\nfunction createFactory(obj, ...rest) {\n    // 创建一个对象，并将对象的原型对象指向 obj的原型对象\n   \t// 既 newObj.__proto__ = obj.prototype = Person.prototype\n    let newObj = Object.create(obj.prototype)\n\n    // 执行Person函数，将this指向 newObj 并传递参数\n    obj.apply(newObj, rest)\n\n    //\t将新对象返回\n    return newObj\n}\n```\n\n当然这里用了一些ES6语法，我们也可以使用ES3的方式实现一下\n\n```js\nfunction createFactory() {\n    let newObj = new Object()\n\n    // 取出 Person函数，并赋值给fn, arguments伪数组第一项移除\n    let fn = [].shift.apply(arguments)\n\n    // 将Person的原型对象 赋值给 新对象的原型\n    newObj.__proto__ = fn.prototype\n\n    // 将Person执行，并传递参数\n    fn.apply(newObj, arguments)\n\n    return newObj\n}\n```\n\n这样我们就实现了`new`的基本操作，😊\n\n但是没完呢，我们看下如下代码：\n\n```js\n// test 1\nfunction Person(uname, address) {\n    this.uname = uname\n    this.address = address\n\n    return { age: 18 }\n}\nlet p = new Person('张三', '石家庄')\nconsole.log(p)  // {age: 18}\n\n// test 2\nfunction Person(uname, address) {\n    this.uname = uname\n    this.address = address\n\n    return 'hello'\n}\nlet p = new Person('张三', '石家庄')\nconsole.log(p)  // {uname: '张三', address: '石家庄'}\n```\n\n这里我们看到，之前的结论其实不完美\n\n1. 创建了新对象\n2. 将 `Person`的属性添加到新对象上\n3. 继承`Person`原型对象上的方法\n4. 判断`Person`的**有返回值**且是**对象**，则返回对象，否则返回新对象\n\n改造代码如下：\n\n```js\nfunction createFactory(obj, ...rest) {\n    // 创建一个对象，并将对象的原型对象指向 obj的原型对象\n   \t// 既 newObj.__proto__ = obj.prototype = Person.prototype\n    let newObj = Object.create(obj.prototype)\n\n    // 执行Person函数，将this指向 newObj 并传递参数\n    let result = obj.apply(newObj, rest)\n\n    //\t判断result返回值是对象则返回对象， 否则返回 newObj\n    return (typeof result === 'object' && result !== null) ? result : newObj\n}\n```\n\nok，另一种也是加上判断就可以，这里我们就不写了，那就酱紫，告辞。\n\n","source":"_posts/JS/08-手写 new.md","raw":"---\ntitle: 手写 new\ntags: JS\n---\n\n我们先写一段构造函数创建实例的代码感受下`new`\n\n```js\nfunction Person(uname, address) {\n    this.uname = uname\n    this.address = address\n}\n\nPerson.prototype.sayHi = function() {\n    console.log(`你好, 我是${this.uname}, 我来自${this.address}`)\n}\n\nlet p = new Person('张三', '石家庄')\nconsole.log(p.address)  // 石家庄\np.sayHi()  // 你好, 我是张三, 我来自石家庄\n```\n\n通过打印和分析，我们可以知道`new`做了这几件事\n\n1. 创建了新对象\n2. 将 `Person`的属性添加到新对象上\n3. 继承`Person`原型对象上的方法\n4. 返回新对象\n\n<!--more-->\n\n因为`new`是关键字，我们这里就模拟一个 `createFactory`方法， `Person`当成参数传递进去\n\n```js\nfunction createFactory(obj, ...rest) {\n    // 创建一个对象，并将对象的原型对象指向 obj的原型对象\n   \t// 既 newObj.__proto__ = obj.prototype = Person.prototype\n    let newObj = Object.create(obj.prototype)\n\n    // 执行Person函数，将this指向 newObj 并传递参数\n    obj.apply(newObj, rest)\n\n    //\t将新对象返回\n    return newObj\n}\n```\n\n当然这里用了一些ES6语法，我们也可以使用ES3的方式实现一下\n\n```js\nfunction createFactory() {\n    let newObj = new Object()\n\n    // 取出 Person函数，并赋值给fn, arguments伪数组第一项移除\n    let fn = [].shift.apply(arguments)\n\n    // 将Person的原型对象 赋值给 新对象的原型\n    newObj.__proto__ = fn.prototype\n\n    // 将Person执行，并传递参数\n    fn.apply(newObj, arguments)\n\n    return newObj\n}\n```\n\n这样我们就实现了`new`的基本操作，😊\n\n但是没完呢，我们看下如下代码：\n\n```js\n// test 1\nfunction Person(uname, address) {\n    this.uname = uname\n    this.address = address\n\n    return { age: 18 }\n}\nlet p = new Person('张三', '石家庄')\nconsole.log(p)  // {age: 18}\n\n// test 2\nfunction Person(uname, address) {\n    this.uname = uname\n    this.address = address\n\n    return 'hello'\n}\nlet p = new Person('张三', '石家庄')\nconsole.log(p)  // {uname: '张三', address: '石家庄'}\n```\n\n这里我们看到，之前的结论其实不完美\n\n1. 创建了新对象\n2. 将 `Person`的属性添加到新对象上\n3. 继承`Person`原型对象上的方法\n4. 判断`Person`的**有返回值**且是**对象**，则返回对象，否则返回新对象\n\n改造代码如下：\n\n```js\nfunction createFactory(obj, ...rest) {\n    // 创建一个对象，并将对象的原型对象指向 obj的原型对象\n   \t// 既 newObj.__proto__ = obj.prototype = Person.prototype\n    let newObj = Object.create(obj.prototype)\n\n    // 执行Person函数，将this指向 newObj 并传递参数\n    let result = obj.apply(newObj, rest)\n\n    //\t判断result返回值是对象则返回对象， 否则返回 newObj\n    return (typeof result === 'object' && result !== null) ? result : newObj\n}\n```\n\nok，另一种也是加上判断就可以，这里我们就不写了，那就酱紫，告辞。\n\n","slug":"JS/08-手写 new","published":1,"date":"2023-03-17T13:09:00.236Z","updated":"2023-03-17T13:09:00.236Z","_id":"clf6yh1qb000j8cup30gn6mwc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们先写一段构造函数创建实例的代码感受下<code>new</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">uname, address</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">uname</span> = uname</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">address</span> = address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`你好, 我是<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.uname&#125;</span>, 我来自<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.address&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;石家庄&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">address</span>)  <span class=\"comment\">// 石家庄</span></span><br><span class=\"line\">p.<span class=\"title function_\">sayHi</span>()  <span class=\"comment\">// 你好, 我是张三, 我来自石家庄</span></span><br></pre></td></tr></table></figure>\n\n<p>通过打印和分析，我们可以知道<code>new</code>做了这几件事</p>\n<ol>\n<li>创建了新对象</li>\n<li>将 <code>Person</code>的属性添加到新对象上</li>\n<li>继承<code>Person</code>原型对象上的方法</li>\n<li>返回新对象</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>因为<code>new</code>是关键字，我们这里就模拟一个 <code>createFactory</code>方法， <code>Person</code>当成参数传递进去</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFactory</span>(<span class=\"params\">obj, ...rest</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个对象，并将对象的原型对象指向 obj的原型对象</span></span><br><span class=\"line\">   \t<span class=\"comment\">// 既 newObj.__proto__ = obj.prototype = Person.prototype</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newObj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行Person函数，将this指向 newObj 并传递参数</span></span><br><span class=\"line\">    obj.<span class=\"title function_\">apply</span>(newObj, rest)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//\t将新对象返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然这里用了一些ES6语法，我们也可以使用ES3的方式实现一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取出 Person函数，并赋值给fn, arguments伪数组第一项移除</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = [].<span class=\"property\">shift</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将Person的原型对象 赋值给 新对象的原型</span></span><br><span class=\"line\">    newObj.<span class=\"property\">__proto__</span> = fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将Person执行，并传递参数</span></span><br><span class=\"line\">    fn.<span class=\"title function_\">apply</span>(newObj, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就实现了<code>new</code>的基本操作，😊</p>\n<p>但是没完呢，我们看下如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test 1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">uname, address</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">uname</span> = uname</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">address</span> = address</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;石家庄&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// &#123;age: 18&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test 2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">uname, address</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">uname</span> = uname</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">address</span> = address</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;石家庄&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// &#123;uname: &#x27;张三&#x27;, address: &#x27;石家庄&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我们看到，之前的结论其实不完美</p>\n<ol>\n<li>创建了新对象</li>\n<li>将 <code>Person</code>的属性添加到新对象上</li>\n<li>继承<code>Person</code>原型对象上的方法</li>\n<li>判断<code>Person</code>的<strong>有返回值</strong>且是<strong>对象</strong>，则返回对象，否则返回新对象</li>\n</ol>\n<p>改造代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFactory</span>(<span class=\"params\">obj, ...rest</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个对象，并将对象的原型对象指向 obj的原型对象</span></span><br><span class=\"line\">   \t<span class=\"comment\">// 既 newObj.__proto__ = obj.prototype = Person.prototype</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newObj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行Person函数，将this指向 newObj 并传递参数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = obj.<span class=\"title function_\">apply</span>(newObj, rest)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//\t判断result返回值是对象则返回对象， 否则返回 newObj</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; result !== <span class=\"literal\">null</span>) ? result : newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ok，另一种也是加上判断就可以，这里我们就不写了，那就酱紫，告辞。</p>\n","site":{"data":{}},"excerpt":"<p>我们先写一段构造函数创建实例的代码感受下<code>new</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">uname, address</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">uname</span> = uname</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">address</span> = address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`你好, 我是<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.uname&#125;</span>, 我来自<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.address&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;石家庄&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">address</span>)  <span class=\"comment\">// 石家庄</span></span><br><span class=\"line\">p.<span class=\"title function_\">sayHi</span>()  <span class=\"comment\">// 你好, 我是张三, 我来自石家庄</span></span><br></pre></td></tr></table></figure>\n\n<p>通过打印和分析，我们可以知道<code>new</code>做了这几件事</p>\n<ol>\n<li>创建了新对象</li>\n<li>将 <code>Person</code>的属性添加到新对象上</li>\n<li>继承<code>Person</code>原型对象上的方法</li>\n<li>返回新对象</li>\n</ol>","more":"<p>因为<code>new</code>是关键字，我们这里就模拟一个 <code>createFactory</code>方法， <code>Person</code>当成参数传递进去</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFactory</span>(<span class=\"params\">obj, ...rest</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个对象，并将对象的原型对象指向 obj的原型对象</span></span><br><span class=\"line\">   \t<span class=\"comment\">// 既 newObj.__proto__ = obj.prototype = Person.prototype</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newObj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行Person函数，将this指向 newObj 并传递参数</span></span><br><span class=\"line\">    obj.<span class=\"title function_\">apply</span>(newObj, rest)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//\t将新对象返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然这里用了一些ES6语法，我们也可以使用ES3的方式实现一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取出 Person函数，并赋值给fn, arguments伪数组第一项移除</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = [].<span class=\"property\">shift</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将Person的原型对象 赋值给 新对象的原型</span></span><br><span class=\"line\">    newObj.<span class=\"property\">__proto__</span> = fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将Person执行，并传递参数</span></span><br><span class=\"line\">    fn.<span class=\"title function_\">apply</span>(newObj, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就实现了<code>new</code>的基本操作，😊</p>\n<p>但是没完呢，我们看下如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test 1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">uname, address</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">uname</span> = uname</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">address</span> = address</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;石家庄&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// &#123;age: 18&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test 2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">uname, address</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">uname</span> = uname</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">address</span> = address</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;石家庄&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)  <span class=\"comment\">// &#123;uname: &#x27;张三&#x27;, address: &#x27;石家庄&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我们看到，之前的结论其实不完美</p>\n<ol>\n<li>创建了新对象</li>\n<li>将 <code>Person</code>的属性添加到新对象上</li>\n<li>继承<code>Person</code>原型对象上的方法</li>\n<li>判断<code>Person</code>的<strong>有返回值</strong>且是<strong>对象</strong>，则返回对象，否则返回新对象</li>\n</ol>\n<p>改造代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFactory</span>(<span class=\"params\">obj, ...rest</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个对象，并将对象的原型对象指向 obj的原型对象</span></span><br><span class=\"line\">   \t<span class=\"comment\">// 既 newObj.__proto__ = obj.prototype = Person.prototype</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newObj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行Person函数，将this指向 newObj 并传递参数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = obj.<span class=\"title function_\">apply</span>(newObj, rest)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//\t判断result返回值是对象则返回对象， 否则返回 newObj</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; result !== <span class=\"literal\">null</span>) ? result : newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ok，另一种也是加上判断就可以，这里我们就不写了，那就酱紫，告辞。</p>"},{"title":"手写 call&bind&apply","_content":"\n在 JS 中提到修改 `this`指向，首先想到的就是 `bind`、`call`、`apply`。\n\n面试也经常会问到三个的区别，那我们就一起来边使用边手动书写一下吧。\n\n```js\nlet obj = {\n\taddress: '石家庄'\n}\n\nvar address = '北京'\n\nlet fn = function(num1, num2) {\n\tconsole.log(this.address, num1, num2)\n}\n\nfn(1, 2) // 北京 1 2\nfn.call(obj, 11, 22) // 石家庄 11 22\n```\n\n通过上边案例我们可以发现call做了这几件事\n\n1. 修改了 `fn` 的 `this`指向\n2. 传递了参数\n3. 调用了`fn`函数\n\n<!--more-->\n\n那我们也试着在`Function`的原型对象上挂载一个`myCall`\n\n```js\nFunction.prototype.myCall = function(context){\n    // context 是 传递的参数 这里指向 obj\n    // this 是函数的调用者 这里指向 fn\n    // 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数\n    context.fn = this  \n    // 因为外部相当于调用了fn，所以这里我们也调用一下\n    const result = context.fn()\n    // context.fn属性只是暂用一下，应该删除掉\n    delete context.fn\n    \n    return result\n}\n```\n\n我们实现了函数调用，并且调用者指向了 `context`也就是`obj`了\n\n```js\nlet obj = {\n    address: '石家庄'\n}\n\nvar address = '北京'\n\nlet fn = function() {\n    console.log(this.address)\n}\n\nFunction.prototype.myCall = function(context){\n    // context 是 传递的参数 这里指向 obj\n    // this 是函数的调用者 这里指向 fn\n    // 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数\n    context.fn = this  \n    // 因为外部相当于调用了fn，所以这里我们也调用一下\n    const result = context.fn()\n    // context.fn属性只是暂用一下，应该删除掉\n    delete context.fn\n    \n    return result\n}\n\nfn.myCall(obj) // 石家庄\n```\n\n这里需要注意 call传递参数时传递多个，而apply是传递一个数组\n\n```js\nFunction.prototype.myCall = function(context){\n    // context 是 传递的参数 这里指向 obj\n    // this 是函数的调用者 这里指向 fn\n    // 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数\n    context.fn = this  \n    // 准备用户传递过来的参数\n    let arr = []\n    for(let i = 1; i < arguments.length; i++) {\n        arr.push(arguments[i])\n    }\n    // 在调用函数前 准备出传递的参数\n    // 因为外部相当于调用了fn，所以这里我们也调用一下\n    context.fn(...arr)\n    // context.fn属性只是暂用一下，应该删除掉\n    delete context.fn\n}\n```\n\n那apply我们只需要稍微改造就可以了\n\n```js\nFunction.prototype.myApply = function(context, args = []){\n    // context 是 传递的参数 这里指向 obj\n    // this 是函数的调用者 这里指向 fn\n    // 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数\n    context.fn = this  \n\n    // 因为外部相当于调用了fn，所以这里我们也调用一下\n    context.fn(...args)\n    // context.fn属性只是暂用一下，应该删除掉\n    delete context.fn\n}\n```\n\n最后我们来看一下`bind`\n\n```js\nlet obj = {\n    address: '石家庄'\n}\n\nlet fn = function(one, two, three) {\n    console.log(this.address, one, two, three)\n}\n\nlet fn2 = fn.bind(obj, 1, 2, 3)\n\nfn2()\n```\n\n- 修改了 `this`指向 \n- 返回的是一个函数\n- 传递多个参数\n\n所以 `bind`的返回值一定是一个函数，并且函数内，需要执行`fn`函数\n\n```js\nFunction.prototype.myBind = function(context) {\n    let fn = this\n    \n    let arr = []\n    for(let i = 1; i < arguments.length; i++) {\n        arr.push(arguments[i])\n    }\n    \n    return function() {\n        return fn.apply(context, arr)\n    }\n}\n```\n\n当然我们这里只是实现了基本的应用，当需要真实修改`this`指向时还是要使用原生JS的语法","source":"_posts/JS/07-手写 call&bind&apply.md","raw":"---\ntitle: 手写 call&bind&apply\ntags: JS\n---\n\n在 JS 中提到修改 `this`指向，首先想到的就是 `bind`、`call`、`apply`。\n\n面试也经常会问到三个的区别，那我们就一起来边使用边手动书写一下吧。\n\n```js\nlet obj = {\n\taddress: '石家庄'\n}\n\nvar address = '北京'\n\nlet fn = function(num1, num2) {\n\tconsole.log(this.address, num1, num2)\n}\n\nfn(1, 2) // 北京 1 2\nfn.call(obj, 11, 22) // 石家庄 11 22\n```\n\n通过上边案例我们可以发现call做了这几件事\n\n1. 修改了 `fn` 的 `this`指向\n2. 传递了参数\n3. 调用了`fn`函数\n\n<!--more-->\n\n那我们也试着在`Function`的原型对象上挂载一个`myCall`\n\n```js\nFunction.prototype.myCall = function(context){\n    // context 是 传递的参数 这里指向 obj\n    // this 是函数的调用者 这里指向 fn\n    // 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数\n    context.fn = this  \n    // 因为外部相当于调用了fn，所以这里我们也调用一下\n    const result = context.fn()\n    // context.fn属性只是暂用一下，应该删除掉\n    delete context.fn\n    \n    return result\n}\n```\n\n我们实现了函数调用，并且调用者指向了 `context`也就是`obj`了\n\n```js\nlet obj = {\n    address: '石家庄'\n}\n\nvar address = '北京'\n\nlet fn = function() {\n    console.log(this.address)\n}\n\nFunction.prototype.myCall = function(context){\n    // context 是 传递的参数 这里指向 obj\n    // this 是函数的调用者 这里指向 fn\n    // 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数\n    context.fn = this  \n    // 因为外部相当于调用了fn，所以这里我们也调用一下\n    const result = context.fn()\n    // context.fn属性只是暂用一下，应该删除掉\n    delete context.fn\n    \n    return result\n}\n\nfn.myCall(obj) // 石家庄\n```\n\n这里需要注意 call传递参数时传递多个，而apply是传递一个数组\n\n```js\nFunction.prototype.myCall = function(context){\n    // context 是 传递的参数 这里指向 obj\n    // this 是函数的调用者 这里指向 fn\n    // 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数\n    context.fn = this  \n    // 准备用户传递过来的参数\n    let arr = []\n    for(let i = 1; i < arguments.length; i++) {\n        arr.push(arguments[i])\n    }\n    // 在调用函数前 准备出传递的参数\n    // 因为外部相当于调用了fn，所以这里我们也调用一下\n    context.fn(...arr)\n    // context.fn属性只是暂用一下，应该删除掉\n    delete context.fn\n}\n```\n\n那apply我们只需要稍微改造就可以了\n\n```js\nFunction.prototype.myApply = function(context, args = []){\n    // context 是 传递的参数 这里指向 obj\n    // this 是函数的调用者 这里指向 fn\n    // 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数\n    context.fn = this  \n\n    // 因为外部相当于调用了fn，所以这里我们也调用一下\n    context.fn(...args)\n    // context.fn属性只是暂用一下，应该删除掉\n    delete context.fn\n}\n```\n\n最后我们来看一下`bind`\n\n```js\nlet obj = {\n    address: '石家庄'\n}\n\nlet fn = function(one, two, three) {\n    console.log(this.address, one, two, three)\n}\n\nlet fn2 = fn.bind(obj, 1, 2, 3)\n\nfn2()\n```\n\n- 修改了 `this`指向 \n- 返回的是一个函数\n- 传递多个参数\n\n所以 `bind`的返回值一定是一个函数，并且函数内，需要执行`fn`函数\n\n```js\nFunction.prototype.myBind = function(context) {\n    let fn = this\n    \n    let arr = []\n    for(let i = 1; i < arguments.length; i++) {\n        arr.push(arguments[i])\n    }\n    \n    return function() {\n        return fn.apply(context, arr)\n    }\n}\n```\n\n当然我们这里只是实现了基本的应用，当需要真实修改`this`指向时还是要使用原生JS的语法","slug":"JS/07-手写 call&bind&apply","published":1,"date":"2023-03-17T13:09:00.235Z","updated":"2023-03-17T13:09:00.235Z","_id":"clf6yh1qc000m8cup3weuc9j9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在 JS 中提到修改 <code>this</code>指向，首先想到的就是 <code>bind</code>、<code>call</code>、<code>apply</code>。</p>\n<p>面试也经常会问到三个的区别，那我们就一起来边使用边手动书写一下吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">address</span>: <span class=\"string\">&#x27;石家庄&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> address = <span class=\"string\">&#x27;北京&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">address</span>, num1, num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 北京 1 2</span></span><br><span class=\"line\">fn.<span class=\"title function_\">call</span>(obj, <span class=\"number\">11</span>, <span class=\"number\">22</span>) <span class=\"comment\">// 石家庄 11 22</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上边案例我们可以发现call做了这几件事</p>\n<ol>\n<li>修改了 <code>fn</code> 的 <code>this</code>指向</li>\n<li>传递了参数</li>\n<li>调用了<code>fn</code>函数</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>那我们也试着在<code>Function</code>的原型对象上挂载一个<code>myCall</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context 是 传递的参数 这里指向 obj</span></span><br><span class=\"line\">    <span class=\"comment\">// this 是函数的调用者 这里指向 fn</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>  </span><br><span class=\"line\">    <span class=\"comment\">// 因为外部相当于调用了fn，所以这里我们也调用一下</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = context.<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">    <span class=\"comment\">// context.fn属性只是暂用一下，应该删除掉</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们实现了函数调用，并且调用者指向了 <code>context</code>也就是<code>obj</code>了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&#x27;石家庄&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> address = <span class=\"string\">&#x27;北京&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">address</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context 是 传递的参数 这里指向 obj</span></span><br><span class=\"line\">    <span class=\"comment\">// this 是函数的调用者 这里指向 fn</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>  </span><br><span class=\"line\">    <span class=\"comment\">// 因为外部相当于调用了fn，所以这里我们也调用一下</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = context.<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">    <span class=\"comment\">// context.fn属性只是暂用一下，应该删除掉</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">myCall</span>(obj) <span class=\"comment\">// 石家庄</span></span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意 call传递参数时传递多个，而apply是传递一个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context 是 传递的参数 这里指向 obj</span></span><br><span class=\"line\">    <span class=\"comment\">// this 是函数的调用者 这里指向 fn</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>  </span><br><span class=\"line\">    <span class=\"comment\">// 准备用户传递过来的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在调用函数前 准备出传递的参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为外部相当于调用了fn，所以这里我们也调用一下</span></span><br><span class=\"line\">    context.<span class=\"title function_\">fn</span>(...arr)</span><br><span class=\"line\">    <span class=\"comment\">// context.fn属性只是暂用一下，应该删除掉</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那apply我们只需要稍微改造就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context, args = []</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context 是 传递的参数 这里指向 obj</span></span><br><span class=\"line\">    <span class=\"comment\">// this 是函数的调用者 这里指向 fn</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 因为外部相当于调用了fn，所以这里我们也调用一下</span></span><br><span class=\"line\">    context.<span class=\"title function_\">fn</span>(...args)</span><br><span class=\"line\">    <span class=\"comment\">// context.fn属性只是暂用一下，应该删除掉</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后我们来看一下<code>bind</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&#x27;石家庄&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">one, two, three</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">address</span>, one, two, three)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn2 = fn.<span class=\"title function_\">bind</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn2</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改了 <code>this</code>指向 </li>\n<li>返回的是一个函数</li>\n<li>传递多个参数</li>\n</ul>\n<p>所以 <code>bind</code>的返回值一定是一个函数，并且函数内，需要执行<code>fn</code>函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(context, arr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们这里只是实现了基本的应用，当需要真实修改<code>this</code>指向时还是要使用原生JS的语法</p>\n","site":{"data":{}},"excerpt":"<p>在 JS 中提到修改 <code>this</code>指向，首先想到的就是 <code>bind</code>、<code>call</code>、<code>apply</code>。</p>\n<p>面试也经常会问到三个的区别，那我们就一起来边使用边手动书写一下吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">address</span>: <span class=\"string\">&#x27;石家庄&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> address = <span class=\"string\">&#x27;北京&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">address</span>, num1, num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 北京 1 2</span></span><br><span class=\"line\">fn.<span class=\"title function_\">call</span>(obj, <span class=\"number\">11</span>, <span class=\"number\">22</span>) <span class=\"comment\">// 石家庄 11 22</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上边案例我们可以发现call做了这几件事</p>\n<ol>\n<li>修改了 <code>fn</code> 的 <code>this</code>指向</li>\n<li>传递了参数</li>\n<li>调用了<code>fn</code>函数</li>\n</ol>","more":"<p>那我们也试着在<code>Function</code>的原型对象上挂载一个<code>myCall</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context 是 传递的参数 这里指向 obj</span></span><br><span class=\"line\">    <span class=\"comment\">// this 是函数的调用者 这里指向 fn</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>  </span><br><span class=\"line\">    <span class=\"comment\">// 因为外部相当于调用了fn，所以这里我们也调用一下</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = context.<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">    <span class=\"comment\">// context.fn属性只是暂用一下，应该删除掉</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们实现了函数调用，并且调用者指向了 <code>context</code>也就是<code>obj</code>了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&#x27;石家庄&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> address = <span class=\"string\">&#x27;北京&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">address</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context 是 传递的参数 这里指向 obj</span></span><br><span class=\"line\">    <span class=\"comment\">// this 是函数的调用者 这里指向 fn</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>  </span><br><span class=\"line\">    <span class=\"comment\">// 因为外部相当于调用了fn，所以这里我们也调用一下</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = context.<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">    <span class=\"comment\">// context.fn属性只是暂用一下，应该删除掉</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.<span class=\"title function_\">myCall</span>(obj) <span class=\"comment\">// 石家庄</span></span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意 call传递参数时传递多个，而apply是传递一个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context 是 传递的参数 这里指向 obj</span></span><br><span class=\"line\">    <span class=\"comment\">// this 是函数的调用者 这里指向 fn</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>  </span><br><span class=\"line\">    <span class=\"comment\">// 准备用户传递过来的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在调用函数前 准备出传递的参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为外部相当于调用了fn，所以这里我们也调用一下</span></span><br><span class=\"line\">    context.<span class=\"title function_\">fn</span>(...arr)</span><br><span class=\"line\">    <span class=\"comment\">// context.fn属性只是暂用一下，应该删除掉</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那apply我们只需要稍微改造就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context, args = []</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// context 是 传递的参数 这里指向 obj</span></span><br><span class=\"line\">    <span class=\"comment\">// this 是函数的调用者 这里指向 fn</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以这句话的意思是 给 obj 增加一个属性fn,并赋值成 fn函数</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 因为外部相当于调用了fn，所以这里我们也调用一下</span></span><br><span class=\"line\">    context.<span class=\"title function_\">fn</span>(...args)</span><br><span class=\"line\">    <span class=\"comment\">// context.fn属性只是暂用一下，应该删除掉</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后我们来看一下<code>bind</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&#x27;石家庄&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">one, two, three</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">address</span>, one, two, three)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn2 = fn.<span class=\"title function_\">bind</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn2</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改了 <code>this</code>指向 </li>\n<li>返回的是一个函数</li>\n<li>传递多个参数</li>\n</ul>\n<p>所以 <code>bind</code>的返回值一定是一个函数，并且函数内，需要执行<code>fn</code>函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(context, arr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们这里只是实现了基本的应用，当需要真实修改<code>this</code>指向时还是要使用原生JS的语法</p>"},{"title":"防抖和节流","_content":"\n函数`防抖`和`节流`是我们优化高频率代码的一种手段，比如浏览器的 `resize`、`scroll` 、`mousemove`等事件在触发时，会不断的调用绑定到事件上的回调函数，极大的浪费了资源，降低前端性能。\n\n`防抖` 就是 n 秒后再执行该事件，若 n 秒内被重复触发，则重新计时。\n\n`节流` 则是  n 秒内只运行一次，若在 n秒内重复触发，则只有一次生效。\n\n<!--more-->\n\n当我们在表单输入内容并给出搜索建议列表时，如果不加限制，就需要频繁给服务器发送请求，所以这种时候我们应该时让最后一次发送请求，也就是使用`防抖`来优化。\n\n```html\n<input type=\"text\" class=\"content\" />\n\n<script>\n    let content = document.querySelector('.content')\n\n    // 如果不加限制 则输入每一个字符都会触发请求\n    content.oninput = function(e) {\n        // 发送请求\n        console.log(e.target.value)\n    }\n</script>\n```\n\n所以，这里我们可以使用`防抖`来优化减少请求次数，减轻服务器压力。\n\n```html\n<input type=\"text\" class=\"content\" />\n\n<script>\n    let content = document.querySelector('.content')\n\n    function debounce(fn, delay) {\n        let timer \n\n        return function() {\n            if(timer) clearTimeout(timer)\n\n            timer = setTimeout(() => {\n                fn.apply(this, arguments)\n            }, delay)\n        }\n    }\n\n    let fn = function(e) {\n        console.log(e.target.value)\n    }\n    content.oninput = debounce(fn, 200)\n</script>\n```\n\n当我们给元素注册了鼠标移动事件，只是简单打印，如果不加限制，则会频繁触发，所以此时我们可以使用`节流`来进行优化。\n\n```html\n<style>\n    .container {\n        width: 500px;\n        height: 500px;\n        background-color: pink;\n    }\n</style>\n\n<div class=\"container\"></div>\n\n<script>\n    function throttle(fn, delay) {\n        let timer  \n\n        return function() {\n            if(timer) return\n\n            timer = setTimeout(() => {\n                fn.apply(this, arguments)\n                timer = null\n            }, delay)\n        }\n    }\n\n    let container = document.querySelector('.container')\n\n    function fn(){\n        console.log(123)\n    }\n\n    container.onmousemove = throttle(fn, 100)\n</script>\n```\n\n我们可以看出 其实`防抖`和`节流` 其实差不多，都是使用`setTimeout` 再配合`apply`调用函数。\n\n区别在于， `防抖`是当在 n 秒内触发函数，则 `clearTimeout`清除上一次事件，开启新的定时器。\n\n`节流`的关键是 当 n 秒内触发函数，则 return，等n 秒后触发上一次事件。","source":"_posts/JS/09-防抖和节流.md","raw":"---\ntitle: 防抖和节流\ntags: JS\n---\n\n函数`防抖`和`节流`是我们优化高频率代码的一种手段，比如浏览器的 `resize`、`scroll` 、`mousemove`等事件在触发时，会不断的调用绑定到事件上的回调函数，极大的浪费了资源，降低前端性能。\n\n`防抖` 就是 n 秒后再执行该事件，若 n 秒内被重复触发，则重新计时。\n\n`节流` 则是  n 秒内只运行一次，若在 n秒内重复触发，则只有一次生效。\n\n<!--more-->\n\n当我们在表单输入内容并给出搜索建议列表时，如果不加限制，就需要频繁给服务器发送请求，所以这种时候我们应该时让最后一次发送请求，也就是使用`防抖`来优化。\n\n```html\n<input type=\"text\" class=\"content\" />\n\n<script>\n    let content = document.querySelector('.content')\n\n    // 如果不加限制 则输入每一个字符都会触发请求\n    content.oninput = function(e) {\n        // 发送请求\n        console.log(e.target.value)\n    }\n</script>\n```\n\n所以，这里我们可以使用`防抖`来优化减少请求次数，减轻服务器压力。\n\n```html\n<input type=\"text\" class=\"content\" />\n\n<script>\n    let content = document.querySelector('.content')\n\n    function debounce(fn, delay) {\n        let timer \n\n        return function() {\n            if(timer) clearTimeout(timer)\n\n            timer = setTimeout(() => {\n                fn.apply(this, arguments)\n            }, delay)\n        }\n    }\n\n    let fn = function(e) {\n        console.log(e.target.value)\n    }\n    content.oninput = debounce(fn, 200)\n</script>\n```\n\n当我们给元素注册了鼠标移动事件，只是简单打印，如果不加限制，则会频繁触发，所以此时我们可以使用`节流`来进行优化。\n\n```html\n<style>\n    .container {\n        width: 500px;\n        height: 500px;\n        background-color: pink;\n    }\n</style>\n\n<div class=\"container\"></div>\n\n<script>\n    function throttle(fn, delay) {\n        let timer  \n\n        return function() {\n            if(timer) return\n\n            timer = setTimeout(() => {\n                fn.apply(this, arguments)\n                timer = null\n            }, delay)\n        }\n    }\n\n    let container = document.querySelector('.container')\n\n    function fn(){\n        console.log(123)\n    }\n\n    container.onmousemove = throttle(fn, 100)\n</script>\n```\n\n我们可以看出 其实`防抖`和`节流` 其实差不多，都是使用`setTimeout` 再配合`apply`调用函数。\n\n区别在于， `防抖`是当在 n 秒内触发函数，则 `clearTimeout`清除上一次事件，开启新的定时器。\n\n`节流`的关键是 当 n 秒内触发函数，则 return，等n 秒后触发上一次事件。","slug":"JS/09-防抖和节流","published":1,"date":"2023-03-17T13:09:00.236Z","updated":"2023-03-17T13:09:00.236Z","_id":"clf6yh1qd000o8cup0vdi83es","comments":1,"layout":"post","photos":[],"link":"","content":"<p>函数<code>防抖</code>和<code>节流</code>是我们优化高频率代码的一种手段，比如浏览器的 <code>resize</code>、<code>scroll</code> 、<code>mousemove</code>等事件在触发时，会不断的调用绑定到事件上的回调函数，极大的浪费了资源，降低前端性能。</p>\n<p><code>防抖</code> 就是 n 秒后再执行该事件，若 n 秒内被重复触发，则重新计时。</p>\n<p><code>节流</code> 则是  n 秒内只运行一次，若在 n秒内重复触发，则只有一次生效。</p>\n<span id=\"more\"></span>\n\n<p>当我们在表单输入内容并给出搜索建议列表时，如果不加限制，就需要频繁给服务器发送请求，所以这种时候我们应该时让最后一次发送请求，也就是使用<code>防抖</code>来优化。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> content = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.content&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 如果不加限制 则输入每一个字符都会触发请求</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    content.<span class=\"property\">oninput</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 发送请求</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以，这里我们可以使用<code>防抖</code>来优化减少请求次数，减轻服务器压力。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> content = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.content&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, delay</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> timer </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(timer) <span class=\"built_in\">clearTimeout</span>(timer)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, delay)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    content.<span class=\"property\">oninput</span> = <span class=\"title function_\">debounce</span>(fn, <span class=\"number\">200</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当我们给元素注册了鼠标移动事件，只是简单打印，如果不加限制，则会频繁触发，所以此时我们可以使用<code>节流</code>来进行优化。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: pink;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> timer  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(timer) <span class=\"keyword\">return</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                timer = <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, delay)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> container = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    container.<span class=\"property\">onmousemove</span> = <span class=\"title function_\">throttle</span>(fn, <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以看出 其实<code>防抖</code>和<code>节流</code> 其实差不多，都是使用<code>setTimeout</code> 再配合<code>apply</code>调用函数。</p>\n<p>区别在于， <code>防抖</code>是当在 n 秒内触发函数，则 <code>clearTimeout</code>清除上一次事件，开启新的定时器。</p>\n<p><code>节流</code>的关键是 当 n 秒内触发函数，则 return，等n 秒后触发上一次事件。</p>\n","site":{"data":{}},"excerpt":"<p>函数<code>防抖</code>和<code>节流</code>是我们优化高频率代码的一种手段，比如浏览器的 <code>resize</code>、<code>scroll</code> 、<code>mousemove</code>等事件在触发时，会不断的调用绑定到事件上的回调函数，极大的浪费了资源，降低前端性能。</p>\n<p><code>防抖</code> 就是 n 秒后再执行该事件，若 n 秒内被重复触发，则重新计时。</p>\n<p><code>节流</code> 则是  n 秒内只运行一次，若在 n秒内重复触发，则只有一次生效。</p>","more":"<p>当我们在表单输入内容并给出搜索建议列表时，如果不加限制，就需要频繁给服务器发送请求，所以这种时候我们应该时让最后一次发送请求，也就是使用<code>防抖</code>来优化。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> content = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.content&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 如果不加限制 则输入每一个字符都会触发请求</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    content.<span class=\"property\">oninput</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 发送请求</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以，这里我们可以使用<code>防抖</code>来优化减少请求次数，减轻服务器压力。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> content = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.content&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, delay</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> timer </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(timer) <span class=\"built_in\">clearTimeout</span>(timer)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, delay)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    content.<span class=\"property\">oninput</span> = <span class=\"title function_\">debounce</span>(fn, <span class=\"number\">200</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当我们给元素注册了鼠标移动事件，只是简单打印，如果不加限制，则会频繁触发，所以此时我们可以使用<code>节流</code>来进行优化。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: pink;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> timer  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(timer) <span class=\"keyword\">return</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                timer = <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, delay)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> container = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.container&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    container.<span class=\"property\">onmousemove</span> = <span class=\"title function_\">throttle</span>(fn, <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以看出 其实<code>防抖</code>和<code>节流</code> 其实差不多，都是使用<code>setTimeout</code> 再配合<code>apply</code>调用函数。</p>\n<p>区别在于， <code>防抖</code>是当在 n 秒内触发函数，则 <code>clearTimeout</code>清除上一次事件，开启新的定时器。</p>\n<p><code>节流</code>的关键是 当 n 秒内触发函数，则 return，等n 秒后触发上一次事件。</p>"},{"title":"浅拷贝和深拷贝","_content":"\n在聊`深拷贝`和`浅拷贝`之前我们先简单介绍下 JS 中的两大数据类型\n\n- 基本数据类型， 基本数据类型存储在**栈**内存中。\n- 引用数据类型， 引用数据类型存储在**堆**内存中，引用数据类型的变量是一个指向堆内存中的对象的引用，存在栈中。\n\n<!--more-->\n\n`浅拷贝`指的是创建新的数据，这个新数据，有原始数据属性值的一份精确拷贝。\n\n如果是基本数据类型，拷贝的就是基本数据类型的值。\n\n如果是引用数据类型，拷贝的是引用数据的内存地址。\n\n简单说，`浅拷贝`只拷贝一层，深层次的引用类型则共享内存地址。\n\n那我们来简单实现下：\n\n```js\nfunction shallowClone(obj) {\n  let newObj = {}\n\n  for(let key in obj) {\n    if(obj.hasOwnProperty(obj[key])) {\n      newObj[key] = obj[key]\n    }\n  }\n\n  return newObj\n}\n\nshallowClone(obj)\n```\n\n在 JS中，存在`浅拷贝`的现象有：\n\n- `Object.assign`\n\n```js\nvar obj = {\n    age: 18,\n    names: {\n        name1: '张三',\n    },\n    sayHi: function () {\n        console.log('我是张三')\n    }\n}\nvar newObj = Object.assign({}, fxObj)\n\nobj.names.name1 = '李四'\n\nconsole.log(newObj.names.name1) // 李四\n```\n\n- 使用扩展运算符\n\n```js\nconst arr = [\"One\", \"Two\", \"Three\"]\nconst newArr = [...arr]\nnewArr[1] = \"love\"\n\nconsole.log(arr) // [\"One\", \"Two\", \"Three\"]\nconsole.log(newArr) // [\"One\", \"love\", \"Three\"]\n```\n\n- Array.prototype.concat\n\n```js\nconst arr = [\"One\", \"Two\", \"Three\"]\nconst newArr = arr.concat()\nnewArr[1] = \"love\"\n\nconsole.log(arr) // [\"One\", \"Two\", \"Three\"]\nconsole.log(newArr) // [\"One\", \"love\", \"Three\"]\n```\n\n`深拷贝`开辟一个新空间，两个对象属性完全相同，但对应两个不同的地址，修改一个对象的属性，另一个不会受影响。\n\n- `lodash ` 的  `_.cloneDeep()`\n\n```js\nimport _ from 'lodash'\n\nconst obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n}\n\nconst obj2 = _.cloneDeep(obj1)\n\nconsole.log(obj1.b.f === obj2.b.f) // false\n```\n\n- `JSON.stringify`配合 `JSON.parse`\n\n```js\nconst obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n}\n\nconst obj2 = JSON.parse(JSON.stringify(obj1))\n\nconsole.log(obj1.b.f === obj2.b.f) // false\n```\n\n- 手写循环递归\n\n```js\nlet obj1 = {\n  a:{\n    b:1\n  }\n}\n\nfunction deepClone(obj) { \n  let cloneObj = {}\n  \n  for(let key in obj) {                 //遍历\n    if(typeof obj[key] ==='object') { \n      cloneObj[key] = deepClone(obj[key])  //是对象就再次调用该函数递归\n    } else {\n      cloneObj[key] = obj[key]  //基本类型的话直接复制值\n    }\n  }\n  return cloneObj\n}\n\nlet obj2 = deepClone(obj1)\n\nobj1.a.b = 2\n\nconsole.log(obj2)   //  {a:{b:1}}\n```\n\n","source":"_posts/JS/10-浅拷贝和深拷贝.md","raw":"---\ntitle: 浅拷贝和深拷贝\ntags: JS\n---\n\n在聊`深拷贝`和`浅拷贝`之前我们先简单介绍下 JS 中的两大数据类型\n\n- 基本数据类型， 基本数据类型存储在**栈**内存中。\n- 引用数据类型， 引用数据类型存储在**堆**内存中，引用数据类型的变量是一个指向堆内存中的对象的引用，存在栈中。\n\n<!--more-->\n\n`浅拷贝`指的是创建新的数据，这个新数据，有原始数据属性值的一份精确拷贝。\n\n如果是基本数据类型，拷贝的就是基本数据类型的值。\n\n如果是引用数据类型，拷贝的是引用数据的内存地址。\n\n简单说，`浅拷贝`只拷贝一层，深层次的引用类型则共享内存地址。\n\n那我们来简单实现下：\n\n```js\nfunction shallowClone(obj) {\n  let newObj = {}\n\n  for(let key in obj) {\n    if(obj.hasOwnProperty(obj[key])) {\n      newObj[key] = obj[key]\n    }\n  }\n\n  return newObj\n}\n\nshallowClone(obj)\n```\n\n在 JS中，存在`浅拷贝`的现象有：\n\n- `Object.assign`\n\n```js\nvar obj = {\n    age: 18,\n    names: {\n        name1: '张三',\n    },\n    sayHi: function () {\n        console.log('我是张三')\n    }\n}\nvar newObj = Object.assign({}, fxObj)\n\nobj.names.name1 = '李四'\n\nconsole.log(newObj.names.name1) // 李四\n```\n\n- 使用扩展运算符\n\n```js\nconst arr = [\"One\", \"Two\", \"Three\"]\nconst newArr = [...arr]\nnewArr[1] = \"love\"\n\nconsole.log(arr) // [\"One\", \"Two\", \"Three\"]\nconsole.log(newArr) // [\"One\", \"love\", \"Three\"]\n```\n\n- Array.prototype.concat\n\n```js\nconst arr = [\"One\", \"Two\", \"Three\"]\nconst newArr = arr.concat()\nnewArr[1] = \"love\"\n\nconsole.log(arr) // [\"One\", \"Two\", \"Three\"]\nconsole.log(newArr) // [\"One\", \"love\", \"Three\"]\n```\n\n`深拷贝`开辟一个新空间，两个对象属性完全相同，但对应两个不同的地址，修改一个对象的属性，另一个不会受影响。\n\n- `lodash ` 的  `_.cloneDeep()`\n\n```js\nimport _ from 'lodash'\n\nconst obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n}\n\nconst obj2 = _.cloneDeep(obj1)\n\nconsole.log(obj1.b.f === obj2.b.f) // false\n```\n\n- `JSON.stringify`配合 `JSON.parse`\n\n```js\nconst obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n}\n\nconst obj2 = JSON.parse(JSON.stringify(obj1))\n\nconsole.log(obj1.b.f === obj2.b.f) // false\n```\n\n- 手写循环递归\n\n```js\nlet obj1 = {\n  a:{\n    b:1\n  }\n}\n\nfunction deepClone(obj) { \n  let cloneObj = {}\n  \n  for(let key in obj) {                 //遍历\n    if(typeof obj[key] ==='object') { \n      cloneObj[key] = deepClone(obj[key])  //是对象就再次调用该函数递归\n    } else {\n      cloneObj[key] = obj[key]  //基本类型的话直接复制值\n    }\n  }\n  return cloneObj\n}\n\nlet obj2 = deepClone(obj1)\n\nobj1.a.b = 2\n\nconsole.log(obj2)   //  {a:{b:1}}\n```\n\n","slug":"JS/10-浅拷贝和深拷贝","published":1,"date":"2023-03-17T13:09:00.236Z","updated":"2023-03-17T13:09:00.236Z","_id":"clf6yh1qf000r8cupfhvmawuu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在聊<code>深拷贝</code>和<code>浅拷贝</code>之前我们先简单介绍下 JS 中的两大数据类型</p>\n<ul>\n<li>基本数据类型， 基本数据类型存储在<strong>栈</strong>内存中。</li>\n<li>引用数据类型， 引用数据类型存储在<strong>堆</strong>内存中，引用数据类型的变量是一个指向堆内存中的对象的引用，存在栈中。</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><code>浅拷贝</code>指的是创建新的数据，这个新数据，有原始数据属性值的一份精确拷贝。</p>\n<p>如果是基本数据类型，拷贝的就是基本数据类型的值。</p>\n<p>如果是引用数据类型，拷贝的是引用数据的内存地址。</p>\n<p>简单说，<code>浅拷贝</code>只拷贝一层，深层次的引用类型则共享内存地址。</p>\n<p>那我们来简单实现下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowClone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObj = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(obj[key])) &#123;</span><br><span class=\"line\">      newObj[key] = obj[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">shallowClone</span>(obj)</span><br></pre></td></tr></table></figure>\n\n<p>在 JS中，存在<code>浅拷贝</code>的现象有：</p>\n<ul>\n<li><code>Object.assign</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">names</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name1</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是张三&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newObj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, fxObj)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">names</span>.<span class=\"property\">name1</span> = <span class=\"string\">&#x27;李四&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newObj.<span class=\"property\">names</span>.<span class=\"property\">name1</span>) <span class=\"comment\">// 李四</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用扩展运算符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = [...arr]</span><br><span class=\"line\">newArr[<span class=\"number\">1</span>] = <span class=\"string\">&quot;love&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr) <span class=\"comment\">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArr) <span class=\"comment\">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.concat</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.<span class=\"title function_\">concat</span>()</span><br><span class=\"line\">newArr[<span class=\"number\">1</span>] = <span class=\"string\">&quot;love&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr) <span class=\"comment\">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArr) <span class=\"comment\">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>深拷贝</code>开辟一个新空间，两个对象属性完全相同，但对应两个不同的地址，修改一个对象的属性，另一个不会受影响。</p>\n<ul>\n<li><code>lodash </code> 的  <code>_.cloneDeep()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = _.<span class=\"title function_\">cloneDeep</span>(obj1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">b</span>.<span class=\"property\">f</span> === obj2.<span class=\"property\">b</span>.<span class=\"property\">f</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>JSON.stringify</code>配合 <code>JSON.parse</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj1))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">b</span>.<span class=\"property\">f</span> === obj2.<span class=\"property\">b</span>.<span class=\"property\">f</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>手写循环递归</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj</span>) &#123; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneObj = &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;                 <span class=\"comment\">//遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj[key] ===<span class=\"string\">&#x27;object&#x27;</span>) &#123; </span><br><span class=\"line\">      cloneObj[key] = <span class=\"title function_\">deepClone</span>(obj[key])  <span class=\"comment\">//是对象就再次调用该函数递归</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      cloneObj[key] = obj[key]  <span class=\"comment\">//基本类型的话直接复制值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">deepClone</span>(obj1)</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.<span class=\"property\">a</span>.<span class=\"property\">b</span> = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2)   <span class=\"comment\">//  &#123;a:&#123;b:1&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>在聊<code>深拷贝</code>和<code>浅拷贝</code>之前我们先简单介绍下 JS 中的两大数据类型</p>\n<ul>\n<li>基本数据类型， 基本数据类型存储在<strong>栈</strong>内存中。</li>\n<li>引用数据类型， 引用数据类型存储在<strong>堆</strong>内存中，引用数据类型的变量是一个指向堆内存中的对象的引用，存在栈中。</li>\n</ul>","more":"<p><code>浅拷贝</code>指的是创建新的数据，这个新数据，有原始数据属性值的一份精确拷贝。</p>\n<p>如果是基本数据类型，拷贝的就是基本数据类型的值。</p>\n<p>如果是引用数据类型，拷贝的是引用数据的内存地址。</p>\n<p>简单说，<code>浅拷贝</code>只拷贝一层，深层次的引用类型则共享内存地址。</p>\n<p>那我们来简单实现下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowClone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObj = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(obj[key])) &#123;</span><br><span class=\"line\">      newObj[key] = obj[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">shallowClone</span>(obj)</span><br></pre></td></tr></table></figure>\n\n<p>在 JS中，存在<code>浅拷贝</code>的现象有：</p>\n<ul>\n<li><code>Object.assign</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">names</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name1</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是张三&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newObj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, fxObj)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">names</span>.<span class=\"property\">name1</span> = <span class=\"string\">&#x27;李四&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newObj.<span class=\"property\">names</span>.<span class=\"property\">name1</span>) <span class=\"comment\">// 李四</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用扩展运算符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = [...arr]</span><br><span class=\"line\">newArr[<span class=\"number\">1</span>] = <span class=\"string\">&quot;love&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr) <span class=\"comment\">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArr) <span class=\"comment\">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.concat</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.<span class=\"title function_\">concat</span>()</span><br><span class=\"line\">newArr[<span class=\"number\">1</span>] = <span class=\"string\">&quot;love&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr) <span class=\"comment\">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArr) <span class=\"comment\">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>深拷贝</code>开辟一个新空间，两个对象属性完全相同，但对应两个不同的地址，修改一个对象的属性，另一个不会受影响。</p>\n<ul>\n<li><code>lodash </code> 的  <code>_.cloneDeep()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = _.<span class=\"title function_\">cloneDeep</span>(obj1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">b</span>.<span class=\"property\">f</span> === obj2.<span class=\"property\">b</span>.<span class=\"property\">f</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>JSON.stringify</code>配合 <code>JSON.parse</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj1))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">b</span>.<span class=\"property\">f</span> === obj2.<span class=\"property\">b</span>.<span class=\"property\">f</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>手写循环递归</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj</span>) &#123; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneObj = &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;                 <span class=\"comment\">//遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj[key] ===<span class=\"string\">&#x27;object&#x27;</span>) &#123; </span><br><span class=\"line\">      cloneObj[key] = <span class=\"title function_\">deepClone</span>(obj[key])  <span class=\"comment\">//是对象就再次调用该函数递归</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      cloneObj[key] = obj[key]  <span class=\"comment\">//基本类型的话直接复制值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">deepClone</span>(obj1)</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.<span class=\"property\">a</span>.<span class=\"property\">b</span> = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2)   <span class=\"comment\">//  &#123;a:&#123;b:1&#125;&#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue的响应式","_content":"### 响应式是什么\n\n什么是响应式呢，举个简单例子 \n\n```js\nlet a = 1\n\nlet b = a * 10  // 我们希望 b 是 a 的 10 倍\nconsole.log(b)  // 10\n\na = 5\nconsole.log(b)  // 我们还希望 b 是 a 的 10 倍,那这个时候就麻烦了,需要接着计算 \n```\n\n假设有一个函数`fn` ，当 `a` 改变则函数`fn`自动执行，将`b`重新计算就好了，这其实就是可以简单理解成`响应式`。\n\n说的更准确点，提前准备一个函数`watchEffect`，当函数里面的依赖项(数据)发生更改，就自动执行`watchEffect`，这就是`响应式` 。\n\n<!-- more -->\n\n我们再进一步，函数里的依赖项发生改变，则更新页面，不就是`model`修改，`view`自动更新嘛。\n\n`@nx-js/observer-util` 刚好就提供了类似的功能，只不过函数名叫`observe`。\n\n```js\nimport { observable, observe } from '@nx-js/observer-util'\n\nlet obj = observable({\n  age: 18\n})\n\nobserve(() => {  // 每当数据改变 observe函数 就自动执行\n  console.log(obj.age)\n})\n\nobj.age += 1  // 当 obj.age 增加就会执行observe  19\n\nobj.age += 1  // 当 obj.age 增加就会执行observe  20\n```\n\n理解了`响应式` 是什么，那接下来我们也一步步实现个响应式。\n\n### 发布订阅模式\n\n发布订阅模式是设计模式的一种，说个现实的例子，小刘、小红、小张去电脑城买电脑，但是没有优惠，于是给店员留了电话到电话本上，店员等电脑城搞活动，打电话通知这三个人。店员就是`发布者`，记录了电话的电话本就是`缓存列表`，消费者就是`订阅者` 。\n\n给DOM添加事件的`addEventListener`也是发布订阅。\n\n接下来我们模拟着实现一下\n\n```js\n// 暂时存放 watchEffect 的变量\nlet activeEffect\n\nclass Dep {\n    // 用 Set 做订阅者列表 以防止列表中添加多个完全相同的函数\n    subscribers = new Set()\n\t\n\t// 依赖收集方法\n\tdepend() {\n        // 如果 activeEffect 为空 则代表没有 watcheffect\n        if(activeEffect) {\n            this.subscribers.add(activeEffect)\n        }\n    }\n\n\t// 更新操作 通常在值修改后执行 发布消息\n\tnotify() {\n        this.subscribers.forEach(effect => {\n            effect()\n        })\n    }\n}\n\n// 模仿 Vue3 的 watchEffect 函数\nfunction watchEffect(effect) {\n    // 先把传进来的函数放到 activeEffect\n    activeEffect = effect\n    // 执行一下 watchEffect 里面的函数\n    effect()\n}\n\n// 使用\nlet dep = new Dep()\n// 暂定一个全局变量 age\nlet globalAge = 18\n\nconst user = {\n    get age() {\n        dep.depend()\n        return globalAge\n    },\n    set age(newAge) {\n        globalAge = newAge\n        dep.notify()\n    }\n}\n\nwatchEffect(() => {\n    console.log(user.age)\n})\n\nuser.age += 1\n```\n\n我们初步实现了最初的想法， 每当依赖项`user.age` 修改，都会执行`watchEffect`函数。\n\n而这里的 dep对象 就是`发布者`,  subscribers 就是`缓存列表` ，dep.notify() 是 `发布消息`。\n\n### 代理模式\n\n虽然上边实现了功能，但是用起来太麻烦了，需要提供对象的 `getter`和`setter`，还要提供手动的执行依赖收集函数，这是不方便的，所以需要接着封装。\n\n封装前先简单聊一下`代理模式`， 代理简单说就是，我们需要租房，而我们是很难找到房源的，房源都在中介手里，这个中介就是代理，他给我们介绍什么房子，我们就拿到什么房子。\n\n那我们来一起简单实现下：\n\n```js\nlet activeEffect\n\n// ========= start 这里跟刚才一样 ===========\nclass Dep {\n    subscribers = new Set()\n\t\n\tdepend() {\n        if(activeEffect) {\n             this.subscribers.add(activeEffect)\n        }  \n    }\n\n\tnotify() {\n        this.subscribers.forEach(effect => effect())\n    }\n}\n\nfunction watchEffect(effect) {\n    activeEffect = effect\n    effect()\n}\n\n// ========= end ===========\n\n// 模仿 Vue3 的 reactive\nfunction reactive(raw) {\n    // 遍历对象上存在的 key\n    Object.keys(raw).forEach(key => {\n        // 为每个 key 都创建一个依赖对象\n        let dep = new Dep()\n        \n        let realValue = raw[key]\n        \n        // 用 get 和 set 重写原对象的key\n        Object.defineProperty(raw, key, {\n            // 在 get 和 set 里调用依赖对象的对应方法\n            get() {\n                dep.depend()\n                return realValue\n            },\n            set(newVal) {\n                realValue = newVal\n                dep.notify()\n            }\n        })\n    })\n    \n    return raw\n}\n\n// 使用\nlet obj = reactive({ age: 18 })\nlet fn = () => { console.log(obj.age) }\nwatchEffect(fn)\n\nobj.age += 1  // 每当修改 age 都会执行 fn 19\n\nobj.age += 1  // 每当修改 age 都会执行 fn 20\n```\n\n这里的 `Object.defineProperty`就是做的`代理模式` ，现在在使用方式上基本和 Vue3 一样了。\n\n但还不是最终版本，vue3已经放弃了 `IE`， 并且`Object.defineProperty\t` 在监听对象时，新增的数据是监听不到的。\n\n所以使用了 `Proxy` 来做代理。\n\n### Proxy版\n\n使用了发布订阅+代理模式实现基本的`reactivity`。\n\n```js\n// 定义一个暂时存放 watchEffect 传进来的参数的变量\nlet activeEffect\n\n// 这个Dep应该是Dependence的缩写，意为依赖。实际上就相当于发布-订阅模式中的发布者类\n// 定义一个 Dep 类，该类将会为每一个响应式对象的每一个键生成一个发布者实例\nclass Dep {\n  // 用 Set 做缓存列表以防止列表中添加多个完全相同的函数\n  subscribers = new Set()\n\n  // 构造函数接受一个初始化的值放在私有变量内\n  constructor(value) {\n    this._value = value\n  }\n\n  // 当使用 xxx.value 获取对象上的 value 值时\n  get value() {\n    // 代理模式 当获取对象上的value属性的值时将会触发 depend 方法\n    this.depend()\n\n    // 然后返回私有变量内的值\n    return this._value\n  }\n\n  // 当使用 xxx.value = xxx 修改对象上的 value 值时\n  set value(value) {\n    // 代理模式 当修改对象上的value属性的值时将会触发 notify 方法\n    this._value = value\n    // 先改值再触发 这样保证触发的时候用到的都是已经修改后的新值\n    this.notify()\n  }\n\n  // 这就是我们常说的依赖收集方法\n  depend() {\n    // 如果 activeEffect 这个变量为空 就证明不是在 watchEffect 这个函数里面触发的 get 操作\n    if (activeEffect) {\n      // 但如果 activeEffect 不为空就证明是在 watchEffect 里触发的 get 操作\n      // 那就把 activeEffect 这个存着 watchEffect 参数的变量添加进缓存列表中\n      this.subscribers.add(activeEffect)\n    }\n  }\n\n  // 更新操作 通常会在值被修改后调用\n  notify() {\n    // 遍历缓存列表里存放的函数 并依次触发执行\n    this.subscribers.forEach((effect) => {\n      effect()\n    })\n  }\n}\n// 模仿 Vue3 的 watchEffect 函数\nfunction watchEffect(effect) {\n  // 先把传进来的函数放入到 activeEffect 这个变量中\n  activeEffect = effect\n  // 然后执行 watchEffect 里面的函数\n  effect()\n  activeEffect = null\n}\n\n// 定义一个 WeakMap 数据类型 用于存放 reactive 定义的对象以及他们的发布者对象集\nconst targetToHashMap = new WeakMap()\n\n// 定义 getDep 函数 用于获取 reactive 定义的对象所对应的发布者对象集里的某一个键对应的发布者对象\nfunction getDep(target, key) {\n  // 获取 reactive 定义的对象所对应的发布者对象集\n  let depMap = targetToHashMap.get(target)\n  // 如果没获取到的话\n  if (!depMap) {\n    // 就新建一个空的发布者对象集\n    depMap = new Map()\n    // 然后再把这个发布者对象集存进 WeakMap 里\n    targetToHashMap.set(target, depMap)\n  }\n\n  // 再获取到这个发布者对象集里的某一个键所对应的发布者对象\n  let dep = depMap.get(key)\n\n  // 如果没获取到的话\n  if (!dep) {\n    // 就新建一个发布者对象并初始化赋值\n    dep = new Dep(target[key])\n\n    // 然后将这个发布者对象放入到发布者对象集里\n    depMap.set(key, dep)\n  }\n  // 最后返回这个发布者对象\n  return dep\n}\n\n// 模仿 Vue3 的 reactive 函数\nfunction reactive(obj) {\n  // 返回一个传进来的参数对象的代理对象 以便使用代理模式拦截对象上的操作并应用发布-订阅模式\n  return new Proxy(obj, {\n    // 当触发 get 操作时\n    get(target, key) {\n      // 先调用 getDep 函数取到里面存放的 value 值\n      const value = getDep(target, key).value\n      // 如果 value 是对象的话\n      if (value && typeof value === 'object') {\n        // 那就把 value 也变成一个响应式对象\n        return reactive(value)\n      } else {\n        // 如果 value 只是基本数据类型的话就直接将值返回\n        return value\n      }\n    },\n    // 当触发 set 操作时\n    set(target, key, value) {\n      // 调用 getDep 函数并将里面存放的 value 值重新赋值成 set 操作的值\n      getDep(target, key).value = value\n    }\n  })\n}\n\nconst obj = reactive({\n  age: 18\n})\n\nwatchEffect(() => {\n  console.log(obj.age)\n})\n\nobj.age++\n```\n\n\n\n\n\n","source":"_posts/Vue/01-Vue的Reactivity.md","raw":"---\ntitle: Vue的响应式\ntags: Vue\n---\n### 响应式是什么\n\n什么是响应式呢，举个简单例子 \n\n```js\nlet a = 1\n\nlet b = a * 10  // 我们希望 b 是 a 的 10 倍\nconsole.log(b)  // 10\n\na = 5\nconsole.log(b)  // 我们还希望 b 是 a 的 10 倍,那这个时候就麻烦了,需要接着计算 \n```\n\n假设有一个函数`fn` ，当 `a` 改变则函数`fn`自动执行，将`b`重新计算就好了，这其实就是可以简单理解成`响应式`。\n\n说的更准确点，提前准备一个函数`watchEffect`，当函数里面的依赖项(数据)发生更改，就自动执行`watchEffect`，这就是`响应式` 。\n\n<!-- more -->\n\n我们再进一步，函数里的依赖项发生改变，则更新页面，不就是`model`修改，`view`自动更新嘛。\n\n`@nx-js/observer-util` 刚好就提供了类似的功能，只不过函数名叫`observe`。\n\n```js\nimport { observable, observe } from '@nx-js/observer-util'\n\nlet obj = observable({\n  age: 18\n})\n\nobserve(() => {  // 每当数据改变 observe函数 就自动执行\n  console.log(obj.age)\n})\n\nobj.age += 1  // 当 obj.age 增加就会执行observe  19\n\nobj.age += 1  // 当 obj.age 增加就会执行observe  20\n```\n\n理解了`响应式` 是什么，那接下来我们也一步步实现个响应式。\n\n### 发布订阅模式\n\n发布订阅模式是设计模式的一种，说个现实的例子，小刘、小红、小张去电脑城买电脑，但是没有优惠，于是给店员留了电话到电话本上，店员等电脑城搞活动，打电话通知这三个人。店员就是`发布者`，记录了电话的电话本就是`缓存列表`，消费者就是`订阅者` 。\n\n给DOM添加事件的`addEventListener`也是发布订阅。\n\n接下来我们模拟着实现一下\n\n```js\n// 暂时存放 watchEffect 的变量\nlet activeEffect\n\nclass Dep {\n    // 用 Set 做订阅者列表 以防止列表中添加多个完全相同的函数\n    subscribers = new Set()\n\t\n\t// 依赖收集方法\n\tdepend() {\n        // 如果 activeEffect 为空 则代表没有 watcheffect\n        if(activeEffect) {\n            this.subscribers.add(activeEffect)\n        }\n    }\n\n\t// 更新操作 通常在值修改后执行 发布消息\n\tnotify() {\n        this.subscribers.forEach(effect => {\n            effect()\n        })\n    }\n}\n\n// 模仿 Vue3 的 watchEffect 函数\nfunction watchEffect(effect) {\n    // 先把传进来的函数放到 activeEffect\n    activeEffect = effect\n    // 执行一下 watchEffect 里面的函数\n    effect()\n}\n\n// 使用\nlet dep = new Dep()\n// 暂定一个全局变量 age\nlet globalAge = 18\n\nconst user = {\n    get age() {\n        dep.depend()\n        return globalAge\n    },\n    set age(newAge) {\n        globalAge = newAge\n        dep.notify()\n    }\n}\n\nwatchEffect(() => {\n    console.log(user.age)\n})\n\nuser.age += 1\n```\n\n我们初步实现了最初的想法， 每当依赖项`user.age` 修改，都会执行`watchEffect`函数。\n\n而这里的 dep对象 就是`发布者`,  subscribers 就是`缓存列表` ，dep.notify() 是 `发布消息`。\n\n### 代理模式\n\n虽然上边实现了功能，但是用起来太麻烦了，需要提供对象的 `getter`和`setter`，还要提供手动的执行依赖收集函数，这是不方便的，所以需要接着封装。\n\n封装前先简单聊一下`代理模式`， 代理简单说就是，我们需要租房，而我们是很难找到房源的，房源都在中介手里，这个中介就是代理，他给我们介绍什么房子，我们就拿到什么房子。\n\n那我们来一起简单实现下：\n\n```js\nlet activeEffect\n\n// ========= start 这里跟刚才一样 ===========\nclass Dep {\n    subscribers = new Set()\n\t\n\tdepend() {\n        if(activeEffect) {\n             this.subscribers.add(activeEffect)\n        }  \n    }\n\n\tnotify() {\n        this.subscribers.forEach(effect => effect())\n    }\n}\n\nfunction watchEffect(effect) {\n    activeEffect = effect\n    effect()\n}\n\n// ========= end ===========\n\n// 模仿 Vue3 的 reactive\nfunction reactive(raw) {\n    // 遍历对象上存在的 key\n    Object.keys(raw).forEach(key => {\n        // 为每个 key 都创建一个依赖对象\n        let dep = new Dep()\n        \n        let realValue = raw[key]\n        \n        // 用 get 和 set 重写原对象的key\n        Object.defineProperty(raw, key, {\n            // 在 get 和 set 里调用依赖对象的对应方法\n            get() {\n                dep.depend()\n                return realValue\n            },\n            set(newVal) {\n                realValue = newVal\n                dep.notify()\n            }\n        })\n    })\n    \n    return raw\n}\n\n// 使用\nlet obj = reactive({ age: 18 })\nlet fn = () => { console.log(obj.age) }\nwatchEffect(fn)\n\nobj.age += 1  // 每当修改 age 都会执行 fn 19\n\nobj.age += 1  // 每当修改 age 都会执行 fn 20\n```\n\n这里的 `Object.defineProperty`就是做的`代理模式` ，现在在使用方式上基本和 Vue3 一样了。\n\n但还不是最终版本，vue3已经放弃了 `IE`， 并且`Object.defineProperty\t` 在监听对象时，新增的数据是监听不到的。\n\n所以使用了 `Proxy` 来做代理。\n\n### Proxy版\n\n使用了发布订阅+代理模式实现基本的`reactivity`。\n\n```js\n// 定义一个暂时存放 watchEffect 传进来的参数的变量\nlet activeEffect\n\n// 这个Dep应该是Dependence的缩写，意为依赖。实际上就相当于发布-订阅模式中的发布者类\n// 定义一个 Dep 类，该类将会为每一个响应式对象的每一个键生成一个发布者实例\nclass Dep {\n  // 用 Set 做缓存列表以防止列表中添加多个完全相同的函数\n  subscribers = new Set()\n\n  // 构造函数接受一个初始化的值放在私有变量内\n  constructor(value) {\n    this._value = value\n  }\n\n  // 当使用 xxx.value 获取对象上的 value 值时\n  get value() {\n    // 代理模式 当获取对象上的value属性的值时将会触发 depend 方法\n    this.depend()\n\n    // 然后返回私有变量内的值\n    return this._value\n  }\n\n  // 当使用 xxx.value = xxx 修改对象上的 value 值时\n  set value(value) {\n    // 代理模式 当修改对象上的value属性的值时将会触发 notify 方法\n    this._value = value\n    // 先改值再触发 这样保证触发的时候用到的都是已经修改后的新值\n    this.notify()\n  }\n\n  // 这就是我们常说的依赖收集方法\n  depend() {\n    // 如果 activeEffect 这个变量为空 就证明不是在 watchEffect 这个函数里面触发的 get 操作\n    if (activeEffect) {\n      // 但如果 activeEffect 不为空就证明是在 watchEffect 里触发的 get 操作\n      // 那就把 activeEffect 这个存着 watchEffect 参数的变量添加进缓存列表中\n      this.subscribers.add(activeEffect)\n    }\n  }\n\n  // 更新操作 通常会在值被修改后调用\n  notify() {\n    // 遍历缓存列表里存放的函数 并依次触发执行\n    this.subscribers.forEach((effect) => {\n      effect()\n    })\n  }\n}\n// 模仿 Vue3 的 watchEffect 函数\nfunction watchEffect(effect) {\n  // 先把传进来的函数放入到 activeEffect 这个变量中\n  activeEffect = effect\n  // 然后执行 watchEffect 里面的函数\n  effect()\n  activeEffect = null\n}\n\n// 定义一个 WeakMap 数据类型 用于存放 reactive 定义的对象以及他们的发布者对象集\nconst targetToHashMap = new WeakMap()\n\n// 定义 getDep 函数 用于获取 reactive 定义的对象所对应的发布者对象集里的某一个键对应的发布者对象\nfunction getDep(target, key) {\n  // 获取 reactive 定义的对象所对应的发布者对象集\n  let depMap = targetToHashMap.get(target)\n  // 如果没获取到的话\n  if (!depMap) {\n    // 就新建一个空的发布者对象集\n    depMap = new Map()\n    // 然后再把这个发布者对象集存进 WeakMap 里\n    targetToHashMap.set(target, depMap)\n  }\n\n  // 再获取到这个发布者对象集里的某一个键所对应的发布者对象\n  let dep = depMap.get(key)\n\n  // 如果没获取到的话\n  if (!dep) {\n    // 就新建一个发布者对象并初始化赋值\n    dep = new Dep(target[key])\n\n    // 然后将这个发布者对象放入到发布者对象集里\n    depMap.set(key, dep)\n  }\n  // 最后返回这个发布者对象\n  return dep\n}\n\n// 模仿 Vue3 的 reactive 函数\nfunction reactive(obj) {\n  // 返回一个传进来的参数对象的代理对象 以便使用代理模式拦截对象上的操作并应用发布-订阅模式\n  return new Proxy(obj, {\n    // 当触发 get 操作时\n    get(target, key) {\n      // 先调用 getDep 函数取到里面存放的 value 值\n      const value = getDep(target, key).value\n      // 如果 value 是对象的话\n      if (value && typeof value === 'object') {\n        // 那就把 value 也变成一个响应式对象\n        return reactive(value)\n      } else {\n        // 如果 value 只是基本数据类型的话就直接将值返回\n        return value\n      }\n    },\n    // 当触发 set 操作时\n    set(target, key, value) {\n      // 调用 getDep 函数并将里面存放的 value 值重新赋值成 set 操作的值\n      getDep(target, key).value = value\n    }\n  })\n}\n\nconst obj = reactive({\n  age: 18\n})\n\nwatchEffect(() => {\n  console.log(obj.age)\n})\n\nobj.age++\n```\n\n\n\n\n\n","slug":"Vue/01-Vue的Reactivity","published":1,"date":"2023-03-17T13:09:00.236Z","updated":"2023-03-17T13:09:00.236Z","_id":"clf6yh1qg000t8cupcgj9e5ua","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"响应式是什么\"><a href=\"#响应式是什么\" class=\"headerlink\" title=\"响应式是什么\"></a>响应式是什么</h3><p>什么是响应式呢，举个简单例子 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a * <span class=\"number\">10</span>  <span class=\"comment\">// 我们希望 b 是 a 的 10 倍</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)  <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)  <span class=\"comment\">// 我们还希望 b 是 a 的 10 倍,那这个时候就麻烦了,需要接着计算 </span></span><br></pre></td></tr></table></figure>\n\n<p>假设有一个函数<code>fn</code> ，当 <code>a</code> 改变则函数<code>fn</code>自动执行，将<code>b</code>重新计算就好了，这其实就是可以简单理解成<code>响应式</code>。</p>\n<p>说的更准确点，提前准备一个函数<code>watchEffect</code>，当函数里面的依赖项(数据)发生更改，就自动执行<code>watchEffect</code>，这就是<code>响应式</code> 。</p>\n<span id=\"more\"></span>\n\n<p>我们再进一步，函数里的依赖项发生改变，则更新页面，不就是<code>model</code>修改，<code>view</code>自动更新嘛。</p>\n<p><code>@nx-js/observer-util</code> 刚好就提供了类似的功能，只不过函数名叫<code>observe</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable, observe &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nx-js/observer-util&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title function_\">observable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">observe</span>(<span class=\"function\">() =&gt;</span> &#123;  <span class=\"comment\">// 每当数据改变 observe函数 就自动执行</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 当 obj.age 增加就会执行observe  19</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 当 obj.age 增加就会执行observe  20</span></span><br></pre></td></tr></table></figure>\n\n<p>理解了<code>响应式</code> 是什么，那接下来我们也一步步实现个响应式。</p>\n<h3 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h3><p>发布订阅模式是设计模式的一种，说个现实的例子，小刘、小红、小张去电脑城买电脑，但是没有优惠，于是给店员留了电话到电话本上，店员等电脑城搞活动，打电话通知这三个人。店员就是<code>发布者</code>，记录了电话的电话本就是<code>缓存列表</code>，消费者就是<code>订阅者</code> 。</p>\n<p>给DOM添加事件的<code>addEventListener</code>也是发布订阅。</p>\n<p>接下来我们模拟着实现一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暂时存放 watchEffect 的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用 Set 做订阅者列表 以防止列表中添加多个完全相同的函数</span></span><br><span class=\"line\">    subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 依赖收集方法</span></span><br><span class=\"line\">\t<span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 activeEffect 为空 则代表没有 watcheffect</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(activeEffect) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新操作 通常在值修改后执行 发布消息</span></span><br><span class=\"line\">\t<span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 watchEffect 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先把传进来的函数放到 activeEffect</span></span><br><span class=\"line\">    activeEffect = effect</span><br><span class=\"line\">    <span class=\"comment\">// 执行一下 watchEffect 里面的函数</span></span><br><span class=\"line\">    <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\"><span class=\"comment\">// 暂定一个全局变量 age</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> globalAge = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">age</span>() &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> globalAge</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">age</span>(<span class=\"params\">newAge</span>) &#123;</span><br><span class=\"line\">        globalAge = newAge</span><br><span class=\"line\">        dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">user.<span class=\"property\">age</span> += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>我们初步实现了最初的想法， 每当依赖项<code>user.age</code> 修改，都会执行<code>watchEffect</code>函数。</p>\n<p>而这里的 dep对象 就是<code>发布者</code>,  subscribers 就是<code>缓存列表</code> ，dep.notify() 是 <code>发布消息</code>。</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>虽然上边实现了功能，但是用起来太麻烦了，需要提供对象的 <code>getter</code>和<code>setter</code>，还要提供手动的执行依赖收集函数，这是不方便的，所以需要接着封装。</p>\n<p>封装前先简单聊一下<code>代理模式</code>， 代理简单说就是，我们需要租房，而我们是很难找到房源的，房源都在中介手里，这个中介就是代理，他给我们介绍什么房子，我们就拿到什么房子。</p>\n<p>那我们来一起简单实现下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ========= start 这里跟刚才一样 ===========</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(activeEffect) &#123;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> <span class=\"title function_\">effect</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    activeEffect = effect</span><br><span class=\"line\">    <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ========= end ===========</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 reactive</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reactive</span>(<span class=\"params\">raw</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历对象上存在的 key</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(raw).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为每个 key 都创建一个依赖对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> realValue = raw[key]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 用 get 和 set 重写原对象的key</span></span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(raw, key, &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在 get 和 set 里调用依赖对象的对应方法</span></span><br><span class=\"line\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">                <span class=\"keyword\">return</span> realValue</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">                realValue = newVal</span><br><span class=\"line\">                dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> raw</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>) &#125;</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(fn)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 每当修改 age 都会执行 fn 19</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 每当修改 age 都会执行 fn 20</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>Object.defineProperty</code>就是做的<code>代理模式</code> ，现在在使用方式上基本和 Vue3 一样了。</p>\n<p>但还不是最终版本，vue3已经放弃了 <code>IE</code>， 并且<code>Object.defineProperty    </code> 在监听对象时，新增的数据是监听不到的。</p>\n<p>所以使用了 <code>Proxy</code> 来做代理。</p>\n<h3 id=\"Proxy版\"><a href=\"#Proxy版\" class=\"headerlink\" title=\"Proxy版\"></a>Proxy版</h3><p>使用了发布订阅+代理模式实现基本的<code>reactivity</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个暂时存放 watchEffect 传进来的参数的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个Dep应该是Dependence的缩写，意为依赖。实际上就相当于发布-订阅模式中的发布者类</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 Dep 类，该类将会为每一个响应式对象的每一个键生成一个发布者实例</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用 Set 做缓存列表以防止列表中添加多个完全相同的函数</span></span><br><span class=\"line\">  subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 构造函数接受一个初始化的值放在私有变量内</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当使用 xxx.value 获取对象上的 value 值时</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">value</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理模式 当获取对象上的value属性的值时将会触发 depend 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后返回私有变量内的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当使用 xxx.value = xxx 修改对象上的 value 值时</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">value</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理模式 当修改对象上的value属性的值时将会触发 notify 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value</span><br><span class=\"line\">    <span class=\"comment\">// 先改值再触发 这样保证触发的时候用到的都是已经修改后的新值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这就是我们常说的依赖收集方法</span></span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 activeEffect 这个变量为空 就证明不是在 watchEffect 这个函数里面触发的 get 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (activeEffect) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 但如果 activeEffect 不为空就证明是在 watchEffect 里触发的 get 操作</span></span><br><span class=\"line\">      <span class=\"comment\">// 那就把 activeEffect 这个存着 watchEffect 参数的变量添加进缓存列表中</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新操作 通常会在值被修改后调用</span></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历缓存列表里存放的函数 并依次触发执行</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">effect</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 watchEffect 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 先把传进来的函数放入到 activeEffect 这个变量中</span></span><br><span class=\"line\">  activeEffect = effect</span><br><span class=\"line\">  <span class=\"comment\">// 然后执行 watchEffect 里面的函数</span></span><br><span class=\"line\">  <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">  activeEffect = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 WeakMap 数据类型 用于存放 reactive 定义的对象以及他们的发布者对象集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetToHashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakMap</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 getDep 函数 用于获取 reactive 定义的对象所对应的发布者对象集里的某一个键对应的发布者对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getDep</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取 reactive 定义的对象所对应的发布者对象集</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> depMap = targetToHashMap.<span class=\"title function_\">get</span>(target)</span><br><span class=\"line\">  <span class=\"comment\">// 如果没获取到的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!depMap) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就新建一个空的发布者对象集</span></span><br><span class=\"line\">    depMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 然后再把这个发布者对象集存进 WeakMap 里</span></span><br><span class=\"line\">    targetToHashMap.<span class=\"title function_\">set</span>(target, depMap)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 再获取到这个发布者对象集里的某一个键所对应的发布者对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dep = depMap.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没获取到的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dep) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就新建一个发布者对象并初始化赋值</span></span><br><span class=\"line\">    dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>(target[key])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后将这个发布者对象放入到发布者对象集里</span></span><br><span class=\"line\">    depMap.<span class=\"title function_\">set</span>(key, dep)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 最后返回这个发布者对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dep</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 reactive 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reactive</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个传进来的参数对象的代理对象 以便使用代理模式拦截对象上的操作并应用发布-订阅模式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当触发 get 操作时</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先调用 getDep 函数取到里面存放的 value 值</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"title function_\">getDep</span>(target, key).<span class=\"property\">value</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 是对象的话</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; <span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 那就把 value 也变成一个响应式对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reactive</span>(value)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 value 只是基本数据类型的话就直接将值返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 当触发 set 操作时</span></span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">target, key, value</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用 getDep 函数并将里面存放的 value 值重新赋值成 set 操作的值</span></span><br><span class=\"line\">      <span class=\"title function_\">getDep</span>(target, key).<span class=\"property\">value</span> = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span>++</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"响应式是什么\"><a href=\"#响应式是什么\" class=\"headerlink\" title=\"响应式是什么\"></a>响应式是什么</h3><p>什么是响应式呢，举个简单例子 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a * <span class=\"number\">10</span>  <span class=\"comment\">// 我们希望 b 是 a 的 10 倍</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)  <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)  <span class=\"comment\">// 我们还希望 b 是 a 的 10 倍,那这个时候就麻烦了,需要接着计算 </span></span><br></pre></td></tr></table></figure>\n\n<p>假设有一个函数<code>fn</code> ，当 <code>a</code> 改变则函数<code>fn</code>自动执行，将<code>b</code>重新计算就好了，这其实就是可以简单理解成<code>响应式</code>。</p>\n<p>说的更准确点，提前准备一个函数<code>watchEffect</code>，当函数里面的依赖项(数据)发生更改，就自动执行<code>watchEffect</code>，这就是<code>响应式</code> 。</p>","more":"<p>我们再进一步，函数里的依赖项发生改变，则更新页面，不就是<code>model</code>修改，<code>view</code>自动更新嘛。</p>\n<p><code>@nx-js/observer-util</code> 刚好就提供了类似的功能，只不过函数名叫<code>observe</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable, observe &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nx-js/observer-util&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title function_\">observable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">observe</span>(<span class=\"function\">() =&gt;</span> &#123;  <span class=\"comment\">// 每当数据改变 observe函数 就自动执行</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 当 obj.age 增加就会执行observe  19</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 当 obj.age 增加就会执行observe  20</span></span><br></pre></td></tr></table></figure>\n\n<p>理解了<code>响应式</code> 是什么，那接下来我们也一步步实现个响应式。</p>\n<h3 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h3><p>发布订阅模式是设计模式的一种，说个现实的例子，小刘、小红、小张去电脑城买电脑，但是没有优惠，于是给店员留了电话到电话本上，店员等电脑城搞活动，打电话通知这三个人。店员就是<code>发布者</code>，记录了电话的电话本就是<code>缓存列表</code>，消费者就是<code>订阅者</code> 。</p>\n<p>给DOM添加事件的<code>addEventListener</code>也是发布订阅。</p>\n<p>接下来我们模拟着实现一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暂时存放 watchEffect 的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用 Set 做订阅者列表 以防止列表中添加多个完全相同的函数</span></span><br><span class=\"line\">    subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 依赖收集方法</span></span><br><span class=\"line\">\t<span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 activeEffect 为空 则代表没有 watcheffect</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(activeEffect) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新操作 通常在值修改后执行 发布消息</span></span><br><span class=\"line\">\t<span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 watchEffect 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先把传进来的函数放到 activeEffect</span></span><br><span class=\"line\">    activeEffect = effect</span><br><span class=\"line\">    <span class=\"comment\">// 执行一下 watchEffect 里面的函数</span></span><br><span class=\"line\">    <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\"><span class=\"comment\">// 暂定一个全局变量 age</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> globalAge = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">age</span>() &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> globalAge</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">age</span>(<span class=\"params\">newAge</span>) &#123;</span><br><span class=\"line\">        globalAge = newAge</span><br><span class=\"line\">        dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">user.<span class=\"property\">age</span> += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>我们初步实现了最初的想法， 每当依赖项<code>user.age</code> 修改，都会执行<code>watchEffect</code>函数。</p>\n<p>而这里的 dep对象 就是<code>发布者</code>,  subscribers 就是<code>缓存列表</code> ，dep.notify() 是 <code>发布消息</code>。</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>虽然上边实现了功能，但是用起来太麻烦了，需要提供对象的 <code>getter</code>和<code>setter</code>，还要提供手动的执行依赖收集函数，这是不方便的，所以需要接着封装。</p>\n<p>封装前先简单聊一下<code>代理模式</code>， 代理简单说就是，我们需要租房，而我们是很难找到房源的，房源都在中介手里，这个中介就是代理，他给我们介绍什么房子，我们就拿到什么房子。</p>\n<p>那我们来一起简单实现下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ========= start 这里跟刚才一样 ===========</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(activeEffect) &#123;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> <span class=\"title function_\">effect</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    activeEffect = effect</span><br><span class=\"line\">    <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ========= end ===========</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 reactive</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reactive</span>(<span class=\"params\">raw</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历对象上存在的 key</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(raw).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为每个 key 都创建一个依赖对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> realValue = raw[key]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 用 get 和 set 重写原对象的key</span></span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(raw, key, &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在 get 和 set 里调用依赖对象的对应方法</span></span><br><span class=\"line\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">                <span class=\"keyword\">return</span> realValue</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">                realValue = newVal</span><br><span class=\"line\">                dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> raw</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>) &#125;</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(fn)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 每当修改 age 都会执行 fn 19</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span> += <span class=\"number\">1</span>  <span class=\"comment\">// 每当修改 age 都会执行 fn 20</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>Object.defineProperty</code>就是做的<code>代理模式</code> ，现在在使用方式上基本和 Vue3 一样了。</p>\n<p>但还不是最终版本，vue3已经放弃了 <code>IE</code>， 并且<code>Object.defineProperty    </code> 在监听对象时，新增的数据是监听不到的。</p>\n<p>所以使用了 <code>Proxy</code> 来做代理。</p>\n<h3 id=\"Proxy版\"><a href=\"#Proxy版\" class=\"headerlink\" title=\"Proxy版\"></a>Proxy版</h3><p>使用了发布订阅+代理模式实现基本的<code>reactivity</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个暂时存放 watchEffect 传进来的参数的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> activeEffect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个Dep应该是Dependence的缩写，意为依赖。实际上就相当于发布-订阅模式中的发布者类</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 Dep 类，该类将会为每一个响应式对象的每一个键生成一个发布者实例</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用 Set 做缓存列表以防止列表中添加多个完全相同的函数</span></span><br><span class=\"line\">  subscribers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 构造函数接受一个初始化的值放在私有变量内</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当使用 xxx.value 获取对象上的 value 值时</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">value</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理模式 当获取对象上的value属性的值时将会触发 depend 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后返回私有变量内的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当使用 xxx.value = xxx 修改对象上的 value 值时</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">value</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理模式 当修改对象上的value属性的值时将会触发 notify 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value</span><br><span class=\"line\">    <span class=\"comment\">// 先改值再触发 这样保证触发的时候用到的都是已经修改后的新值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这就是我们常说的依赖收集方法</span></span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 activeEffect 这个变量为空 就证明不是在 watchEffect 这个函数里面触发的 get 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (activeEffect) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 但如果 activeEffect 不为空就证明是在 watchEffect 里触发的 get 操作</span></span><br><span class=\"line\">      <span class=\"comment\">// 那就把 activeEffect 这个存着 watchEffect 参数的变量添加进缓存列表中</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">add</span>(activeEffect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新操作 通常会在值被修改后调用</span></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历缓存列表里存放的函数 并依次触发执行</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">effect</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 watchEffect 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">watchEffect</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 先把传进来的函数放入到 activeEffect 这个变量中</span></span><br><span class=\"line\">  activeEffect = effect</span><br><span class=\"line\">  <span class=\"comment\">// 然后执行 watchEffect 里面的函数</span></span><br><span class=\"line\">  <span class=\"title function_\">effect</span>()</span><br><span class=\"line\">  activeEffect = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 WeakMap 数据类型 用于存放 reactive 定义的对象以及他们的发布者对象集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetToHashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakMap</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 getDep 函数 用于获取 reactive 定义的对象所对应的发布者对象集里的某一个键对应的发布者对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getDep</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取 reactive 定义的对象所对应的发布者对象集</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> depMap = targetToHashMap.<span class=\"title function_\">get</span>(target)</span><br><span class=\"line\">  <span class=\"comment\">// 如果没获取到的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!depMap) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就新建一个空的发布者对象集</span></span><br><span class=\"line\">    depMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 然后再把这个发布者对象集存进 WeakMap 里</span></span><br><span class=\"line\">    targetToHashMap.<span class=\"title function_\">set</span>(target, depMap)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 再获取到这个发布者对象集里的某一个键所对应的发布者对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dep = depMap.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没获取到的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dep) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就新建一个发布者对象并初始化赋值</span></span><br><span class=\"line\">    dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>(target[key])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 然后将这个发布者对象放入到发布者对象集里</span></span><br><span class=\"line\">    depMap.<span class=\"title function_\">set</span>(key, dep)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 最后返回这个发布者对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dep</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模仿 Vue3 的 reactive 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reactive</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个传进来的参数对象的代理对象 以便使用代理模式拦截对象上的操作并应用发布-订阅模式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当触发 get 操作时</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">target, key</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先调用 getDep 函数取到里面存放的 value 值</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"title function_\">getDep</span>(target, key).<span class=\"property\">value</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 是对象的话</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; <span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 那就把 value 也变成一个响应式对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reactive</span>(value)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 value 只是基本数据类型的话就直接将值返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 当触发 set 操作时</span></span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">target, key, value</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用 getDep 函数并将里面存放的 value 值重新赋值成 set 操作的值</span></span><br><span class=\"line\">      <span class=\"title function_\">getDep</span>(target, key).<span class=\"property\">value</span> = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">age</span>++</span><br></pre></td></tr></table></figure>"},{"title":"Vue的虚拟列表","_content":"我们在渲染移动端页面时，有时会遇到特别多的数据，渲染这种列表就叫`长列表`\n\n`长列表`如果直接渲染到页面， 当列表项数过多并且列表项结构复杂的时候 ，会造正页面有大量的DOM需要处理，非常容易造成卡顿甚至卡死。\n\n常见的一种解决方式就是`虚拟列表`，那我们就来一起写一个简单的`虚拟列表`吧。\n\n<!-- more -->\n\n`虚拟列表`就是按需显示，既只对可视区域进行渲染，滚动出去的内容和将要出现的内容，不渲染或者部分渲染。\n\n假如屏幕高度(可视区域)是`750px`，每一项是`75px`高，屏幕只能展示出条数据，那我们在渲染时，就展示10条数据。\n\n屏幕发生滚动，我们就对应的修改这10条数据就可以了。\n\n接下来我们来具体实现下：\n\n### 模拟数据\n\n我们在父组件先准备一个 长度为10000的数据列表\n\n```js\nlet arr = new Array(1000).fill({}).map((item, index) => ({ \n  id: index,\n  title: `我是测试标题---${index}`,\n  avatar: `https://t11.baidu.com/it/u=2162308300,96045043&fm=58`\n}))\n\nlet itemHeight = 75\n```\n\n然后传递给子组件\n\n```vue\n <list :list=\"data\" :itemHeight=\"itemHeight\">  // 传入给子组件数据 和 每一项的高度\n     <template #default=\"{item}\">   // 这里使用插槽可以自定义子组件项目的展示样式\n         <div class=\"item-box\">\n             <img :src=\"item.avatar\" alt=\"\">\n             <span>{{ item.title }}</span>\n         </div>\n     </template>\n </list>\n```\n\n子组件进行接收数据\n\n```typescript\ninterface item {\n  id: number,\n  title: string,\n  avatar: string\n}\n\ninterface props {\n  list: Array<item>,\n  itemHeight?: number\n}\n\nlet Props = withDefaults(defineProps<props>(), {\n  itemHeight: 120\n})  // 这是是防止父组件不传递高度 设置一个子项默认值 120高\n\nlet {list, itemHeight} = toRefs(Props)  // 为了方便使用我们将数据结构出来\n```\n\n我们知道数据有一万条，可页面只能渲染大概10条数据，但是滚动条是希望出现的呀，所以在页面结构上我们需要花点心思路, 我们创建的`empty-box` 就是为了撑开`container-out`，让他有一个滚动条，那到底`empyt-box`盒子需要多高呢，我们就可以使用计算属性进行动态计算了，而`virtual-list`则是盛放滚动页面就修改的10条数据的。\n\n```vue\n<div class=\"container-out\">\n    <div class=\"container-scroll\">\n        <div class=\"empty-box\" :style=\"{height: emptyBoxHeight + 'px'}\"></div>\n        <div class=\"virtual-list\">\n\n        </div>\n    </div>   \n</div>\n\n<script setup lang='ts'>\n    ...\n    ...\n    const emptyBoxHeight = computed<number>(() => list.value.length * itemHeight.value) \n</script>\n\n<style scoped lang=\"less\">\n.container-out {\n  height: 100%;\n  width: 100%;\n}\n\n.container-scroll {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  .empty-box {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: -1;\n  }\n  .virtual-list {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n   }\n }\n</style>\n```\n\n页面撑开了，滚动条也是真实的滚动条需要的长度了，但是数据没准备了\n\n```vue\n<div class=\"container-out\">\n    <div class=\"container-scroll\" ref=\"containerScrollRef\">\n        <div class=\"empty-box\" :style=\"{height: emptyBoxHeight + 'px'}\"></div>\n        <div class=\"virtual-list\">\n            <!-- 将计算出的数据渲染到页面 -->\n            <div class=\"item\" v-for=\"item in renderList\" :key=\"item.id\">\n              <slot name=\"default\" :item=\"item\">\n                {{ item }}\n              </slot>\n            </div>\n        </div>\n    </div>   \n</div>\n\n<script>\n    ...\n    ...\n\tlet containerScrollRef = ref<HTMLDivElement>() // 获取到滚动盒子的容器\n   \tlet containerScrollRefHeight = computed<number>(() => {  // 获取滚动盒子的高度\n        return containerScrollRef.value ? containerScrollRef.value.clientHeight : 0\n    })\n    \n    let pageShowCount = computed<number>(() => {  // 计算一行展示多少条数据\n        return Math.ceil(containerScrollRefHeight / item.value)\n    })\n    \n    let start = ref<number>(0) \n\tlet end = computed<number>(() => start.value + pageShowCount.value)\n    \n    const renderList = computed(() => {\n        let realEnd = Math.min(end.value, list.value.length)  // 防止计算后的最后一条数据超出数组总长度\n        return list.slice(start, realEnd)  // 从list中截取出要渲染的数据\n    })\n</script>\n```\n\n接下来我们需要注册`滚动事件`了，当滚动滚动条，我们就需要将`virtual-list`通过css3的`transform`滚动应该滚动的距离，并重新计算要渲染的数据\n\n```vue\n<div class=\"container-out\">\n    <div class=\"container-scroll\" ref=\"containerScrollRef\" @scroll=\"onScroll\">\n        <div class=\"empty-box\" :style=\"{height: emptyBoxHeight + 'px'}\"></div>\n        <!-- 我们需要当页面滚动 也滚动virtual-list 这样才不会出现跳屏 -->\n        <div class=\"virtual-list\" :style=\"translateValueStyle\">\n            <!-- 将计算出的数据渲染到页面 -->\n            <div class=\"item\" v-for=\"item in renderList\" :key=\"item.id\">\n              <slot name=\"default\" :item=\"item\">\n                {{ item }}\n              </slot>\n            </div>\n        </div>\n    </div>   \n</div>\n\n<script>\n\t...\n    ...\n    function onScroll(event:UIEvent) {\n      let container = event.target as HTMLDivElement  // 获取 滚动容器\n\n      if(!container) return \n\n      const {scrollTop} = container  // 结构滚动容器滚动出去的距离\n      \n\t  // 计算新的需要渲染的数据开始的索引\n      start.value = Math.floor(scrollTop / itemHeight.value)  \n\n      // 相应的计算出虚拟列表滚动的距离  \n      translateValue.value = start.value * itemHeight.value\n    }\n    \n    const translateValue = ref<number>(0)\n\n    // 将css 滚动的距离通过 style绑定到页面\n    const translateValueStyle = computed(() => {\n      return `transform:translate(0, ${translateValue.value}px)`\n    })\n\n</script>\n```\n\n","source":"_posts/Vue/02-虚拟列表.md","raw":"---\ntitle: Vue的虚拟列表\ntags: Vue\n---\n我们在渲染移动端页面时，有时会遇到特别多的数据，渲染这种列表就叫`长列表`\n\n`长列表`如果直接渲染到页面， 当列表项数过多并且列表项结构复杂的时候 ，会造正页面有大量的DOM需要处理，非常容易造成卡顿甚至卡死。\n\n常见的一种解决方式就是`虚拟列表`，那我们就来一起写一个简单的`虚拟列表`吧。\n\n<!-- more -->\n\n`虚拟列表`就是按需显示，既只对可视区域进行渲染，滚动出去的内容和将要出现的内容，不渲染或者部分渲染。\n\n假如屏幕高度(可视区域)是`750px`，每一项是`75px`高，屏幕只能展示出条数据，那我们在渲染时，就展示10条数据。\n\n屏幕发生滚动，我们就对应的修改这10条数据就可以了。\n\n接下来我们来具体实现下：\n\n### 模拟数据\n\n我们在父组件先准备一个 长度为10000的数据列表\n\n```js\nlet arr = new Array(1000).fill({}).map((item, index) => ({ \n  id: index,\n  title: `我是测试标题---${index}`,\n  avatar: `https://t11.baidu.com/it/u=2162308300,96045043&fm=58`\n}))\n\nlet itemHeight = 75\n```\n\n然后传递给子组件\n\n```vue\n <list :list=\"data\" :itemHeight=\"itemHeight\">  // 传入给子组件数据 和 每一项的高度\n     <template #default=\"{item}\">   // 这里使用插槽可以自定义子组件项目的展示样式\n         <div class=\"item-box\">\n             <img :src=\"item.avatar\" alt=\"\">\n             <span>{{ item.title }}</span>\n         </div>\n     </template>\n </list>\n```\n\n子组件进行接收数据\n\n```typescript\ninterface item {\n  id: number,\n  title: string,\n  avatar: string\n}\n\ninterface props {\n  list: Array<item>,\n  itemHeight?: number\n}\n\nlet Props = withDefaults(defineProps<props>(), {\n  itemHeight: 120\n})  // 这是是防止父组件不传递高度 设置一个子项默认值 120高\n\nlet {list, itemHeight} = toRefs(Props)  // 为了方便使用我们将数据结构出来\n```\n\n我们知道数据有一万条，可页面只能渲染大概10条数据，但是滚动条是希望出现的呀，所以在页面结构上我们需要花点心思路, 我们创建的`empty-box` 就是为了撑开`container-out`，让他有一个滚动条，那到底`empyt-box`盒子需要多高呢，我们就可以使用计算属性进行动态计算了，而`virtual-list`则是盛放滚动页面就修改的10条数据的。\n\n```vue\n<div class=\"container-out\">\n    <div class=\"container-scroll\">\n        <div class=\"empty-box\" :style=\"{height: emptyBoxHeight + 'px'}\"></div>\n        <div class=\"virtual-list\">\n\n        </div>\n    </div>   \n</div>\n\n<script setup lang='ts'>\n    ...\n    ...\n    const emptyBoxHeight = computed<number>(() => list.value.length * itemHeight.value) \n</script>\n\n<style scoped lang=\"less\">\n.container-out {\n  height: 100%;\n  width: 100%;\n}\n\n.container-scroll {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  .empty-box {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: -1;\n  }\n  .virtual-list {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n   }\n }\n</style>\n```\n\n页面撑开了，滚动条也是真实的滚动条需要的长度了，但是数据没准备了\n\n```vue\n<div class=\"container-out\">\n    <div class=\"container-scroll\" ref=\"containerScrollRef\">\n        <div class=\"empty-box\" :style=\"{height: emptyBoxHeight + 'px'}\"></div>\n        <div class=\"virtual-list\">\n            <!-- 将计算出的数据渲染到页面 -->\n            <div class=\"item\" v-for=\"item in renderList\" :key=\"item.id\">\n              <slot name=\"default\" :item=\"item\">\n                {{ item }}\n              </slot>\n            </div>\n        </div>\n    </div>   \n</div>\n\n<script>\n    ...\n    ...\n\tlet containerScrollRef = ref<HTMLDivElement>() // 获取到滚动盒子的容器\n   \tlet containerScrollRefHeight = computed<number>(() => {  // 获取滚动盒子的高度\n        return containerScrollRef.value ? containerScrollRef.value.clientHeight : 0\n    })\n    \n    let pageShowCount = computed<number>(() => {  // 计算一行展示多少条数据\n        return Math.ceil(containerScrollRefHeight / item.value)\n    })\n    \n    let start = ref<number>(0) \n\tlet end = computed<number>(() => start.value + pageShowCount.value)\n    \n    const renderList = computed(() => {\n        let realEnd = Math.min(end.value, list.value.length)  // 防止计算后的最后一条数据超出数组总长度\n        return list.slice(start, realEnd)  // 从list中截取出要渲染的数据\n    })\n</script>\n```\n\n接下来我们需要注册`滚动事件`了，当滚动滚动条，我们就需要将`virtual-list`通过css3的`transform`滚动应该滚动的距离，并重新计算要渲染的数据\n\n```vue\n<div class=\"container-out\">\n    <div class=\"container-scroll\" ref=\"containerScrollRef\" @scroll=\"onScroll\">\n        <div class=\"empty-box\" :style=\"{height: emptyBoxHeight + 'px'}\"></div>\n        <!-- 我们需要当页面滚动 也滚动virtual-list 这样才不会出现跳屏 -->\n        <div class=\"virtual-list\" :style=\"translateValueStyle\">\n            <!-- 将计算出的数据渲染到页面 -->\n            <div class=\"item\" v-for=\"item in renderList\" :key=\"item.id\">\n              <slot name=\"default\" :item=\"item\">\n                {{ item }}\n              </slot>\n            </div>\n        </div>\n    </div>   \n</div>\n\n<script>\n\t...\n    ...\n    function onScroll(event:UIEvent) {\n      let container = event.target as HTMLDivElement  // 获取 滚动容器\n\n      if(!container) return \n\n      const {scrollTop} = container  // 结构滚动容器滚动出去的距离\n      \n\t  // 计算新的需要渲染的数据开始的索引\n      start.value = Math.floor(scrollTop / itemHeight.value)  \n\n      // 相应的计算出虚拟列表滚动的距离  \n      translateValue.value = start.value * itemHeight.value\n    }\n    \n    const translateValue = ref<number>(0)\n\n    // 将css 滚动的距离通过 style绑定到页面\n    const translateValueStyle = computed(() => {\n      return `transform:translate(0, ${translateValue.value}px)`\n    })\n\n</script>\n```\n\n","slug":"Vue/02-虚拟列表","published":1,"date":"2023-03-17T13:09:00.237Z","updated":"2023-03-17T13:09:00.237Z","_id":"clf6yh1qh000w8cuphevmeq12","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们在渲染移动端页面时，有时会遇到特别多的数据，渲染这种列表就叫<code>长列表</code></p>\n<p><code>长列表</code>如果直接渲染到页面， 当列表项数过多并且列表项结构复杂的时候 ，会造正页面有大量的DOM需要处理，非常容易造成卡顿甚至卡死。</p>\n<p>常见的一种解决方式就是<code>虚拟列表</code>，那我们就来一起写一个简单的<code>虚拟列表</code>吧。</p>\n<span id=\"more\"></span>\n\n<p><code>虚拟列表</code>就是按需显示，既只对可视区域进行渲染，滚动出去的内容和将要出现的内容，不渲染或者部分渲染。</p>\n<p>假如屏幕高度(可视区域)是<code>750px</code>，每一项是<code>75px</code>高，屏幕只能展示出条数据，那我们在渲染时，就展示10条数据。</p>\n<p>屏幕发生滚动，我们就对应的修改这10条数据就可以了。</p>\n<p>接下来我们来具体实现下：</p>\n<h3 id=\"模拟数据\"><a href=\"#模拟数据\" class=\"headerlink\" title=\"模拟数据\"></a>模拟数据</h3><p>我们在父组件先准备一个 长度为10000的数据列表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">fill</span>(&#123;&#125;).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> (&#123; </span><br><span class=\"line\">  <span class=\"attr\">id</span>: index,</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">`我是测试标题---<span class=\"subst\">$&#123;index&#125;</span>`</span>,</span><br><span class=\"line\">  <span class=\"attr\">avatar</span>: <span class=\"string\">`https://t11.baidu.com/it/u=2162308300,96045043&amp;fm=58`</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> itemHeight = <span class=\"number\">75</span></span><br></pre></td></tr></table></figure>\n\n<p>然后传递给子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;list :list=&quot;data&quot; :itemHeight=&quot;itemHeight&quot;&gt;  // 传入给子组件数据 和 每一项的高度</span><br><span class=\"line\">    &lt;template #default=&quot;&#123;item&#125;&quot;&gt;   // 这里使用插槽可以自定义子组件项目的展示样式</span><br><span class=\"line\">        &lt;div class=&quot;item-box&quot;&gt;</span><br><span class=\"line\">            &lt;img :src=&quot;item.avatar&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;&#123;&#123; item.title &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">&lt;/list&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件进行接收数据</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> item &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">avatar</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> props &#123;</span><br><span class=\"line\">  <span class=\"attr\">list</span>: <span class=\"title class_\">Array</span>&lt;item&gt;,</span><br><span class=\"line\">  itemHeight?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Props</span> = <span class=\"title function_\">withDefaults</span>(defineProps&lt;props&gt;(), &#123;</span><br><span class=\"line\">  <span class=\"attr\">itemHeight</span>: <span class=\"number\">120</span></span><br><span class=\"line\">&#125;)  <span class=\"comment\">// 这是是防止父组件不传递高度 设置一个子项默认值 120高</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;list, itemHeight&#125; = <span class=\"title function_\">toRefs</span>(<span class=\"title class_\">Props</span>)  <span class=\"comment\">// 为了方便使用我们将数据结构出来</span></span><br></pre></td></tr></table></figure>\n\n<p>我们知道数据有一万条，可页面只能渲染大概10条数据，但是滚动条是希望出现的呀，所以在页面结构上我们需要花点心思路, 我们创建的<code>empty-box</code> 就是为了撑开<code>container-out</code>，让他有一个滚动条，那到底<code>empyt-box</code>盒子需要多高呢，我们就可以使用计算属性进行动态计算了，而<code>virtual-list</code>则是盛放滚动页面就修改的10条数据的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container-out&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container-scroll&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;empty-box&quot; :style=&quot;&#123;height: emptyBoxHeight + &#x27;px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;virtual-list&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;   </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    const emptyBoxHeight = computed&lt;number&gt;(() =&gt; list.value.length * itemHeight.value) </span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class=\"line\">.container-out &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container-scroll &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  overflow: auto;</span><br><span class=\"line\">  .empty-box &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    z-index: -1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .virtual-list &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面撑开了，滚动条也是真实的滚动条需要的长度了，但是数据没准备了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container-out&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container-scroll&quot; ref=&quot;containerScrollRef&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;empty-box&quot; :style=&quot;&#123;height: emptyBoxHeight + &#x27;px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;virtual-list&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 将计算出的数据渲染到页面 --&gt;</span><br><span class=\"line\">            &lt;div class=&quot;item&quot; v-for=&quot;item in renderList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class=\"line\">              &lt;slot name=&quot;default&quot; :item=&quot;item&quot;&gt;</span><br><span class=\"line\">                &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">              &lt;/slot&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;   </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\tlet containerScrollRef = ref&lt;HTMLDivElement&gt;() // 获取到滚动盒子的容器</span><br><span class=\"line\">   \tlet containerScrollRefHeight = computed&lt;number&gt;(() =&gt; &#123;  // 获取滚动盒子的高度</span><br><span class=\"line\">        return containerScrollRef.value ? containerScrollRef.value.clientHeight : 0</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    let pageShowCount = computed&lt;number&gt;(() =&gt; &#123;  // 计算一行展示多少条数据</span><br><span class=\"line\">        return Math.ceil(containerScrollRefHeight / item.value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    let start = ref&lt;number&gt;(0) </span><br><span class=\"line\">\tlet end = computed&lt;number&gt;(() =&gt; start.value + pageShowCount.value)</span><br><span class=\"line\">    </span><br><span class=\"line\">    const renderList = computed(() =&gt; &#123;</span><br><span class=\"line\">        let realEnd = Math.min(end.value, list.value.length)  // 防止计算后的最后一条数据超出数组总长度</span><br><span class=\"line\">        return list.slice(start, realEnd)  // 从list中截取出要渲染的数据</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们需要注册<code>滚动事件</code>了，当滚动滚动条，我们就需要将<code>virtual-list</code>通过css3的<code>transform</code>滚动应该滚动的距离，并重新计算要渲染的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container-out&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container-scroll&quot; ref=&quot;containerScrollRef&quot; @scroll=&quot;onScroll&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;empty-box&quot; :style=&quot;&#123;height: emptyBoxHeight + &#x27;px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;!-- 我们需要当页面滚动 也滚动virtual-list 这样才不会出现跳屏 --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;virtual-list&quot; :style=&quot;translateValueStyle&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 将计算出的数据渲染到页面 --&gt;</span><br><span class=\"line\">            &lt;div class=&quot;item&quot; v-for=&quot;item in renderList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class=\"line\">              &lt;slot name=&quot;default&quot; :item=&quot;item&quot;&gt;</span><br><span class=\"line\">                &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">              &lt;/slot&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;   </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    function onScroll(event:UIEvent) &#123;</span><br><span class=\"line\">      let container = event.target as HTMLDivElement  // 获取 滚动容器</span><br><span class=\"line\"></span><br><span class=\"line\">      if(!container) return </span><br><span class=\"line\"></span><br><span class=\"line\">      const &#123;scrollTop&#125; = container  // 结构滚动容器滚动出去的距离</span><br><span class=\"line\">      </span><br><span class=\"line\">\t  // 计算新的需要渲染的数据开始的索引</span><br><span class=\"line\">      start.value = Math.floor(scrollTop / itemHeight.value)  </span><br><span class=\"line\"></span><br><span class=\"line\">      // 相应的计算出虚拟列表滚动的距离  </span><br><span class=\"line\">      translateValue.value = start.value * itemHeight.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    const translateValue = ref&lt;number&gt;(0)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将css 滚动的距离通过 style绑定到页面</span><br><span class=\"line\">    const translateValueStyle = computed(() =&gt; &#123;</span><br><span class=\"line\">      return `transform:translate(0, $&#123;translateValue.value&#125;px)`</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>我们在渲染移动端页面时，有时会遇到特别多的数据，渲染这种列表就叫<code>长列表</code></p>\n<p><code>长列表</code>如果直接渲染到页面， 当列表项数过多并且列表项结构复杂的时候 ，会造正页面有大量的DOM需要处理，非常容易造成卡顿甚至卡死。</p>\n<p>常见的一种解决方式就是<code>虚拟列表</code>，那我们就来一起写一个简单的<code>虚拟列表</code>吧。</p>","more":"<p><code>虚拟列表</code>就是按需显示，既只对可视区域进行渲染，滚动出去的内容和将要出现的内容，不渲染或者部分渲染。</p>\n<p>假如屏幕高度(可视区域)是<code>750px</code>，每一项是<code>75px</code>高，屏幕只能展示出条数据，那我们在渲染时，就展示10条数据。</p>\n<p>屏幕发生滚动，我们就对应的修改这10条数据就可以了。</p>\n<p>接下来我们来具体实现下：</p>\n<h3 id=\"模拟数据\"><a href=\"#模拟数据\" class=\"headerlink\" title=\"模拟数据\"></a>模拟数据</h3><p>我们在父组件先准备一个 长度为10000的数据列表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">fill</span>(&#123;&#125;).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> (&#123; </span><br><span class=\"line\">  <span class=\"attr\">id</span>: index,</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">`我是测试标题---<span class=\"subst\">$&#123;index&#125;</span>`</span>,</span><br><span class=\"line\">  <span class=\"attr\">avatar</span>: <span class=\"string\">`https://t11.baidu.com/it/u=2162308300,96045043&amp;fm=58`</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> itemHeight = <span class=\"number\">75</span></span><br></pre></td></tr></table></figure>\n\n<p>然后传递给子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;list :list=&quot;data&quot; :itemHeight=&quot;itemHeight&quot;&gt;  // 传入给子组件数据 和 每一项的高度</span><br><span class=\"line\">    &lt;template #default=&quot;&#123;item&#125;&quot;&gt;   // 这里使用插槽可以自定义子组件项目的展示样式</span><br><span class=\"line\">        &lt;div class=&quot;item-box&quot;&gt;</span><br><span class=\"line\">            &lt;img :src=&quot;item.avatar&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;&#123;&#123; item.title &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">&lt;/list&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件进行接收数据</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> item &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">avatar</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> props &#123;</span><br><span class=\"line\">  <span class=\"attr\">list</span>: <span class=\"title class_\">Array</span>&lt;item&gt;,</span><br><span class=\"line\">  itemHeight?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Props</span> = <span class=\"title function_\">withDefaults</span>(defineProps&lt;props&gt;(), &#123;</span><br><span class=\"line\">  <span class=\"attr\">itemHeight</span>: <span class=\"number\">120</span></span><br><span class=\"line\">&#125;)  <span class=\"comment\">// 这是是防止父组件不传递高度 设置一个子项默认值 120高</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;list, itemHeight&#125; = <span class=\"title function_\">toRefs</span>(<span class=\"title class_\">Props</span>)  <span class=\"comment\">// 为了方便使用我们将数据结构出来</span></span><br></pre></td></tr></table></figure>\n\n<p>我们知道数据有一万条，可页面只能渲染大概10条数据，但是滚动条是希望出现的呀，所以在页面结构上我们需要花点心思路, 我们创建的<code>empty-box</code> 就是为了撑开<code>container-out</code>，让他有一个滚动条，那到底<code>empyt-box</code>盒子需要多高呢，我们就可以使用计算属性进行动态计算了，而<code>virtual-list</code>则是盛放滚动页面就修改的10条数据的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container-out&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container-scroll&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;empty-box&quot; :style=&quot;&#123;height: emptyBoxHeight + &#x27;px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;virtual-list&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;   </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    const emptyBoxHeight = computed&lt;number&gt;(() =&gt; list.value.length * itemHeight.value) </span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class=\"line\">.container-out &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container-scroll &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  overflow: auto;</span><br><span class=\"line\">  .empty-box &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    z-index: -1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .virtual-list &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面撑开了，滚动条也是真实的滚动条需要的长度了，但是数据没准备了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container-out&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container-scroll&quot; ref=&quot;containerScrollRef&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;empty-box&quot; :style=&quot;&#123;height: emptyBoxHeight + &#x27;px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;virtual-list&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 将计算出的数据渲染到页面 --&gt;</span><br><span class=\"line\">            &lt;div class=&quot;item&quot; v-for=&quot;item in renderList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class=\"line\">              &lt;slot name=&quot;default&quot; :item=&quot;item&quot;&gt;</span><br><span class=\"line\">                &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">              &lt;/slot&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;   </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\tlet containerScrollRef = ref&lt;HTMLDivElement&gt;() // 获取到滚动盒子的容器</span><br><span class=\"line\">   \tlet containerScrollRefHeight = computed&lt;number&gt;(() =&gt; &#123;  // 获取滚动盒子的高度</span><br><span class=\"line\">        return containerScrollRef.value ? containerScrollRef.value.clientHeight : 0</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    let pageShowCount = computed&lt;number&gt;(() =&gt; &#123;  // 计算一行展示多少条数据</span><br><span class=\"line\">        return Math.ceil(containerScrollRefHeight / item.value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    let start = ref&lt;number&gt;(0) </span><br><span class=\"line\">\tlet end = computed&lt;number&gt;(() =&gt; start.value + pageShowCount.value)</span><br><span class=\"line\">    </span><br><span class=\"line\">    const renderList = computed(() =&gt; &#123;</span><br><span class=\"line\">        let realEnd = Math.min(end.value, list.value.length)  // 防止计算后的最后一条数据超出数组总长度</span><br><span class=\"line\">        return list.slice(start, realEnd)  // 从list中截取出要渲染的数据</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们需要注册<code>滚动事件</code>了，当滚动滚动条，我们就需要将<code>virtual-list</code>通过css3的<code>transform</code>滚动应该滚动的距离，并重新计算要渲染的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container-out&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container-scroll&quot; ref=&quot;containerScrollRef&quot; @scroll=&quot;onScroll&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;empty-box&quot; :style=&quot;&#123;height: emptyBoxHeight + &#x27;px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;!-- 我们需要当页面滚动 也滚动virtual-list 这样才不会出现跳屏 --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;virtual-list&quot; :style=&quot;translateValueStyle&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 将计算出的数据渲染到页面 --&gt;</span><br><span class=\"line\">            &lt;div class=&quot;item&quot; v-for=&quot;item in renderList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class=\"line\">              &lt;slot name=&quot;default&quot; :item=&quot;item&quot;&gt;</span><br><span class=\"line\">                &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">              &lt;/slot&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;   </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    function onScroll(event:UIEvent) &#123;</span><br><span class=\"line\">      let container = event.target as HTMLDivElement  // 获取 滚动容器</span><br><span class=\"line\"></span><br><span class=\"line\">      if(!container) return </span><br><span class=\"line\"></span><br><span class=\"line\">      const &#123;scrollTop&#125; = container  // 结构滚动容器滚动出去的距离</span><br><span class=\"line\">      </span><br><span class=\"line\">\t  // 计算新的需要渲染的数据开始的索引</span><br><span class=\"line\">      start.value = Math.floor(scrollTop / itemHeight.value)  </span><br><span class=\"line\"></span><br><span class=\"line\">      // 相应的计算出虚拟列表滚动的距离  </span><br><span class=\"line\">      translateValue.value = start.value * itemHeight.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    const translateValue = ref&lt;number&gt;(0)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将css 滚动的距离通过 style绑定到页面</span><br><span class=\"line\">    const translateValueStyle = computed(() =&gt; &#123;</span><br><span class=\"line\">      return `transform:translate(0, $&#123;translateValue.value&#125;px)`</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"互联网是如何运作","_content":"### 客户端和服务端通信\n电脑连入互联网，电脑就会获得一个IP(internet  protocol address)地址。\n服务器接入互联网，也会获得一个IP地址， 我们常说的访问这个网站，其实就是访问这个网站的服务器的IP地址。\n假如你的电脑想访问服务器，那么这个时候电脑就是客户端，服务器就是服务端， 这种形式也就是客户端服务端模型。\n<!-- more -->\n\n客户端想访问 ``index.html``， 文本数据会转换成电子信号，通过电缆发送给服务器，在服务器端，再将电子信号转换成计算机使用的文本数据。\n那么到底如何传递呢，就要通过 ``TCP/IP协议族``，协议就是一种规则，用于指定计算机应该如何通过网络来相互通信。\n\n``TCP/IP协议族``分为自顶向下的4层，网络协议通过分层，来实现每一层的职责。\n1. 应用层：提供特定于应用程序的协议， HTTP(浏览器和服务器相互通信)、FTP(文件传输)、IMAP(邮件客户端检索)\n2. TCP传输控制层：发送数据包到计算机特定端口号的应用程序\n3. IP网络层 使用IP地址将数据包 发送到特定的计算机\n4. 链路层：将二进制数据包与网络信号相互转换\n\n我们想请求的 ``index.html`` 首先分解为许多片段，我们称之为数据包。然后经过应用层来到TCP传输层，将每一个数据包分配端口号，然后进入网络层，每个数据包将赋予目标计算机的IP地址，最后进入链路层，将数据包的文本信息转译成电子信号，通过电缆传输。\n在电缆的另一端的路由器，去检查每一个数据包的目标地址，并确定将其发送到何处，最终数据包到达指定的服务器后，数据包将从``TCP/IP协议族``的底部开始向上运行，在数据通过``TCP/IP协议族``的过程时，数据包的路由数据(例如IP地址，端口号)都将剥离出去，当数据包到达协议族应用层时，数据已经恢复成原始文本数据，通过端口号找到对应应用程序，应用程序根据请求内容做出响应。\n比如刚才的``index.html``，服务器将数据，通过刚才客户端请求服务器的相同的方式，响应给客户端，这样就看到了首页内容，也就是完成了一次客户端与服务器在互联网中的数据交互。\n\n这里需要注意下：\n1. TCP是可靠的连接协议，在建立连接是需要进行三次握手，每个收到的数据包都会向发送方发送``ack确认``，以确保发送成功。\n2. IP是不可靠的无连接协议，他不关心数据包是否到达，也不关心端口和地址，只关心连接到目标IP地址。\n3. 当数据包比较大，在网络层会进行分包处理，分包后到达时间不一样，TCP会根据数据包携带的序列号排序重组，如果发送方在特定时间没有接收到接收方发送的ack确认，会再次重新发送。\n4. IP 是一种协议，分为IPV4(2^32次方) 和 IPV6(2^128次方)，IP地址是一串数组 192.168.1.1\n\n### 互联网怎么构成的\n电脑通过调制解调器moden，也就是俗称的``猫``， 将数字电信号转换成可延电话线传播的模拟信号后，在公共电话网络进行传输，公共电话网络通过连接``ISP``(internet server provider 互联网服务提供商，比如我们的电信、移动、联通)来接入互联网，通过``ISP``将连接到``ISP``的主干网络也就是``NSP(network server provider)``, ``ISP``可以从``NSP``批量购买带宽，为客户提供网络接入服务，``NSP``通过网络访问点``NAP``相连接，来交换数据包流量，每个``NSP``必须至少连接三个``NAP``，``NSP``主干可以通过``NAP``链接到另一个``NSP``主干，当然互联网架构不会这么简单，这里只是一个简化 ，那互联网到底如何将数据包找到正确路线呢，互联网中有一个特殊的计算器``路由器`` ,``路由器``上有一个``路由表``，记录了子网络所有IP地址，但是他不知道上层网络所包含的IP地址，当数据到达路由器，路由器检查路由表是否有对应的IP地址，如果有则直接发送给对应的网络，没有则向上层传递数据包在更高层级的路由器查找IP地址，如果依然没找到，则接着向上层找，直到到达``NSP``主干网为止，连接到``NSP``主干网的路由器拥有最大的路由表，通过这张表可以将数据包发送到正确的骨干网，然后向下传播，直到找到目的地为止，电脑连接服务器就是这样一个过程。\n\n但是也有一个问题，我们是不可能记住IP地址的，并且IP地址也可能更换，所有就会有一个域名，那浏览器怎么通过域名知道访问哪个IP地址呢，就要依靠一个叫``DNS``(domain names service)服务器， 上面记录了IP地址和域名的对应关系，在浏览器输入网址，浏览器首先访问``DNS服务器``，获取到该域名的IP地址后 ，浏览器再访问该IP地址的服务器。\n\n","source":"_posts/网络/01-互联网如何运作.md","raw":"---\ntitle: 互联网是如何运作\ntags: 网络\n---\n### 客户端和服务端通信\n电脑连入互联网，电脑就会获得一个IP(internet  protocol address)地址。\n服务器接入互联网，也会获得一个IP地址， 我们常说的访问这个网站，其实就是访问这个网站的服务器的IP地址。\n假如你的电脑想访问服务器，那么这个时候电脑就是客户端，服务器就是服务端， 这种形式也就是客户端服务端模型。\n<!-- more -->\n\n客户端想访问 ``index.html``， 文本数据会转换成电子信号，通过电缆发送给服务器，在服务器端，再将电子信号转换成计算机使用的文本数据。\n那么到底如何传递呢，就要通过 ``TCP/IP协议族``，协议就是一种规则，用于指定计算机应该如何通过网络来相互通信。\n\n``TCP/IP协议族``分为自顶向下的4层，网络协议通过分层，来实现每一层的职责。\n1. 应用层：提供特定于应用程序的协议， HTTP(浏览器和服务器相互通信)、FTP(文件传输)、IMAP(邮件客户端检索)\n2. TCP传输控制层：发送数据包到计算机特定端口号的应用程序\n3. IP网络层 使用IP地址将数据包 发送到特定的计算机\n4. 链路层：将二进制数据包与网络信号相互转换\n\n我们想请求的 ``index.html`` 首先分解为许多片段，我们称之为数据包。然后经过应用层来到TCP传输层，将每一个数据包分配端口号，然后进入网络层，每个数据包将赋予目标计算机的IP地址，最后进入链路层，将数据包的文本信息转译成电子信号，通过电缆传输。\n在电缆的另一端的路由器，去检查每一个数据包的目标地址，并确定将其发送到何处，最终数据包到达指定的服务器后，数据包将从``TCP/IP协议族``的底部开始向上运行，在数据通过``TCP/IP协议族``的过程时，数据包的路由数据(例如IP地址，端口号)都将剥离出去，当数据包到达协议族应用层时，数据已经恢复成原始文本数据，通过端口号找到对应应用程序，应用程序根据请求内容做出响应。\n比如刚才的``index.html``，服务器将数据，通过刚才客户端请求服务器的相同的方式，响应给客户端，这样就看到了首页内容，也就是完成了一次客户端与服务器在互联网中的数据交互。\n\n这里需要注意下：\n1. TCP是可靠的连接协议，在建立连接是需要进行三次握手，每个收到的数据包都会向发送方发送``ack确认``，以确保发送成功。\n2. IP是不可靠的无连接协议，他不关心数据包是否到达，也不关心端口和地址，只关心连接到目标IP地址。\n3. 当数据包比较大，在网络层会进行分包处理，分包后到达时间不一样，TCP会根据数据包携带的序列号排序重组，如果发送方在特定时间没有接收到接收方发送的ack确认，会再次重新发送。\n4. IP 是一种协议，分为IPV4(2^32次方) 和 IPV6(2^128次方)，IP地址是一串数组 192.168.1.1\n\n### 互联网怎么构成的\n电脑通过调制解调器moden，也就是俗称的``猫``， 将数字电信号转换成可延电话线传播的模拟信号后，在公共电话网络进行传输，公共电话网络通过连接``ISP``(internet server provider 互联网服务提供商，比如我们的电信、移动、联通)来接入互联网，通过``ISP``将连接到``ISP``的主干网络也就是``NSP(network server provider)``, ``ISP``可以从``NSP``批量购买带宽，为客户提供网络接入服务，``NSP``通过网络访问点``NAP``相连接，来交换数据包流量，每个``NSP``必须至少连接三个``NAP``，``NSP``主干可以通过``NAP``链接到另一个``NSP``主干，当然互联网架构不会这么简单，这里只是一个简化 ，那互联网到底如何将数据包找到正确路线呢，互联网中有一个特殊的计算器``路由器`` ,``路由器``上有一个``路由表``，记录了子网络所有IP地址，但是他不知道上层网络所包含的IP地址，当数据到达路由器，路由器检查路由表是否有对应的IP地址，如果有则直接发送给对应的网络，没有则向上层传递数据包在更高层级的路由器查找IP地址，如果依然没找到，则接着向上层找，直到到达``NSP``主干网为止，连接到``NSP``主干网的路由器拥有最大的路由表，通过这张表可以将数据包发送到正确的骨干网，然后向下传播，直到找到目的地为止，电脑连接服务器就是这样一个过程。\n\n但是也有一个问题，我们是不可能记住IP地址的，并且IP地址也可能更换，所有就会有一个域名，那浏览器怎么通过域名知道访问哪个IP地址呢，就要依靠一个叫``DNS``(domain names service)服务器， 上面记录了IP地址和域名的对应关系，在浏览器输入网址，浏览器首先访问``DNS服务器``，获取到该域名的IP地址后 ，浏览器再访问该IP地址的服务器。\n\n","slug":"网络/01-互联网如何运作","published":1,"date":"2023-03-17T13:09:00.237Z","updated":"2023-03-17T13:09:00.237Z","_id":"clf6yh1qi000y8cup8ztk3k8w","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"客户端和服务端通信\"><a href=\"#客户端和服务端通信\" class=\"headerlink\" title=\"客户端和服务端通信\"></a>客户端和服务端通信</h3><p>电脑连入互联网，电脑就会获得一个IP(internet  protocol address)地址。<br>服务器接入互联网，也会获得一个IP地址， 我们常说的访问这个网站，其实就是访问这个网站的服务器的IP地址。<br>假如你的电脑想访问服务器，那么这个时候电脑就是客户端，服务器就是服务端， 这种形式也就是客户端服务端模型。</p>\n<span id=\"more\"></span>\n\n<p>客户端想访问 <code>index.html</code>， 文本数据会转换成电子信号，通过电缆发送给服务器，在服务器端，再将电子信号转换成计算机使用的文本数据。<br>那么到底如何传递呢，就要通过 <code>TCP/IP协议族</code>，协议就是一种规则，用于指定计算机应该如何通过网络来相互通信。</p>\n<p><code>TCP/IP协议族</code>分为自顶向下的4层，网络协议通过分层，来实现每一层的职责。</p>\n<ol>\n<li>应用层：提供特定于应用程序的协议， HTTP(浏览器和服务器相互通信)、FTP(文件传输)、IMAP(邮件客户端检索)</li>\n<li>TCP传输控制层：发送数据包到计算机特定端口号的应用程序</li>\n<li>IP网络层 使用IP地址将数据包 发送到特定的计算机</li>\n<li>链路层：将二进制数据包与网络信号相互转换</li>\n</ol>\n<p>我们想请求的 <code>index.html</code> 首先分解为许多片段，我们称之为数据包。然后经过应用层来到TCP传输层，将每一个数据包分配端口号，然后进入网络层，每个数据包将赋予目标计算机的IP地址，最后进入链路层，将数据包的文本信息转译成电子信号，通过电缆传输。<br>在电缆的另一端的路由器，去检查每一个数据包的目标地址，并确定将其发送到何处，最终数据包到达指定的服务器后，数据包将从<code>TCP/IP协议族</code>的底部开始向上运行，在数据通过<code>TCP/IP协议族</code>的过程时，数据包的路由数据(例如IP地址，端口号)都将剥离出去，当数据包到达协议族应用层时，数据已经恢复成原始文本数据，通过端口号找到对应应用程序，应用程序根据请求内容做出响应。<br>比如刚才的<code>index.html</code>，服务器将数据，通过刚才客户端请求服务器的相同的方式，响应给客户端，这样就看到了首页内容，也就是完成了一次客户端与服务器在互联网中的数据交互。</p>\n<p>这里需要注意下：</p>\n<ol>\n<li>TCP是可靠的连接协议，在建立连接是需要进行三次握手，每个收到的数据包都会向发送方发送<code>ack确认</code>，以确保发送成功。</li>\n<li>IP是不可靠的无连接协议，他不关心数据包是否到达，也不关心端口和地址，只关心连接到目标IP地址。</li>\n<li>当数据包比较大，在网络层会进行分包处理，分包后到达时间不一样，TCP会根据数据包携带的序列号排序重组，如果发送方在特定时间没有接收到接收方发送的ack确认，会再次重新发送。</li>\n<li>IP 是一种协议，分为IPV4(2^32次方) 和 IPV6(2^128次方)，IP地址是一串数组 192.168.1.1</li>\n</ol>\n<h3 id=\"互联网怎么构成的\"><a href=\"#互联网怎么构成的\" class=\"headerlink\" title=\"互联网怎么构成的\"></a>互联网怎么构成的</h3><p>电脑通过调制解调器moden，也就是俗称的<code>猫</code>， 将数字电信号转换成可延电话线传播的模拟信号后，在公共电话网络进行传输，公共电话网络通过连接<code>ISP</code>(internet server provider 互联网服务提供商，比如我们的电信、移动、联通)来接入互联网，通过<code>ISP</code>将连接到<code>ISP</code>的主干网络也就是<code>NSP(network server provider)</code>, <code>ISP</code>可以从<code>NSP</code>批量购买带宽，为客户提供网络接入服务，<code>NSP</code>通过网络访问点<code>NAP</code>相连接，来交换数据包流量，每个<code>NSP</code>必须至少连接三个<code>NAP</code>，<code>NSP</code>主干可以通过<code>NAP</code>链接到另一个<code>NSP</code>主干，当然互联网架构不会这么简单，这里只是一个简化 ，那互联网到底如何将数据包找到正确路线呢，互联网中有一个特殊的计算器<code>路由器</code> ,<code>路由器</code>上有一个<code>路由表</code>，记录了子网络所有IP地址，但是他不知道上层网络所包含的IP地址，当数据到达路由器，路由器检查路由表是否有对应的IP地址，如果有则直接发送给对应的网络，没有则向上层传递数据包在更高层级的路由器查找IP地址，如果依然没找到，则接着向上层找，直到到达<code>NSP</code>主干网为止，连接到<code>NSP</code>主干网的路由器拥有最大的路由表，通过这张表可以将数据包发送到正确的骨干网，然后向下传播，直到找到目的地为止，电脑连接服务器就是这样一个过程。</p>\n<p>但是也有一个问题，我们是不可能记住IP地址的，并且IP地址也可能更换，所有就会有一个域名，那浏览器怎么通过域名知道访问哪个IP地址呢，就要依靠一个叫<code>DNS</code>(domain names service)服务器， 上面记录了IP地址和域名的对应关系，在浏览器输入网址，浏览器首先访问<code>DNS服务器</code>，获取到该域名的IP地址后 ，浏览器再访问该IP地址的服务器。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"客户端和服务端通信\"><a href=\"#客户端和服务端通信\" class=\"headerlink\" title=\"客户端和服务端通信\"></a>客户端和服务端通信</h3><p>电脑连入互联网，电脑就会获得一个IP(internet  protocol address)地址。<br>服务器接入互联网，也会获得一个IP地址， 我们常说的访问这个网站，其实就是访问这个网站的服务器的IP地址。<br>假如你的电脑想访问服务器，那么这个时候电脑就是客户端，服务器就是服务端， 这种形式也就是客户端服务端模型。</p>","more":"<p>客户端想访问 <code>index.html</code>， 文本数据会转换成电子信号，通过电缆发送给服务器，在服务器端，再将电子信号转换成计算机使用的文本数据。<br>那么到底如何传递呢，就要通过 <code>TCP/IP协议族</code>，协议就是一种规则，用于指定计算机应该如何通过网络来相互通信。</p>\n<p><code>TCP/IP协议族</code>分为自顶向下的4层，网络协议通过分层，来实现每一层的职责。</p>\n<ol>\n<li>应用层：提供特定于应用程序的协议， HTTP(浏览器和服务器相互通信)、FTP(文件传输)、IMAP(邮件客户端检索)</li>\n<li>TCP传输控制层：发送数据包到计算机特定端口号的应用程序</li>\n<li>IP网络层 使用IP地址将数据包 发送到特定的计算机</li>\n<li>链路层：将二进制数据包与网络信号相互转换</li>\n</ol>\n<p>我们想请求的 <code>index.html</code> 首先分解为许多片段，我们称之为数据包。然后经过应用层来到TCP传输层，将每一个数据包分配端口号，然后进入网络层，每个数据包将赋予目标计算机的IP地址，最后进入链路层，将数据包的文本信息转译成电子信号，通过电缆传输。<br>在电缆的另一端的路由器，去检查每一个数据包的目标地址，并确定将其发送到何处，最终数据包到达指定的服务器后，数据包将从<code>TCP/IP协议族</code>的底部开始向上运行，在数据通过<code>TCP/IP协议族</code>的过程时，数据包的路由数据(例如IP地址，端口号)都将剥离出去，当数据包到达协议族应用层时，数据已经恢复成原始文本数据，通过端口号找到对应应用程序，应用程序根据请求内容做出响应。<br>比如刚才的<code>index.html</code>，服务器将数据，通过刚才客户端请求服务器的相同的方式，响应给客户端，这样就看到了首页内容，也就是完成了一次客户端与服务器在互联网中的数据交互。</p>\n<p>这里需要注意下：</p>\n<ol>\n<li>TCP是可靠的连接协议，在建立连接是需要进行三次握手，每个收到的数据包都会向发送方发送<code>ack确认</code>，以确保发送成功。</li>\n<li>IP是不可靠的无连接协议，他不关心数据包是否到达，也不关心端口和地址，只关心连接到目标IP地址。</li>\n<li>当数据包比较大，在网络层会进行分包处理，分包后到达时间不一样，TCP会根据数据包携带的序列号排序重组，如果发送方在特定时间没有接收到接收方发送的ack确认，会再次重新发送。</li>\n<li>IP 是一种协议，分为IPV4(2^32次方) 和 IPV6(2^128次方)，IP地址是一串数组 192.168.1.1</li>\n</ol>\n<h3 id=\"互联网怎么构成的\"><a href=\"#互联网怎么构成的\" class=\"headerlink\" title=\"互联网怎么构成的\"></a>互联网怎么构成的</h3><p>电脑通过调制解调器moden，也就是俗称的<code>猫</code>， 将数字电信号转换成可延电话线传播的模拟信号后，在公共电话网络进行传输，公共电话网络通过连接<code>ISP</code>(internet server provider 互联网服务提供商，比如我们的电信、移动、联通)来接入互联网，通过<code>ISP</code>将连接到<code>ISP</code>的主干网络也就是<code>NSP(network server provider)</code>, <code>ISP</code>可以从<code>NSP</code>批量购买带宽，为客户提供网络接入服务，<code>NSP</code>通过网络访问点<code>NAP</code>相连接，来交换数据包流量，每个<code>NSP</code>必须至少连接三个<code>NAP</code>，<code>NSP</code>主干可以通过<code>NAP</code>链接到另一个<code>NSP</code>主干，当然互联网架构不会这么简单，这里只是一个简化 ，那互联网到底如何将数据包找到正确路线呢，互联网中有一个特殊的计算器<code>路由器</code> ,<code>路由器</code>上有一个<code>路由表</code>，记录了子网络所有IP地址，但是他不知道上层网络所包含的IP地址，当数据到达路由器，路由器检查路由表是否有对应的IP地址，如果有则直接发送给对应的网络，没有则向上层传递数据包在更高层级的路由器查找IP地址，如果依然没找到，则接着向上层找，直到到达<code>NSP</code>主干网为止，连接到<code>NSP</code>主干网的路由器拥有最大的路由表，通过这张表可以将数据包发送到正确的骨干网，然后向下传播，直到找到目的地为止，电脑连接服务器就是这样一个过程。</p>\n<p>但是也有一个问题，我们是不可能记住IP地址的，并且IP地址也可能更换，所有就会有一个域名，那浏览器怎么通过域名知道访问哪个IP地址呢，就要依靠一个叫<code>DNS</code>(domain names service)服务器， 上面记录了IP地址和域名的对应关系，在浏览器输入网址，浏览器首先访问<code>DNS服务器</code>，获取到该域名的IP地址后 ，浏览器再访问该IP地址的服务器。</p>"},{"title":"Vue开发移动端css适配","_content":"\n相对于 PC端来说，移动端设备在进行css适配时要麻烦一些。\n\n这时候我们就应该理顺出一套解决方法，适配各种手机。\n\n之前呢，我们使用`rem`配合手淘的`lib-flexible`实现移动端适配。\n\n现在有了更好的`vw`和`vh`单位，再配合弹性布局和`grid`布局。\n\n`vw` 视口的最大宽度，`1vw` = 视口宽度的百分之一\n\n`vh` 视口的最大高度， `1vh` = 视口高度的百分之一\n\n<!--more-->\n\n假如我们是 `750px` 宽的设计稿，那我们只需要量出元素的宽度，比如元素宽度占屏幕一半`375px`，然后让`375px` 自动转成`50vw`，那这样就既让`750px`的屏幕占一半的宽，其他分辨率下元素也是占屏幕宽度一半，这不就完成适配了嘛。\n\n那如何让`px`转成`vw`呢？\n\n### px-to-vw\n\n如果是开发多页面应用，并不借助框架或者构建工具，可以使用`vs code` 的插件`px-to-vw`\n\n只需要在插件里搜索并安装，插件默认设计稿是`750px`，也就是`7.5px`会转换成`1vw`。\n\n 插件不会在你写完`px`自动转换成`vw`，需要你选中希望转换的代码，按下`alt +z`，进行转换。\n\n###  postcss-px-to-viewport \n\n如果开发的是单页面应用，使用了框架和构建工具，就可以借助`postcss`的插件` postcss-px-to-viewport `\n\n```\nnpm install postcss-px-to-viewport\n```\n\n然后在`vite.config.ts`或者`webpack.config.js`或者`vue.cofnig.js`配置文件\n\n```js\nimport postcsspxtoviewport from 'postcss-px-to-viewport'\n\nexport default defineConfig({\n  // ...  \n  css: {\n    postcss: {\n      plugins: [\n        postcsspxtoviewport({\n          unitToConvert: 'px', // 要转化的单位\n          viewportWidth: 750 // UI设计稿的宽度\n        })\n      ]\n    }\n  }\n})\n```\n\n我们在页面开发时直接写入`px`单位就好，在经过构建工具打包后的代码里，会自动转换成`vw`单位。\n\n\n\n","source":"_posts/Vue/03-Vue开发移动端css适配.md","raw":"---\ntitle: Vue开发移动端css适配\ntags: Vue\n---\n\n相对于 PC端来说，移动端设备在进行css适配时要麻烦一些。\n\n这时候我们就应该理顺出一套解决方法，适配各种手机。\n\n之前呢，我们使用`rem`配合手淘的`lib-flexible`实现移动端适配。\n\n现在有了更好的`vw`和`vh`单位，再配合弹性布局和`grid`布局。\n\n`vw` 视口的最大宽度，`1vw` = 视口宽度的百分之一\n\n`vh` 视口的最大高度， `1vh` = 视口高度的百分之一\n\n<!--more-->\n\n假如我们是 `750px` 宽的设计稿，那我们只需要量出元素的宽度，比如元素宽度占屏幕一半`375px`，然后让`375px` 自动转成`50vw`，那这样就既让`750px`的屏幕占一半的宽，其他分辨率下元素也是占屏幕宽度一半，这不就完成适配了嘛。\n\n那如何让`px`转成`vw`呢？\n\n### px-to-vw\n\n如果是开发多页面应用，并不借助框架或者构建工具，可以使用`vs code` 的插件`px-to-vw`\n\n只需要在插件里搜索并安装，插件默认设计稿是`750px`，也就是`7.5px`会转换成`1vw`。\n\n 插件不会在你写完`px`自动转换成`vw`，需要你选中希望转换的代码，按下`alt +z`，进行转换。\n\n###  postcss-px-to-viewport \n\n如果开发的是单页面应用，使用了框架和构建工具，就可以借助`postcss`的插件` postcss-px-to-viewport `\n\n```\nnpm install postcss-px-to-viewport\n```\n\n然后在`vite.config.ts`或者`webpack.config.js`或者`vue.cofnig.js`配置文件\n\n```js\nimport postcsspxtoviewport from 'postcss-px-to-viewport'\n\nexport default defineConfig({\n  // ...  \n  css: {\n    postcss: {\n      plugins: [\n        postcsspxtoviewport({\n          unitToConvert: 'px', // 要转化的单位\n          viewportWidth: 750 // UI设计稿的宽度\n        })\n      ]\n    }\n  }\n})\n```\n\n我们在页面开发时直接写入`px`单位就好，在经过构建工具打包后的代码里，会自动转换成`vw`单位。\n\n\n\n","slug":"Vue/03-Vue开发移动端css适配","published":1,"date":"2023-03-17T13:09:00.237Z","updated":"2023-03-17T13:09:00.237Z","_id":"clf6yh1qj00118cupcbcxaylk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>相对于 PC端来说，移动端设备在进行css适配时要麻烦一些。</p>\n<p>这时候我们就应该理顺出一套解决方法，适配各种手机。</p>\n<p>之前呢，我们使用<code>rem</code>配合手淘的<code>lib-flexible</code>实现移动端适配。</p>\n<p>现在有了更好的<code>vw</code>和<code>vh</code>单位，再配合弹性布局和<code>grid</code>布局。</p>\n<p><code>vw</code> 视口的最大宽度，<code>1vw</code> = 视口宽度的百分之一</p>\n<p><code>vh</code> 视口的最大高度， <code>1vh</code> = 视口高度的百分之一</p>\n<span id=\"more\"></span>\n\n<p>假如我们是 <code>750px</code> 宽的设计稿，那我们只需要量出元素的宽度，比如元素宽度占屏幕一半<code>375px</code>，然后让<code>375px</code> 自动转成<code>50vw</code>，那这样就既让<code>750px</code>的屏幕占一半的宽，其他分辨率下元素也是占屏幕宽度一半，这不就完成适配了嘛。</p>\n<p>那如何让<code>px</code>转成<code>vw</code>呢？</p>\n<h3 id=\"px-to-vw\"><a href=\"#px-to-vw\" class=\"headerlink\" title=\"px-to-vw\"></a>px-to-vw</h3><p>如果是开发多页面应用，并不借助框架或者构建工具，可以使用<code>vs code</code> 的插件<code>px-to-vw</code></p>\n<p>只需要在插件里搜索并安装，插件默认设计稿是<code>750px</code>，也就是<code>7.5px</code>会转换成<code>1vw</code>。</p>\n<p> 插件不会在你写完<code>px</code>自动转换成<code>vw</code>，需要你选中希望转换的代码，按下<code>alt +z</code>，进行转换。</p>\n<h3 id=\"postcss-px-to-viewport\"><a href=\"#postcss-px-to-viewport\" class=\"headerlink\" title=\"postcss-px-to-viewport\"></a>postcss-px-to-viewport</h3><p>如果开发的是单页面应用，使用了框架和构建工具，就可以借助<code>postcss</code>的插件<code>postcss-px-to-viewport</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-px-to-viewport</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>vite.config.ts</code>或者<code>webpack.config.js</code>或者<code>vue.cofnig.js</code>配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> postcsspxtoviewport <span class=\"keyword\">from</span> <span class=\"string\">&#x27;postcss-px-to-viewport&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...  </span></span><br><span class=\"line\">  <span class=\"attr\">css</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">postcss</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"title function_\">postcsspxtoviewport</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">unitToConvert</span>: <span class=\"string\">&#x27;px&#x27;</span>, <span class=\"comment\">// 要转化的单位</span></span><br><span class=\"line\">          <span class=\"attr\">viewportWidth</span>: <span class=\"number\">750</span> <span class=\"comment\">// UI设计稿的宽度</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们在页面开发时直接写入<code>px</code>单位就好，在经过构建工具打包后的代码里，会自动转换成<code>vw</code>单位。</p>\n","site":{"data":{}},"excerpt":"<p>相对于 PC端来说，移动端设备在进行css适配时要麻烦一些。</p>\n<p>这时候我们就应该理顺出一套解决方法，适配各种手机。</p>\n<p>之前呢，我们使用<code>rem</code>配合手淘的<code>lib-flexible</code>实现移动端适配。</p>\n<p>现在有了更好的<code>vw</code>和<code>vh</code>单位，再配合弹性布局和<code>grid</code>布局。</p>\n<p><code>vw</code> 视口的最大宽度，<code>1vw</code> = 视口宽度的百分之一</p>\n<p><code>vh</code> 视口的最大高度， <code>1vh</code> = 视口高度的百分之一</p>","more":"<p>假如我们是 <code>750px</code> 宽的设计稿，那我们只需要量出元素的宽度，比如元素宽度占屏幕一半<code>375px</code>，然后让<code>375px</code> 自动转成<code>50vw</code>，那这样就既让<code>750px</code>的屏幕占一半的宽，其他分辨率下元素也是占屏幕宽度一半，这不就完成适配了嘛。</p>\n<p>那如何让<code>px</code>转成<code>vw</code>呢？</p>\n<h3 id=\"px-to-vw\"><a href=\"#px-to-vw\" class=\"headerlink\" title=\"px-to-vw\"></a>px-to-vw</h3><p>如果是开发多页面应用，并不借助框架或者构建工具，可以使用<code>vs code</code> 的插件<code>px-to-vw</code></p>\n<p>只需要在插件里搜索并安装，插件默认设计稿是<code>750px</code>，也就是<code>7.5px</code>会转换成<code>1vw</code>。</p>\n<p> 插件不会在你写完<code>px</code>自动转换成<code>vw</code>，需要你选中希望转换的代码，按下<code>alt +z</code>，进行转换。</p>\n<h3 id=\"postcss-px-to-viewport\"><a href=\"#postcss-px-to-viewport\" class=\"headerlink\" title=\"postcss-px-to-viewport\"></a>postcss-px-to-viewport</h3><p>如果开发的是单页面应用，使用了框架和构建工具，就可以借助<code>postcss</code>的插件<code>postcss-px-to-viewport</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-px-to-viewport</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>vite.config.ts</code>或者<code>webpack.config.js</code>或者<code>vue.cofnig.js</code>配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> postcsspxtoviewport <span class=\"keyword\">from</span> <span class=\"string\">&#x27;postcss-px-to-viewport&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...  </span></span><br><span class=\"line\">  <span class=\"attr\">css</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">postcss</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"title function_\">postcsspxtoviewport</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">unitToConvert</span>: <span class=\"string\">&#x27;px&#x27;</span>, <span class=\"comment\">// 要转化的单位</span></span><br><span class=\"line\">          <span class=\"attr\">viewportWidth</span>: <span class=\"number\">750</span> <span class=\"comment\">// UI设计稿的宽度</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们在页面开发时直接写入<code>px</code>单位就好，在经过构建工具打包后的代码里，会自动转换成<code>vw</code>单位。</p>"},{"title":"浏览器是如何运作","_content":"浏览器对于前端开发者，就好比赛车之于赛车手，我们只有足够了解浏览器，我们才能写出更好的代码、更好的用户体验。\n大致可以将浏览器分为： \n1. 用户界面：除标签页窗口之外的内容\n2. 浏览器引擎：用于用户界面和渲染引擎之间传递数据\n   2.1 数据持久层：帮助浏览器存储数据比如cookie等等\n3. 渲染引擎：渲染用户请求的页面内容\n   3.1  网络：负责发起请求\n   3.2  js解释器：负责js解析和执行\n<!-- more -->\n\n渲染引擎被称之为浏览器的内核，不同浏览器使用内核不大一样，IE(trident)、firefox(geko)、safari(webkit)、chrome(blink)。\n\n浏览器是运行在操作系统上的应用程序，每个应用程序必须启动一个进程来执行很多功能，每个程序往往都需要执行多个小任务，进程就会创建多个线程来帮助执行这些小任务，``进程`` 是操作系统进行资源分配的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体，``线程`` 是操作系统能够进行运算调度的最小单元，一个进程可以并发多个线程，每条线程并行执行不同任务。\n\n通俗点说，当我们启动某个程序，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该任务的内容都保存在分配的内存空间里，当应用关闭，对应内存空间就会被回收， 进程可以启动更多进程来执行任务，由于每个进程分配的内存空间都是独立的，如果两个进程间需要传递数据，则需要通过进程间通信管道IPC来处理，很多应用程序都是多进程结构，这是为了避免某一个进程卡死，由于进程间相互独立，这样不会影响到整个应用程序。进程可以将任务分成更多细小的任务，然后通过创建多个线程并行执行不同任务，同一进程下的不同线程是可以直接通信的。\n\n单进程浏览器的缺点：\n 1. 其中一个线程卡死，导致整个进程出问题 \n 2. 不安全，不同页面之间可以通信数据 \n 3. 不流畅\n\n现代浏览器都是多进程的，浏览器进程大致可以分为： \n1. 浏览器进程： 控制浏览器地址栏、前进后退、书签以及与浏览器的其他进程进行协调\n2. 渲染器进程：控制tab标签页的渲染，浏览器基本上会为每一个标签页都创建一个进程，这样某一个标签页卡死，并不会影响其他标签页\n3. GPU进程： 整个浏览器页面的渲染\n4. 缓存进程：缓存数据\n5. 网络进程： 负责发起接受网络请求\n6. 插件进程：控制浏览器使用的插件，例如 flash，并不是应用商店下载的插件\n\n当在浏览器输入url地址时，浏览器大致会执行：\n1. 浏览器进程的UI线程会捕捉输入的内容，a. 如果访问的是网址，则UI线程会启用网络线程，来请求DNS服务器进行域名解析，接着开始连接服务器获取数据，b. 如果输入的不是网址，而是一串关键词，浏览器就知道是要搜索，就会启用默认配置的搜索引擎来查询。\n2. 如果是访问网址，网络线程获取到数据后，会通过 ``safeBrowsing(safeBrowsing是谷歌内部的一套站点安全系统，通过检测该站点的数据来判断是否安全，比如查看该站点的IP是否在谷歌的黑名单中)`` 来检查站点是否是恶意站点，如果是则会提示个警告页面，告诉你这个站点有安全问题，浏览器会阻止访问，当然你也可以点击继续访问。当返回数据准备完毕，并且通过安全校验后，网络线程会通知UI线程我准备好了。\n3. 然后UI线程会创建一个渲染器进程来渲染页面，浏览器进程会通过IPC通信管道将数据传递给渲染器进程，正式进入渲染流程。\n4. 渲染器进程就是将接收到的HTMl、JS、CSS、img 等资源渲染成用户可以交互的web页面，渲染器进程的主线程将HTMl进行解析，构造成DOM树，如果遇到``script``标签则停止解析并执行JS代码，在HTMl解析完成后，我们就会得到一个DOM树，但我们还不知道DOM树上每个节点的样子。\n5. 主线程解析完HTML，就开始解析CSS，并确定每个DOM节点的计算样式，即使没有提供自定义的样式，浏览器也会有默认的样式。\n6. 在知道DOM结构和每个节点的样式后，就需要知道每个节点需要放在页面的哪个位置，也就是节点的坐标以及该节点需要多大的区域，这个阶段被称为 ``layout布局``，主线程通过遍历DOM树和计算好的样式来生成 ``layoutTree``，``layoutTree``每个节点都记录了x,y坐标及边框尺寸， 这里DOM树和 ``layoutTree``并不是一一对应的，比如设置了``display:none``的节点不会出现在``layoutTree``上，又比如伪元素，这是因为DOM树是解析HTML得来，而不关注样式，而``layoutTree`` 是有DOM树和计算好的样式生成的，``layoutTree``是和展示到页面的节点对应的。\n7. 我们已经知道了元素的大小形状和位置，但是这还不够，我们还需要知道以什么样的顺序绘制(paint)节点，比如``z-index`` 会影响节点绘制的层级关系，如果按照DOM的层级结构来绘制，则可能出现错误的渲染，所以为了保证在屏幕上展示正确的层级，主线程遍历``layoutTree`` ，创建一个绘制记录表(paint Record)，该表记录了绘制的顺序，这个阶段被称为绘制。\n8. 现在知道了绘制的顺序，到了该把这些信息转换成像素点显示在屏幕上，这个行为被称为``栅格化(rastering)``  ， chorme早期使用了一种很简单的方式，只栅格化用户可见的内容，当用户滚动页面时，再栅格化更多的内容来填充空缺的部分，这种方式带来很大的问题，就是展示延迟，随着不断的优化升级，现在chorme使用更为复杂的栅格化流程，叫做合成，合成是一种将页面的各个部分分成多个图层，分别对其进行栅格化，并在合成器线程中单独进行合成页面的技术，简单来说就是，页面的所有元素按照某种规则进行分图层，并把图层都珊格化好了，然后只需要把可视区域的内容组合成一帧，展示给用户即可。\n9. 主线程遍历``layoutTree`` 生成``layerTree``，当``layerTree`` 生成完毕和绘制顺序后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分成许多``图块(tiles)``，然后将每个``图块``发送给栅格化线程，栅格化线程栅格每一个``图块``，并将他们存储在``GPU内存``中，当``图块`` 栅格化完成后，合成器线程将收集``图块``信息，这些信记录了图块在内存中的位置、和在页面哪个位置绘制图块的信息，根据这些信息，合成器线程生成一个合成器帧\n10. 然后这个合成器帧通过进程间通信管道IPC传送给浏览器进程，接着浏览器进程将合成器帧传送给GPU，然后GPU渲染展示到屏幕\n11. 当滚动页面时，则会生成一个新的合成器帧，新的帧在传递给浏览器进程，然后传递给GPU，然后渲染到屏幕\n\n好的，写了一大堆，简单总结下：\n\n浏览器进程中的网络线程请求获取到html数据后，通过IPC通信将数据传递给渲染器进程的主线程，主线程将html解析构造DOM树，然后进行样式计算，根据DOM树和样式计算生成``layoutTree``，通过遍历``layoutTree``生成绘制顺序表，接着遍历``layoutTree``生成``layerTree``，然后主线程将``layerTree``和绘制信息一起传给合成器线程，合成器线程按规则进行分图层，并把图层分为更小的图块，然后传给栅格线程进行栅格化，栅格化完成后，合成器线程将会获得栅格线程传递来的图块信息，根据这些信息，合成器线程生成一个合成器帧，然后将合成器帧通过IPC传递给浏览器进程，浏览器进程在传递给GPU进程进行渲染，这就展示到页面上了。\n\n当改变元素尺寸位置属性时，会重新进行样式计算(computed style)、布局(layout)、绘制(paint)以及后边的所有流程，这种行为称为``重排``。\n当我们改变元素颜色属性时，不会重新触发布局，但还是会触发样式计算和绘制，这个就是``重绘``。\n\n我们可以发现，重绘和重排都会主线程，还有JS也是运行在主线程上的，那么他们就会出现抢占执行时间的问题，如果写了一个不断导致重绘重排的动画，浏览器则需要在每一帧都运行样式计算，布局和绘制的操作，我们知道页面每秒60帧进行刷新，用户才不会感知，如果页面在运行动画时还有大量JS任务需要执行，因为布局，绘制和JS执行都在主线程运行，当在一帧的时间内布局和绘制结束后，还有剩余时间，JS就会拿到主线程的使用权，如果JS执行时间过长，就会导致在下一帧开始时，JS没有及时归还主线程，导致下一帧没有按时渲染，就会出现页面卡顿，1.  我们可以通过``requestAnimationFrame()`` 这个API进行优化，这个方法会在每一帧被调用，我们可以把JS运行任务分成更小的任务块，分到每一帧，在每一帧时间用完前暂停JS执行，归还主线程，这样的话在下一帧开始时，主线程就可以按时执行布局和绘制。2. 通过 ``transform``的动画不会进行布局和绘制，而是直接运行在合成器线程和栅格化线程中，所以不会收到主线程JS的影响，由于不需要进行布局绘制，样式计算等操作，所以节省了很多时间。\n\n","source":"_posts/网络/02-浏览器如何运作.md","raw":"---\ntitle: 浏览器是如何运作\ntags: 网络\n---\n浏览器对于前端开发者，就好比赛车之于赛车手，我们只有足够了解浏览器，我们才能写出更好的代码、更好的用户体验。\n大致可以将浏览器分为： \n1. 用户界面：除标签页窗口之外的内容\n2. 浏览器引擎：用于用户界面和渲染引擎之间传递数据\n   2.1 数据持久层：帮助浏览器存储数据比如cookie等等\n3. 渲染引擎：渲染用户请求的页面内容\n   3.1  网络：负责发起请求\n   3.2  js解释器：负责js解析和执行\n<!-- more -->\n\n渲染引擎被称之为浏览器的内核，不同浏览器使用内核不大一样，IE(trident)、firefox(geko)、safari(webkit)、chrome(blink)。\n\n浏览器是运行在操作系统上的应用程序，每个应用程序必须启动一个进程来执行很多功能，每个程序往往都需要执行多个小任务，进程就会创建多个线程来帮助执行这些小任务，``进程`` 是操作系统进行资源分配的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体，``线程`` 是操作系统能够进行运算调度的最小单元，一个进程可以并发多个线程，每条线程并行执行不同任务。\n\n通俗点说，当我们启动某个程序，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该任务的内容都保存在分配的内存空间里，当应用关闭，对应内存空间就会被回收， 进程可以启动更多进程来执行任务，由于每个进程分配的内存空间都是独立的，如果两个进程间需要传递数据，则需要通过进程间通信管道IPC来处理，很多应用程序都是多进程结构，这是为了避免某一个进程卡死，由于进程间相互独立，这样不会影响到整个应用程序。进程可以将任务分成更多细小的任务，然后通过创建多个线程并行执行不同任务，同一进程下的不同线程是可以直接通信的。\n\n单进程浏览器的缺点：\n 1. 其中一个线程卡死，导致整个进程出问题 \n 2. 不安全，不同页面之间可以通信数据 \n 3. 不流畅\n\n现代浏览器都是多进程的，浏览器进程大致可以分为： \n1. 浏览器进程： 控制浏览器地址栏、前进后退、书签以及与浏览器的其他进程进行协调\n2. 渲染器进程：控制tab标签页的渲染，浏览器基本上会为每一个标签页都创建一个进程，这样某一个标签页卡死，并不会影响其他标签页\n3. GPU进程： 整个浏览器页面的渲染\n4. 缓存进程：缓存数据\n5. 网络进程： 负责发起接受网络请求\n6. 插件进程：控制浏览器使用的插件，例如 flash，并不是应用商店下载的插件\n\n当在浏览器输入url地址时，浏览器大致会执行：\n1. 浏览器进程的UI线程会捕捉输入的内容，a. 如果访问的是网址，则UI线程会启用网络线程，来请求DNS服务器进行域名解析，接着开始连接服务器获取数据，b. 如果输入的不是网址，而是一串关键词，浏览器就知道是要搜索，就会启用默认配置的搜索引擎来查询。\n2. 如果是访问网址，网络线程获取到数据后，会通过 ``safeBrowsing(safeBrowsing是谷歌内部的一套站点安全系统，通过检测该站点的数据来判断是否安全，比如查看该站点的IP是否在谷歌的黑名单中)`` 来检查站点是否是恶意站点，如果是则会提示个警告页面，告诉你这个站点有安全问题，浏览器会阻止访问，当然你也可以点击继续访问。当返回数据准备完毕，并且通过安全校验后，网络线程会通知UI线程我准备好了。\n3. 然后UI线程会创建一个渲染器进程来渲染页面，浏览器进程会通过IPC通信管道将数据传递给渲染器进程，正式进入渲染流程。\n4. 渲染器进程就是将接收到的HTMl、JS、CSS、img 等资源渲染成用户可以交互的web页面，渲染器进程的主线程将HTMl进行解析，构造成DOM树，如果遇到``script``标签则停止解析并执行JS代码，在HTMl解析完成后，我们就会得到一个DOM树，但我们还不知道DOM树上每个节点的样子。\n5. 主线程解析完HTML，就开始解析CSS，并确定每个DOM节点的计算样式，即使没有提供自定义的样式，浏览器也会有默认的样式。\n6. 在知道DOM结构和每个节点的样式后，就需要知道每个节点需要放在页面的哪个位置，也就是节点的坐标以及该节点需要多大的区域，这个阶段被称为 ``layout布局``，主线程通过遍历DOM树和计算好的样式来生成 ``layoutTree``，``layoutTree``每个节点都记录了x,y坐标及边框尺寸， 这里DOM树和 ``layoutTree``并不是一一对应的，比如设置了``display:none``的节点不会出现在``layoutTree``上，又比如伪元素，这是因为DOM树是解析HTML得来，而不关注样式，而``layoutTree`` 是有DOM树和计算好的样式生成的，``layoutTree``是和展示到页面的节点对应的。\n7. 我们已经知道了元素的大小形状和位置，但是这还不够，我们还需要知道以什么样的顺序绘制(paint)节点，比如``z-index`` 会影响节点绘制的层级关系，如果按照DOM的层级结构来绘制，则可能出现错误的渲染，所以为了保证在屏幕上展示正确的层级，主线程遍历``layoutTree`` ，创建一个绘制记录表(paint Record)，该表记录了绘制的顺序，这个阶段被称为绘制。\n8. 现在知道了绘制的顺序，到了该把这些信息转换成像素点显示在屏幕上，这个行为被称为``栅格化(rastering)``  ， chorme早期使用了一种很简单的方式，只栅格化用户可见的内容，当用户滚动页面时，再栅格化更多的内容来填充空缺的部分，这种方式带来很大的问题，就是展示延迟，随着不断的优化升级，现在chorme使用更为复杂的栅格化流程，叫做合成，合成是一种将页面的各个部分分成多个图层，分别对其进行栅格化，并在合成器线程中单独进行合成页面的技术，简单来说就是，页面的所有元素按照某种规则进行分图层，并把图层都珊格化好了，然后只需要把可视区域的内容组合成一帧，展示给用户即可。\n9. 主线程遍历``layoutTree`` 生成``layerTree``，当``layerTree`` 生成完毕和绘制顺序后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分成许多``图块(tiles)``，然后将每个``图块``发送给栅格化线程，栅格化线程栅格每一个``图块``，并将他们存储在``GPU内存``中，当``图块`` 栅格化完成后，合成器线程将收集``图块``信息，这些信记录了图块在内存中的位置、和在页面哪个位置绘制图块的信息，根据这些信息，合成器线程生成一个合成器帧\n10. 然后这个合成器帧通过进程间通信管道IPC传送给浏览器进程，接着浏览器进程将合成器帧传送给GPU，然后GPU渲染展示到屏幕\n11. 当滚动页面时，则会生成一个新的合成器帧，新的帧在传递给浏览器进程，然后传递给GPU，然后渲染到屏幕\n\n好的，写了一大堆，简单总结下：\n\n浏览器进程中的网络线程请求获取到html数据后，通过IPC通信将数据传递给渲染器进程的主线程，主线程将html解析构造DOM树，然后进行样式计算，根据DOM树和样式计算生成``layoutTree``，通过遍历``layoutTree``生成绘制顺序表，接着遍历``layoutTree``生成``layerTree``，然后主线程将``layerTree``和绘制信息一起传给合成器线程，合成器线程按规则进行分图层，并把图层分为更小的图块，然后传给栅格线程进行栅格化，栅格化完成后，合成器线程将会获得栅格线程传递来的图块信息，根据这些信息，合成器线程生成一个合成器帧，然后将合成器帧通过IPC传递给浏览器进程，浏览器进程在传递给GPU进程进行渲染，这就展示到页面上了。\n\n当改变元素尺寸位置属性时，会重新进行样式计算(computed style)、布局(layout)、绘制(paint)以及后边的所有流程，这种行为称为``重排``。\n当我们改变元素颜色属性时，不会重新触发布局，但还是会触发样式计算和绘制，这个就是``重绘``。\n\n我们可以发现，重绘和重排都会主线程，还有JS也是运行在主线程上的，那么他们就会出现抢占执行时间的问题，如果写了一个不断导致重绘重排的动画，浏览器则需要在每一帧都运行样式计算，布局和绘制的操作，我们知道页面每秒60帧进行刷新，用户才不会感知，如果页面在运行动画时还有大量JS任务需要执行，因为布局，绘制和JS执行都在主线程运行，当在一帧的时间内布局和绘制结束后，还有剩余时间，JS就会拿到主线程的使用权，如果JS执行时间过长，就会导致在下一帧开始时，JS没有及时归还主线程，导致下一帧没有按时渲染，就会出现页面卡顿，1.  我们可以通过``requestAnimationFrame()`` 这个API进行优化，这个方法会在每一帧被调用，我们可以把JS运行任务分成更小的任务块，分到每一帧，在每一帧时间用完前暂停JS执行，归还主线程，这样的话在下一帧开始时，主线程就可以按时执行布局和绘制。2. 通过 ``transform``的动画不会进行布局和绘制，而是直接运行在合成器线程和栅格化线程中，所以不会收到主线程JS的影响，由于不需要进行布局绘制，样式计算等操作，所以节省了很多时间。\n\n","slug":"网络/02-浏览器如何运作","published":1,"date":"2023-03-17T13:09:00.237Z","updated":"2023-03-17T13:09:00.237Z","_id":"clf6yh1qk00138cupah6oec85","comments":1,"layout":"post","photos":[],"link":"","content":"<p>浏览器对于前端开发者，就好比赛车之于赛车手，我们只有足够了解浏览器，我们才能写出更好的代码、更好的用户体验。<br>大致可以将浏览器分为： </p>\n<ol>\n<li>用户界面：除标签页窗口之外的内容</li>\n<li>浏览器引擎：用于用户界面和渲染引擎之间传递数据<br>2.1 数据持久层：帮助浏览器存储数据比如cookie等等</li>\n<li>渲染引擎：渲染用户请求的页面内容<br>3.1  网络：负责发起请求<br>3.2  js解释器：负责js解析和执行<span id=\"more\"></span></li>\n</ol>\n<p>渲染引擎被称之为浏览器的内核，不同浏览器使用内核不大一样，IE(trident)、firefox(geko)、safari(webkit)、chrome(blink)。</p>\n<p>浏览器是运行在操作系统上的应用程序，每个应用程序必须启动一个进程来执行很多功能，每个程序往往都需要执行多个小任务，进程就会创建多个线程来帮助执行这些小任务，<code>进程</code> 是操作系统进行资源分配的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体，<code>线程</code> 是操作系统能够进行运算调度的最小单元，一个进程可以并发多个线程，每条线程并行执行不同任务。</p>\n<p>通俗点说，当我们启动某个程序，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该任务的内容都保存在分配的内存空间里，当应用关闭，对应内存空间就会被回收， 进程可以启动更多进程来执行任务，由于每个进程分配的内存空间都是独立的，如果两个进程间需要传递数据，则需要通过进程间通信管道IPC来处理，很多应用程序都是多进程结构，这是为了避免某一个进程卡死，由于进程间相互独立，这样不会影响到整个应用程序。进程可以将任务分成更多细小的任务，然后通过创建多个线程并行执行不同任务，同一进程下的不同线程是可以直接通信的。</p>\n<p>单进程浏览器的缺点：</p>\n<ol>\n<li>其中一个线程卡死，导致整个进程出问题 </li>\n<li>不安全，不同页面之间可以通信数据 </li>\n<li>不流畅</li>\n</ol>\n<p>现代浏览器都是多进程的，浏览器进程大致可以分为： </p>\n<ol>\n<li>浏览器进程： 控制浏览器地址栏、前进后退、书签以及与浏览器的其他进程进行协调</li>\n<li>渲染器进程：控制tab标签页的渲染，浏览器基本上会为每一个标签页都创建一个进程，这样某一个标签页卡死，并不会影响其他标签页</li>\n<li>GPU进程： 整个浏览器页面的渲染</li>\n<li>缓存进程：缓存数据</li>\n<li>网络进程： 负责发起接受网络请求</li>\n<li>插件进程：控制浏览器使用的插件，例如 flash，并不是应用商店下载的插件</li>\n</ol>\n<p>当在浏览器输入url地址时，浏览器大致会执行：</p>\n<ol>\n<li>浏览器进程的UI线程会捕捉输入的内容，a. 如果访问的是网址，则UI线程会启用网络线程，来请求DNS服务器进行域名解析，接着开始连接服务器获取数据，b. 如果输入的不是网址，而是一串关键词，浏览器就知道是要搜索，就会启用默认配置的搜索引擎来查询。</li>\n<li>如果是访问网址，网络线程获取到数据后，会通过 <code>safeBrowsing(safeBrowsing是谷歌内部的一套站点安全系统，通过检测该站点的数据来判断是否安全，比如查看该站点的IP是否在谷歌的黑名单中)</code> 来检查站点是否是恶意站点，如果是则会提示个警告页面，告诉你这个站点有安全问题，浏览器会阻止访问，当然你也可以点击继续访问。当返回数据准备完毕，并且通过安全校验后，网络线程会通知UI线程我准备好了。</li>\n<li>然后UI线程会创建一个渲染器进程来渲染页面，浏览器进程会通过IPC通信管道将数据传递给渲染器进程，正式进入渲染流程。</li>\n<li>渲染器进程就是将接收到的HTMl、JS、CSS、img 等资源渲染成用户可以交互的web页面，渲染器进程的主线程将HTMl进行解析，构造成DOM树，如果遇到<code>script</code>标签则停止解析并执行JS代码，在HTMl解析完成后，我们就会得到一个DOM树，但我们还不知道DOM树上每个节点的样子。</li>\n<li>主线程解析完HTML，就开始解析CSS，并确定每个DOM节点的计算样式，即使没有提供自定义的样式，浏览器也会有默认的样式。</li>\n<li>在知道DOM结构和每个节点的样式后，就需要知道每个节点需要放在页面的哪个位置，也就是节点的坐标以及该节点需要多大的区域，这个阶段被称为 <code>layout布局</code>，主线程通过遍历DOM树和计算好的样式来生成 <code>layoutTree</code>，<code>layoutTree</code>每个节点都记录了x,y坐标及边框尺寸， 这里DOM树和 <code>layoutTree</code>并不是一一对应的，比如设置了<code>display:none</code>的节点不会出现在<code>layoutTree</code>上，又比如伪元素，这是因为DOM树是解析HTML得来，而不关注样式，而<code>layoutTree</code> 是有DOM树和计算好的样式生成的，<code>layoutTree</code>是和展示到页面的节点对应的。</li>\n<li>我们已经知道了元素的大小形状和位置，但是这还不够，我们还需要知道以什么样的顺序绘制(paint)节点，比如<code>z-index</code> 会影响节点绘制的层级关系，如果按照DOM的层级结构来绘制，则可能出现错误的渲染，所以为了保证在屏幕上展示正确的层级，主线程遍历<code>layoutTree</code> ，创建一个绘制记录表(paint Record)，该表记录了绘制的顺序，这个阶段被称为绘制。</li>\n<li>现在知道了绘制的顺序，到了该把这些信息转换成像素点显示在屏幕上，这个行为被称为<code>栅格化(rastering)</code>  ， chorme早期使用了一种很简单的方式，只栅格化用户可见的内容，当用户滚动页面时，再栅格化更多的内容来填充空缺的部分，这种方式带来很大的问题，就是展示延迟，随着不断的优化升级，现在chorme使用更为复杂的栅格化流程，叫做合成，合成是一种将页面的各个部分分成多个图层，分别对其进行栅格化，并在合成器线程中单独进行合成页面的技术，简单来说就是，页面的所有元素按照某种规则进行分图层，并把图层都珊格化好了，然后只需要把可视区域的内容组合成一帧，展示给用户即可。</li>\n<li>主线程遍历<code>layoutTree</code> 生成<code>layerTree</code>，当<code>layerTree</code> 生成完毕和绘制顺序后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分成许多<code>图块(tiles)</code>，然后将每个<code>图块</code>发送给栅格化线程，栅格化线程栅格每一个<code>图块</code>，并将他们存储在<code>GPU内存</code>中，当<code>图块</code> 栅格化完成后，合成器线程将收集<code>图块</code>信息，这些信记录了图块在内存中的位置、和在页面哪个位置绘制图块的信息，根据这些信息，合成器线程生成一个合成器帧</li>\n<li>然后这个合成器帧通过进程间通信管道IPC传送给浏览器进程，接着浏览器进程将合成器帧传送给GPU，然后GPU渲染展示到屏幕</li>\n<li>当滚动页面时，则会生成一个新的合成器帧，新的帧在传递给浏览器进程，然后传递给GPU，然后渲染到屏幕</li>\n</ol>\n<p>好的，写了一大堆，简单总结下：</p>\n<p>浏览器进程中的网络线程请求获取到html数据后，通过IPC通信将数据传递给渲染器进程的主线程，主线程将html解析构造DOM树，然后进行样式计算，根据DOM树和样式计算生成<code>layoutTree</code>，通过遍历<code>layoutTree</code>生成绘制顺序表，接着遍历<code>layoutTree</code>生成<code>layerTree</code>，然后主线程将<code>layerTree</code>和绘制信息一起传给合成器线程，合成器线程按规则进行分图层，并把图层分为更小的图块，然后传给栅格线程进行栅格化，栅格化完成后，合成器线程将会获得栅格线程传递来的图块信息，根据这些信息，合成器线程生成一个合成器帧，然后将合成器帧通过IPC传递给浏览器进程，浏览器进程在传递给GPU进程进行渲染，这就展示到页面上了。</p>\n<p>当改变元素尺寸位置属性时，会重新进行样式计算(computed style)、布局(layout)、绘制(paint)以及后边的所有流程，这种行为称为<code>重排</code>。<br>当我们改变元素颜色属性时，不会重新触发布局，但还是会触发样式计算和绘制，这个就是<code>重绘</code>。</p>\n<p>我们可以发现，重绘和重排都会主线程，还有JS也是运行在主线程上的，那么他们就会出现抢占执行时间的问题，如果写了一个不断导致重绘重排的动画，浏览器则需要在每一帧都运行样式计算，布局和绘制的操作，我们知道页面每秒60帧进行刷新，用户才不会感知，如果页面在运行动画时还有大量JS任务需要执行，因为布局，绘制和JS执行都在主线程运行，当在一帧的时间内布局和绘制结束后，还有剩余时间，JS就会拿到主线程的使用权，如果JS执行时间过长，就会导致在下一帧开始时，JS没有及时归还主线程，导致下一帧没有按时渲染，就会出现页面卡顿，1.  我们可以通过<code>requestAnimationFrame()</code> 这个API进行优化，这个方法会在每一帧被调用，我们可以把JS运行任务分成更小的任务块，分到每一帧，在每一帧时间用完前暂停JS执行，归还主线程，这样的话在下一帧开始时，主线程就可以按时执行布局和绘制。2. 通过 <code>transform</code>的动画不会进行布局和绘制，而是直接运行在合成器线程和栅格化线程中，所以不会收到主线程JS的影响，由于不需要进行布局绘制，样式计算等操作，所以节省了很多时间。</p>\n","site":{"data":{}},"excerpt":"<p>浏览器对于前端开发者，就好比赛车之于赛车手，我们只有足够了解浏览器，我们才能写出更好的代码、更好的用户体验。<br>大致可以将浏览器分为： </p>\n<ol>\n<li>用户界面：除标签页窗口之外的内容</li>\n<li>浏览器引擎：用于用户界面和渲染引擎之间传递数据<br>2.1 数据持久层：帮助浏览器存储数据比如cookie等等</li>\n<li>渲染引擎：渲染用户请求的页面内容<br>3.1  网络：负责发起请求<br>3.2  js解释器：负责js解析和执行","more":"</li>\n</ol>\n<p>渲染引擎被称之为浏览器的内核，不同浏览器使用内核不大一样，IE(trident)、firefox(geko)、safari(webkit)、chrome(blink)。</p>\n<p>浏览器是运行在操作系统上的应用程序，每个应用程序必须启动一个进程来执行很多功能，每个程序往往都需要执行多个小任务，进程就会创建多个线程来帮助执行这些小任务，<code>进程</code> 是操作系统进行资源分配的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体，<code>线程</code> 是操作系统能够进行运算调度的最小单元，一个进程可以并发多个线程，每条线程并行执行不同任务。</p>\n<p>通俗点说，当我们启动某个程序，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该任务的内容都保存在分配的内存空间里，当应用关闭，对应内存空间就会被回收， 进程可以启动更多进程来执行任务，由于每个进程分配的内存空间都是独立的，如果两个进程间需要传递数据，则需要通过进程间通信管道IPC来处理，很多应用程序都是多进程结构，这是为了避免某一个进程卡死，由于进程间相互独立，这样不会影响到整个应用程序。进程可以将任务分成更多细小的任务，然后通过创建多个线程并行执行不同任务，同一进程下的不同线程是可以直接通信的。</p>\n<p>单进程浏览器的缺点：</p>\n<ol>\n<li>其中一个线程卡死，导致整个进程出问题 </li>\n<li>不安全，不同页面之间可以通信数据 </li>\n<li>不流畅</li>\n</ol>\n<p>现代浏览器都是多进程的，浏览器进程大致可以分为： </p>\n<ol>\n<li>浏览器进程： 控制浏览器地址栏、前进后退、书签以及与浏览器的其他进程进行协调</li>\n<li>渲染器进程：控制tab标签页的渲染，浏览器基本上会为每一个标签页都创建一个进程，这样某一个标签页卡死，并不会影响其他标签页</li>\n<li>GPU进程： 整个浏览器页面的渲染</li>\n<li>缓存进程：缓存数据</li>\n<li>网络进程： 负责发起接受网络请求</li>\n<li>插件进程：控制浏览器使用的插件，例如 flash，并不是应用商店下载的插件</li>\n</ol>\n<p>当在浏览器输入url地址时，浏览器大致会执行：</p>\n<ol>\n<li>浏览器进程的UI线程会捕捉输入的内容，a. 如果访问的是网址，则UI线程会启用网络线程，来请求DNS服务器进行域名解析，接着开始连接服务器获取数据，b. 如果输入的不是网址，而是一串关键词，浏览器就知道是要搜索，就会启用默认配置的搜索引擎来查询。</li>\n<li>如果是访问网址，网络线程获取到数据后，会通过 <code>safeBrowsing(safeBrowsing是谷歌内部的一套站点安全系统，通过检测该站点的数据来判断是否安全，比如查看该站点的IP是否在谷歌的黑名单中)</code> 来检查站点是否是恶意站点，如果是则会提示个警告页面，告诉你这个站点有安全问题，浏览器会阻止访问，当然你也可以点击继续访问。当返回数据准备完毕，并且通过安全校验后，网络线程会通知UI线程我准备好了。</li>\n<li>然后UI线程会创建一个渲染器进程来渲染页面，浏览器进程会通过IPC通信管道将数据传递给渲染器进程，正式进入渲染流程。</li>\n<li>渲染器进程就是将接收到的HTMl、JS、CSS、img 等资源渲染成用户可以交互的web页面，渲染器进程的主线程将HTMl进行解析，构造成DOM树，如果遇到<code>script</code>标签则停止解析并执行JS代码，在HTMl解析完成后，我们就会得到一个DOM树，但我们还不知道DOM树上每个节点的样子。</li>\n<li>主线程解析完HTML，就开始解析CSS，并确定每个DOM节点的计算样式，即使没有提供自定义的样式，浏览器也会有默认的样式。</li>\n<li>在知道DOM结构和每个节点的样式后，就需要知道每个节点需要放在页面的哪个位置，也就是节点的坐标以及该节点需要多大的区域，这个阶段被称为 <code>layout布局</code>，主线程通过遍历DOM树和计算好的样式来生成 <code>layoutTree</code>，<code>layoutTree</code>每个节点都记录了x,y坐标及边框尺寸， 这里DOM树和 <code>layoutTree</code>并不是一一对应的，比如设置了<code>display:none</code>的节点不会出现在<code>layoutTree</code>上，又比如伪元素，这是因为DOM树是解析HTML得来，而不关注样式，而<code>layoutTree</code> 是有DOM树和计算好的样式生成的，<code>layoutTree</code>是和展示到页面的节点对应的。</li>\n<li>我们已经知道了元素的大小形状和位置，但是这还不够，我们还需要知道以什么样的顺序绘制(paint)节点，比如<code>z-index</code> 会影响节点绘制的层级关系，如果按照DOM的层级结构来绘制，则可能出现错误的渲染，所以为了保证在屏幕上展示正确的层级，主线程遍历<code>layoutTree</code> ，创建一个绘制记录表(paint Record)，该表记录了绘制的顺序，这个阶段被称为绘制。</li>\n<li>现在知道了绘制的顺序，到了该把这些信息转换成像素点显示在屏幕上，这个行为被称为<code>栅格化(rastering)</code>  ， chorme早期使用了一种很简单的方式，只栅格化用户可见的内容，当用户滚动页面时，再栅格化更多的内容来填充空缺的部分，这种方式带来很大的问题，就是展示延迟，随着不断的优化升级，现在chorme使用更为复杂的栅格化流程，叫做合成，合成是一种将页面的各个部分分成多个图层，分别对其进行栅格化，并在合成器线程中单独进行合成页面的技术，简单来说就是，页面的所有元素按照某种规则进行分图层，并把图层都珊格化好了，然后只需要把可视区域的内容组合成一帧，展示给用户即可。</li>\n<li>主线程遍历<code>layoutTree</code> 生成<code>layerTree</code>，当<code>layerTree</code> 生成完毕和绘制顺序后，主线程将这些信息传递给合成器线程，合成器线程将每个图层栅格化，由于一层可能像页面的整个长度一样大，因此合成器线程将他们切分成许多<code>图块(tiles)</code>，然后将每个<code>图块</code>发送给栅格化线程，栅格化线程栅格每一个<code>图块</code>，并将他们存储在<code>GPU内存</code>中，当<code>图块</code> 栅格化完成后，合成器线程将收集<code>图块</code>信息，这些信记录了图块在内存中的位置、和在页面哪个位置绘制图块的信息，根据这些信息，合成器线程生成一个合成器帧</li>\n<li>然后这个合成器帧通过进程间通信管道IPC传送给浏览器进程，接着浏览器进程将合成器帧传送给GPU，然后GPU渲染展示到屏幕</li>\n<li>当滚动页面时，则会生成一个新的合成器帧，新的帧在传递给浏览器进程，然后传递给GPU，然后渲染到屏幕</li>\n</ol>\n<p>好的，写了一大堆，简单总结下：</p>\n<p>浏览器进程中的网络线程请求获取到html数据后，通过IPC通信将数据传递给渲染器进程的主线程，主线程将html解析构造DOM树，然后进行样式计算，根据DOM树和样式计算生成<code>layoutTree</code>，通过遍历<code>layoutTree</code>生成绘制顺序表，接着遍历<code>layoutTree</code>生成<code>layerTree</code>，然后主线程将<code>layerTree</code>和绘制信息一起传给合成器线程，合成器线程按规则进行分图层，并把图层分为更小的图块，然后传给栅格线程进行栅格化，栅格化完成后，合成器线程将会获得栅格线程传递来的图块信息，根据这些信息，合成器线程生成一个合成器帧，然后将合成器帧通过IPC传递给浏览器进程，浏览器进程在传递给GPU进程进行渲染，这就展示到页面上了。</p>\n<p>当改变元素尺寸位置属性时，会重新进行样式计算(computed style)、布局(layout)、绘制(paint)以及后边的所有流程，这种行为称为<code>重排</code>。<br>当我们改变元素颜色属性时，不会重新触发布局，但还是会触发样式计算和绘制，这个就是<code>重绘</code>。</p>\n<p>我们可以发现，重绘和重排都会主线程，还有JS也是运行在主线程上的，那么他们就会出现抢占执行时间的问题，如果写了一个不断导致重绘重排的动画，浏览器则需要在每一帧都运行样式计算，布局和绘制的操作，我们知道页面每秒60帧进行刷新，用户才不会感知，如果页面在运行动画时还有大量JS任务需要执行，因为布局，绘制和JS执行都在主线程运行，当在一帧的时间内布局和绘制结束后，还有剩余时间，JS就会拿到主线程的使用权，如果JS执行时间过长，就会导致在下一帧开始时，JS没有及时归还主线程，导致下一帧没有按时渲染，就会出现页面卡顿，1.  我们可以通过<code>requestAnimationFrame()</code> 这个API进行优化，这个方法会在每一帧被调用，我们可以把JS运行任务分成更小的任务块，分到每一帧，在每一帧时间用完前暂停JS执行，归还主线程，这样的话在下一帧开始时，主线程就可以按时执行布局和绘制。2. 通过 <code>transform</code>的动画不会进行布局和绘制，而是直接运行在合成器线程和栅格化线程中，所以不会收到主线程JS的影响，由于不需要进行布局绘制，样式计算等操作，所以节省了很多时间。</p>"},{"title":"前端性能优化","_content":"\n性能优化是一个特别大的话题，我这里也只是简单说下我的理解\n\n与其说性能优化，不如换一个简单的话`访问的网站快准狠的呈现到用户面前`\n\n我们这里聊的性能优化，其实只是总结梳理一些常见的方式，面对真实的项目肯定不能一点一点去尝试，比较通用的方案是全链路埋点，通过数据查看哪块慢了，通过数据去量化性能优化，当然我们这里就不去最小的粒度化去分析，因为那最少需要几万字来梳理了。\n\n<!-- more -->\n\n### 图片优化\n\n图片优化是一个相对比较简单，但是却可以大幅提升我们性能的方式\n\n- 降低图片质量，图片100%的质量，和60%的质量其实看不出太大区别，一是可以使用`webpack`进行图片压缩， 二是可以使用在线网站进行压缩，比如我常用的一个`shrinkme`\n- 使`WebP`格式图片，优势在于有更小的图片体积，且拥有肉眼识别无差异的图片质量，兼容性不太好，但现已经慢慢抛弃低版本浏览器\n- 图片转成`base64` ，因为经过编码后，减少了`http`的请求次数，但图片体积会稍微增大，所以只适合小图片转化\n- 使用字体图标，它更`轻量`一个图标字体比一个图像要小，也更`灵活`通过`css` 可以随意更改颜色、阴影、透明度、旋转等\n- 图片延时加载也就是`图片懒加载`，先不给图片设置路径，只有当图片出现在浏览器可视窗口，才去加载真正的图片。\n\n```html\n<img data-src=\"https://avatars.githubusercontent.com/u/20986264?v=4\">\n\n<script>\nconst img = document.querySelector('img')\n    \nwindow.addEventListener('scroll', function() {\n    let result = img.getBoundingClientRect()\n    if(result.top < document.documentElement.clientHeight) {\n        img.src = img.dataset.src\n    }\n})\n</script>\n```\n\n### 压缩\n\n压缩文件也是个接入成本比较低的性能优化策略\n\n- 借助于 `webpack` 的各种`loader`和`plugin` 可以帮我们快速压缩合并`js`、`html`、`css` 等\n- 当然也可以开启`gzip` 压缩，打包的时候生成gz文件，上传到服务器，就不需要服务器来压缩，既降低了服务器压力，也减小了文件体积，`webpack`可以使用`comperssion-webpack-plugin`来设置\n- 依赖`es6`的模块静态分析特性，我们可以让`webpack`开启 `tree shaking` ,将我们的功能保持不变，并能将无用代码剔除\n\n### HTTP\n\n- 完整的`http`请求，需要经历`DNS`查找，`TCP握手`，浏览器发出请求，服务器接受请求，服务器处理请求并相应，浏览器接收响应等等一系列过程，所以`减少http请求次数`,也就是适当的`合并文件`、`雪碧图`、`合并代码块`提升我们的性能\n- 使用 `http2`， 它有解析速度更快，且有多路复用的特点，还回减少相同头部请求字段的数量等\n- 善用缓存，一些不经常更新的资源比如`vue`等一些列第三方的包，我们可以开启强缓存，通过`Expires`和` max-age `来设置缓存有效时间，也可以开启协商缓存，使用`Etag`和`If-None-Match`\n\n### CDN\n\n- 内容分发网络`CDN` ，是一组分布在多个不同地理位置的 Web 服务器， 接入成本就比较高了，需要资金支持，原理就是把网站的`静态资源`比如不常变化的样式、图片、文字、视频等全部部署到`CDN服务器`里，用户在请求时找最近的服务器获取资源，从而缩短了请求时间。\n\n### 其他优化小手段\n\n- 减少 `cookie` 体积\n- 使用`骨架屏`优化白屏\n- 长列表虚拟滚动\n- `JS`加载方式的设置\n  - `async`模式：当该`JS`资源和`页面DOM`没有依赖关系比如`埋点统计`,则可以设置`async`属性，`async`属性代表加载时异步的，`JS`不会阻塞DOM的渲染，当`JS资源`加载结束，会立即执行\n  - `defer`模式：该`JS资源`加载也是异步的，但是`JS脚本`需要等待`DOM`准备好再执行\n- 路由懒加载、组件懒加载，一定注意适度不能过多的拆分资源导致`http`请求过多\n- 减少重绘重排","source":"_posts/网络/03-前端性能优化.md","raw":"---\ntitle: 前端性能优化\ntags: 网络\n---\n\n性能优化是一个特别大的话题，我这里也只是简单说下我的理解\n\n与其说性能优化，不如换一个简单的话`访问的网站快准狠的呈现到用户面前`\n\n我们这里聊的性能优化，其实只是总结梳理一些常见的方式，面对真实的项目肯定不能一点一点去尝试，比较通用的方案是全链路埋点，通过数据查看哪块慢了，通过数据去量化性能优化，当然我们这里就不去最小的粒度化去分析，因为那最少需要几万字来梳理了。\n\n<!-- more -->\n\n### 图片优化\n\n图片优化是一个相对比较简单，但是却可以大幅提升我们性能的方式\n\n- 降低图片质量，图片100%的质量，和60%的质量其实看不出太大区别，一是可以使用`webpack`进行图片压缩， 二是可以使用在线网站进行压缩，比如我常用的一个`shrinkme`\n- 使`WebP`格式图片，优势在于有更小的图片体积，且拥有肉眼识别无差异的图片质量，兼容性不太好，但现已经慢慢抛弃低版本浏览器\n- 图片转成`base64` ，因为经过编码后，减少了`http`的请求次数，但图片体积会稍微增大，所以只适合小图片转化\n- 使用字体图标，它更`轻量`一个图标字体比一个图像要小，也更`灵活`通过`css` 可以随意更改颜色、阴影、透明度、旋转等\n- 图片延时加载也就是`图片懒加载`，先不给图片设置路径，只有当图片出现在浏览器可视窗口，才去加载真正的图片。\n\n```html\n<img data-src=\"https://avatars.githubusercontent.com/u/20986264?v=4\">\n\n<script>\nconst img = document.querySelector('img')\n    \nwindow.addEventListener('scroll', function() {\n    let result = img.getBoundingClientRect()\n    if(result.top < document.documentElement.clientHeight) {\n        img.src = img.dataset.src\n    }\n})\n</script>\n```\n\n### 压缩\n\n压缩文件也是个接入成本比较低的性能优化策略\n\n- 借助于 `webpack` 的各种`loader`和`plugin` 可以帮我们快速压缩合并`js`、`html`、`css` 等\n- 当然也可以开启`gzip` 压缩，打包的时候生成gz文件，上传到服务器，就不需要服务器来压缩，既降低了服务器压力，也减小了文件体积，`webpack`可以使用`comperssion-webpack-plugin`来设置\n- 依赖`es6`的模块静态分析特性，我们可以让`webpack`开启 `tree shaking` ,将我们的功能保持不变，并能将无用代码剔除\n\n### HTTP\n\n- 完整的`http`请求，需要经历`DNS`查找，`TCP握手`，浏览器发出请求，服务器接受请求，服务器处理请求并相应，浏览器接收响应等等一系列过程，所以`减少http请求次数`,也就是适当的`合并文件`、`雪碧图`、`合并代码块`提升我们的性能\n- 使用 `http2`， 它有解析速度更快，且有多路复用的特点，还回减少相同头部请求字段的数量等\n- 善用缓存，一些不经常更新的资源比如`vue`等一些列第三方的包，我们可以开启强缓存，通过`Expires`和` max-age `来设置缓存有效时间，也可以开启协商缓存，使用`Etag`和`If-None-Match`\n\n### CDN\n\n- 内容分发网络`CDN` ，是一组分布在多个不同地理位置的 Web 服务器， 接入成本就比较高了，需要资金支持，原理就是把网站的`静态资源`比如不常变化的样式、图片、文字、视频等全部部署到`CDN服务器`里，用户在请求时找最近的服务器获取资源，从而缩短了请求时间。\n\n### 其他优化小手段\n\n- 减少 `cookie` 体积\n- 使用`骨架屏`优化白屏\n- 长列表虚拟滚动\n- `JS`加载方式的设置\n  - `async`模式：当该`JS`资源和`页面DOM`没有依赖关系比如`埋点统计`,则可以设置`async`属性，`async`属性代表加载时异步的，`JS`不会阻塞DOM的渲染，当`JS资源`加载结束，会立即执行\n  - `defer`模式：该`JS资源`加载也是异步的，但是`JS脚本`需要等待`DOM`准备好再执行\n- 路由懒加载、组件懒加载，一定注意适度不能过多的拆分资源导致`http`请求过多\n- 减少重绘重排","slug":"网络/03-前端性能优化","published":1,"date":"2023-03-17T13:09:00.237Z","updated":"2023-03-17T13:09:00.238Z","_id":"clf6yh1ql00168cupgr9wbnet","comments":1,"layout":"post","photos":[],"link":"","content":"<p>性能优化是一个特别大的话题，我这里也只是简单说下我的理解</p>\n<p>与其说性能优化，不如换一个简单的话<code>访问的网站快准狠的呈现到用户面前</code></p>\n<p>我们这里聊的性能优化，其实只是总结梳理一些常见的方式，面对真实的项目肯定不能一点一点去尝试，比较通用的方案是全链路埋点，通过数据查看哪块慢了，通过数据去量化性能优化，当然我们这里就不去最小的粒度化去分析，因为那最少需要几万字来梳理了。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"图片优化\"><a href=\"#图片优化\" class=\"headerlink\" title=\"图片优化\"></a>图片优化</h3><p>图片优化是一个相对比较简单，但是却可以大幅提升我们性能的方式</p>\n<ul>\n<li>降低图片质量，图片100%的质量，和60%的质量其实看不出太大区别，一是可以使用<code>webpack</code>进行图片压缩， 二是可以使用在线网站进行压缩，比如我常用的一个<code>shrinkme</code></li>\n<li>使<code>WebP</code>格式图片，优势在于有更小的图片体积，且拥有肉眼识别无差异的图片质量，兼容性不太好，但现已经慢慢抛弃低版本浏览器</li>\n<li>图片转成<code>base64</code> ，因为经过编码后，减少了<code>http</code>的请求次数，但图片体积会稍微增大，所以只适合小图片转化</li>\n<li>使用字体图标，它更<code>轻量</code>一个图标字体比一个图像要小，也更<code>灵活</code>通过<code>css</code> 可以随意更改颜色、阴影、透明度、旋转等</li>\n<li>图片延时加载也就是<code>图片懒加载</code>，先不给图片设置路径，只有当图片出现在浏览器可视窗口，才去加载真正的图片。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;https://avatars.githubusercontent.com/u/20986264?v=4&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> result = img.<span class=\"title function_\">getBoundingClientRect</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">top</span> &lt; <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        img.<span class=\"property\">src</span> = img.<span class=\"property\">dataset</span>.<span class=\"property\">src</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><p>压缩文件也是个接入成本比较低的性能优化策略</p>\n<ul>\n<li>借助于 <code>webpack</code> 的各种<code>loader</code>和<code>plugin</code> 可以帮我们快速压缩合并<code>js</code>、<code>html</code>、<code>css</code> 等</li>\n<li>当然也可以开启<code>gzip</code> 压缩，打包的时候生成gz文件，上传到服务器，就不需要服务器来压缩，既降低了服务器压力，也减小了文件体积，<code>webpack</code>可以使用<code>comperssion-webpack-plugin</code>来设置</li>\n<li>依赖<code>es6</code>的模块静态分析特性，我们可以让<code>webpack</code>开启 <code>tree shaking</code> ,将我们的功能保持不变，并能将无用代码剔除</li>\n</ul>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><ul>\n<li>完整的<code>http</code>请求，需要经历<code>DNS</code>查找，<code>TCP握手</code>，浏览器发出请求，服务器接受请求，服务器处理请求并相应，浏览器接收响应等等一系列过程，所以<code>减少http请求次数</code>,也就是适当的<code>合并文件</code>、<code>雪碧图</code>、<code>合并代码块</code>提升我们的性能</li>\n<li>使用 <code>http2</code>， 它有解析速度更快，且有多路复用的特点，还回减少相同头部请求字段的数量等</li>\n<li>善用缓存，一些不经常更新的资源比如<code>vue</code>等一些列第三方的包，我们可以开启强缓存，通过<code>Expires</code>和<code>max-age</code>来设置缓存有效时间，也可以开启协商缓存，使用<code>Etag</code>和<code>If-None-Match</code></li>\n</ul>\n<h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><ul>\n<li>内容分发网络<code>CDN</code> ，是一组分布在多个不同地理位置的 Web 服务器， 接入成本就比较高了，需要资金支持，原理就是把网站的<code>静态资源</code>比如不常变化的样式、图片、文字、视频等全部部署到<code>CDN服务器</code>里，用户在请求时找最近的服务器获取资源，从而缩短了请求时间。</li>\n</ul>\n<h3 id=\"其他优化小手段\"><a href=\"#其他优化小手段\" class=\"headerlink\" title=\"其他优化小手段\"></a>其他优化小手段</h3><ul>\n<li>减少 <code>cookie</code> 体积</li>\n<li>使用<code>骨架屏</code>优化白屏</li>\n<li>长列表虚拟滚动</li>\n<li><code>JS</code>加载方式的设置<ul>\n<li><code>async</code>模式：当该<code>JS</code>资源和<code>页面DOM</code>没有依赖关系比如<code>埋点统计</code>,则可以设置<code>async</code>属性，<code>async</code>属性代表加载时异步的，<code>JS</code>不会阻塞DOM的渲染，当<code>JS资源</code>加载结束，会立即执行</li>\n<li><code>defer</code>模式：该<code>JS资源</code>加载也是异步的，但是<code>JS脚本</code>需要等待<code>DOM</code>准备好再执行</li>\n</ul>\n</li>\n<li>路由懒加载、组件懒加载，一定注意适度不能过多的拆分资源导致<code>http</code>请求过多</li>\n<li>减少重绘重排</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>性能优化是一个特别大的话题，我这里也只是简单说下我的理解</p>\n<p>与其说性能优化，不如换一个简单的话<code>访问的网站快准狠的呈现到用户面前</code></p>\n<p>我们这里聊的性能优化，其实只是总结梳理一些常见的方式，面对真实的项目肯定不能一点一点去尝试，比较通用的方案是全链路埋点，通过数据查看哪块慢了，通过数据去量化性能优化，当然我们这里就不去最小的粒度化去分析，因为那最少需要几万字来梳理了。</p>","more":"<h3 id=\"图片优化\"><a href=\"#图片优化\" class=\"headerlink\" title=\"图片优化\"></a>图片优化</h3><p>图片优化是一个相对比较简单，但是却可以大幅提升我们性能的方式</p>\n<ul>\n<li>降低图片质量，图片100%的质量，和60%的质量其实看不出太大区别，一是可以使用<code>webpack</code>进行图片压缩， 二是可以使用在线网站进行压缩，比如我常用的一个<code>shrinkme</code></li>\n<li>使<code>WebP</code>格式图片，优势在于有更小的图片体积，且拥有肉眼识别无差异的图片质量，兼容性不太好，但现已经慢慢抛弃低版本浏览器</li>\n<li>图片转成<code>base64</code> ，因为经过编码后，减少了<code>http</code>的请求次数，但图片体积会稍微增大，所以只适合小图片转化</li>\n<li>使用字体图标，它更<code>轻量</code>一个图标字体比一个图像要小，也更<code>灵活</code>通过<code>css</code> 可以随意更改颜色、阴影、透明度、旋转等</li>\n<li>图片延时加载也就是<code>图片懒加载</code>，先不给图片设置路径，只有当图片出现在浏览器可视窗口，才去加载真正的图片。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;https://avatars.githubusercontent.com/u/20986264?v=4&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> img = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> result = img.<span class=\"title function_\">getBoundingClientRect</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">top</span> &lt; <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        img.<span class=\"property\">src</span> = img.<span class=\"property\">dataset</span>.<span class=\"property\">src</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><p>压缩文件也是个接入成本比较低的性能优化策略</p>\n<ul>\n<li>借助于 <code>webpack</code> 的各种<code>loader</code>和<code>plugin</code> 可以帮我们快速压缩合并<code>js</code>、<code>html</code>、<code>css</code> 等</li>\n<li>当然也可以开启<code>gzip</code> 压缩，打包的时候生成gz文件，上传到服务器，就不需要服务器来压缩，既降低了服务器压力，也减小了文件体积，<code>webpack</code>可以使用<code>comperssion-webpack-plugin</code>来设置</li>\n<li>依赖<code>es6</code>的模块静态分析特性，我们可以让<code>webpack</code>开启 <code>tree shaking</code> ,将我们的功能保持不变，并能将无用代码剔除</li>\n</ul>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><ul>\n<li>完整的<code>http</code>请求，需要经历<code>DNS</code>查找，<code>TCP握手</code>，浏览器发出请求，服务器接受请求，服务器处理请求并相应，浏览器接收响应等等一系列过程，所以<code>减少http请求次数</code>,也就是适当的<code>合并文件</code>、<code>雪碧图</code>、<code>合并代码块</code>提升我们的性能</li>\n<li>使用 <code>http2</code>， 它有解析速度更快，且有多路复用的特点，还回减少相同头部请求字段的数量等</li>\n<li>善用缓存，一些不经常更新的资源比如<code>vue</code>等一些列第三方的包，我们可以开启强缓存，通过<code>Expires</code>和<code>max-age</code>来设置缓存有效时间，也可以开启协商缓存，使用<code>Etag</code>和<code>If-None-Match</code></li>\n</ul>\n<h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><ul>\n<li>内容分发网络<code>CDN</code> ，是一组分布在多个不同地理位置的 Web 服务器， 接入成本就比较高了，需要资金支持，原理就是把网站的<code>静态资源</code>比如不常变化的样式、图片、文字、视频等全部部署到<code>CDN服务器</code>里，用户在请求时找最近的服务器获取资源，从而缩短了请求时间。</li>\n</ul>\n<h3 id=\"其他优化小手段\"><a href=\"#其他优化小手段\" class=\"headerlink\" title=\"其他优化小手段\"></a>其他优化小手段</h3><ul>\n<li>减少 <code>cookie</code> 体积</li>\n<li>使用<code>骨架屏</code>优化白屏</li>\n<li>长列表虚拟滚动</li>\n<li><code>JS</code>加载方式的设置<ul>\n<li><code>async</code>模式：当该<code>JS</code>资源和<code>页面DOM</code>没有依赖关系比如<code>埋点统计</code>,则可以设置<code>async</code>属性，<code>async</code>属性代表加载时异步的，<code>JS</code>不会阻塞DOM的渲染，当<code>JS资源</code>加载结束，会立即执行</li>\n<li><code>defer</code>模式：该<code>JS资源</code>加载也是异步的，但是<code>JS脚本</code>需要等待<code>DOM</code>准备好再执行</li>\n</ul>\n</li>\n<li>路由懒加载、组件懒加载，一定注意适度不能过多的拆分资源导致<code>http</code>请求过多</li>\n<li>减少重绘重排</li>\n</ul>"},{"title":"手写数组的常用方法","_content":"\nJS 中给数组增加了需要实用的方法，接下来我们就一起简单手写一些数组的常用方法。\n\n- Array.prototype.forEach\n\n```js\nlet list = ['a', 'b', 'c']\n\nlist.forEach((item, index, arr) => {\n  console.log(item, index, arr)\n})\n\nArray.prototype.myForEach = function(cb) {\n  for(let i = 0; i < this.length; i++) {\n    cb(this[i], i, this)\n  }\n}\n\nlist.myForEach((item, index, arr) => {\n  console.log(item, index, arr)\n})\n```\n\n<!-- more -->\n\n- Array.prototype.map\n\n```js\nlet list = ['a', 'b', 'c']\n\nlet newList = list.map((item, index, arr) => {\n  console.log(item, index, arr)\n  return item + '!'\n})\n\nconsole.log(newList)\n\nArray.prototype.myMap = function(cb) {\n  let result = []\n\n  for(let i = 0; i < this.length; i++) {\n    result.push(cb(this[i], i, this))\n  }\n\n  return result\n}\n\nlet newList2 = list.myMap((item, index, arr) => {\n  console.log(item, index, arr)\n  return item + '!'\n})\n\nconsole.log(newList2)\n```\n\n- Array.prototype.filter\n\n```js\nlet list = ['a', 'b', 'c']\n\nlet newList = list.filter((item, index, arr) => {\n  console.log(item, index, arr)\n  return item === 'b'\n})\n\nconsole.log(newList)\n\nArray.prototype.myFilter = function(cb) {\n  let result = []\n\n  for(let i = 0; i < this.length; i++) {\n    cb(this[i], i, this) && result.push(this[i])\n  }\n\n  return result\n}\n\nlet newList2 = list.myFilter((item, index, arr) => {\n  console.log(item, index, arr)\n  return item === 'b'\n})\n\nconsole.log(newList2)\n```\n\n- Array.prototype.every\n\n```js\nlet list = ['a', 1, 'c']\n\nlet newList = list.every((item, index, arr) => {\n  console.log(item, index, arr)\n  return typeof item === 'string'\n})\n\nconsole.log(newList)\n\nArray.prototype.myEvery = function(cb) {\n  for(let i = 0; i < this.length; i++) {\n    if(!cb(this[i], i, this)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nlet newList2 = list.myEvery((item, index, arr) => {\n  console.log(item, index, arr)\n  return typeof item === 'string'\n})\n\nconsole.log(newList2)\n```\n\n- Array.prototype.some\n\n```js\nlet list = ['a', 'b', 'c']\n\nlet newList = list.some((item, index, arr) => {\n  console.log(item, index, arr)\n  return typeof item === 'string'\n})\n\nconsole.log(newList)\n\nArray.prototype.mySome = function(cb) {\n  for(let i = 0; i < this.length; i++) {\n    if(cb(this[i], i, this)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nlet newList2 = list.mySome((item, index, arr) => {\n  console.log(item, index, arr)\n  return typeof item === 'number'\n})\n\nconsole.log(newList2)\n```\n\n- Array.prototype.reduce\n\n```js\nlet list = ['a', 'b', 'c']\n\nlet newList = list.reduce((pre, item, index, arr) => {\n  console.log(pre, item, index, arr)\n\n  return pre + item\n}, '!')\n\nconsole.log(newList)\n\nlet newList2 = list.reduce((pre, item, index, arr) => {\n  console.log(pre, item, index, arr)\n\n  return pre + item\n})\n\nconsole.log(newList2)\n\nArray.prototype.myReduce = function(cb, initVal) {\n  let result \n  let start = 0\n\n  if(initVal) {\n    result = initVal\n  } else {\n    result = this[0]\n    start = 1\n  }\n\n  for(let i = start; i < this.length; i++) {\n    result = cb(result, this[i], i, this)\n  }\n\n  return result\n}\n\nlet newList3 = list.myReduce((pre, item, index, arr) => {\n  console.log(pre, item, index, arr)\n\n  return pre + item\n}, '!')\n\nconsole.log(newList3)\n\nlet newList4 = list.myReduce((pre, item, index, arr) => {\n  console.log(pre, item, index, arr)\n\n  return pre + item\n})\n\nconsole.log(newList4)\n```\n\n\n\nreduce\n","source":"_posts/JS/11-手写数组的常用方法.md","raw":"---\ntitle: 手写数组的常用方法\ntags: JS\n---\n\nJS 中给数组增加了需要实用的方法，接下来我们就一起简单手写一些数组的常用方法。\n\n- Array.prototype.forEach\n\n```js\nlet list = ['a', 'b', 'c']\n\nlist.forEach((item, index, arr) => {\n  console.log(item, index, arr)\n})\n\nArray.prototype.myForEach = function(cb) {\n  for(let i = 0; i < this.length; i++) {\n    cb(this[i], i, this)\n  }\n}\n\nlist.myForEach((item, index, arr) => {\n  console.log(item, index, arr)\n})\n```\n\n<!-- more -->\n\n- Array.prototype.map\n\n```js\nlet list = ['a', 'b', 'c']\n\nlet newList = list.map((item, index, arr) => {\n  console.log(item, index, arr)\n  return item + '!'\n})\n\nconsole.log(newList)\n\nArray.prototype.myMap = function(cb) {\n  let result = []\n\n  for(let i = 0; i < this.length; i++) {\n    result.push(cb(this[i], i, this))\n  }\n\n  return result\n}\n\nlet newList2 = list.myMap((item, index, arr) => {\n  console.log(item, index, arr)\n  return item + '!'\n})\n\nconsole.log(newList2)\n```\n\n- Array.prototype.filter\n\n```js\nlet list = ['a', 'b', 'c']\n\nlet newList = list.filter((item, index, arr) => {\n  console.log(item, index, arr)\n  return item === 'b'\n})\n\nconsole.log(newList)\n\nArray.prototype.myFilter = function(cb) {\n  let result = []\n\n  for(let i = 0; i < this.length; i++) {\n    cb(this[i], i, this) && result.push(this[i])\n  }\n\n  return result\n}\n\nlet newList2 = list.myFilter((item, index, arr) => {\n  console.log(item, index, arr)\n  return item === 'b'\n})\n\nconsole.log(newList2)\n```\n\n- Array.prototype.every\n\n```js\nlet list = ['a', 1, 'c']\n\nlet newList = list.every((item, index, arr) => {\n  console.log(item, index, arr)\n  return typeof item === 'string'\n})\n\nconsole.log(newList)\n\nArray.prototype.myEvery = function(cb) {\n  for(let i = 0; i < this.length; i++) {\n    if(!cb(this[i], i, this)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nlet newList2 = list.myEvery((item, index, arr) => {\n  console.log(item, index, arr)\n  return typeof item === 'string'\n})\n\nconsole.log(newList2)\n```\n\n- Array.prototype.some\n\n```js\nlet list = ['a', 'b', 'c']\n\nlet newList = list.some((item, index, arr) => {\n  console.log(item, index, arr)\n  return typeof item === 'string'\n})\n\nconsole.log(newList)\n\nArray.prototype.mySome = function(cb) {\n  for(let i = 0; i < this.length; i++) {\n    if(cb(this[i], i, this)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nlet newList2 = list.mySome((item, index, arr) => {\n  console.log(item, index, arr)\n  return typeof item === 'number'\n})\n\nconsole.log(newList2)\n```\n\n- Array.prototype.reduce\n\n```js\nlet list = ['a', 'b', 'c']\n\nlet newList = list.reduce((pre, item, index, arr) => {\n  console.log(pre, item, index, arr)\n\n  return pre + item\n}, '!')\n\nconsole.log(newList)\n\nlet newList2 = list.reduce((pre, item, index, arr) => {\n  console.log(pre, item, index, arr)\n\n  return pre + item\n})\n\nconsole.log(newList2)\n\nArray.prototype.myReduce = function(cb, initVal) {\n  let result \n  let start = 0\n\n  if(initVal) {\n    result = initVal\n  } else {\n    result = this[0]\n    start = 1\n  }\n\n  for(let i = start; i < this.length; i++) {\n    result = cb(result, this[i], i, this)\n  }\n\n  return result\n}\n\nlet newList3 = list.myReduce((pre, item, index, arr) => {\n  console.log(pre, item, index, arr)\n\n  return pre + item\n}, '!')\n\nconsole.log(newList3)\n\nlet newList4 = list.myReduce((pre, item, index, arr) => {\n  console.log(pre, item, index, arr)\n\n  return pre + item\n})\n\nconsole.log(newList4)\n```\n\n\n\nreduce\n","slug":"JS/11-手写数组的常用方法","published":1,"date":"2023-03-17T13:09:00.236Z","updated":"2023-03-17T13:09:00.236Z","_id":"clf6z48870000gsup8i9v597v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>JS 中给数组增加了需要实用的方法，接下来我们就一起简单手写一些数组的常用方法。</p>\n<ul>\n<li>Array.prototype.forEach</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myForEach</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">list.<span class=\"title function_\">myForEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ul>\n<li>Array.prototype.map</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myMap</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    result.<span class=\"title function_\">push</span>(<span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">myMap</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.filter</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item === <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myFilter</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>) &amp;&amp; result.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">myFilter</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item === <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.every</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myEvery</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">myEvery</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.some</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mySome</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">mySome</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;number&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.reduce</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pre, item, index, arr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pre, item, index, arr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myReduce</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb, initVal</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result </span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(initVal) &#123;</span><br><span class=\"line\">    result = initVal</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = <span class=\"variable language_\">this</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">    start = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = start; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    result = <span class=\"title function_\">cb</span>(result, <span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList3 = list.<span class=\"title function_\">myReduce</span>(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pre, item, index, arr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList4 = list.<span class=\"title function_\">myReduce</span>(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pre, item, index, arr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList4)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>reduce</p>\n","site":{"data":{}},"excerpt":"<p>JS 中给数组增加了需要实用的方法，接下来我们就一起简单手写一些数组的常用方法。</p>\n<ul>\n<li>Array.prototype.forEach</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myForEach</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">list.<span class=\"title function_\">myForEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>Array.prototype.map</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myMap</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    result.<span class=\"title function_\">push</span>(<span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">myMap</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.filter</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item === <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myFilter</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>) &amp;&amp; result.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">myFilter</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item === <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.every</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myEvery</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">myEvery</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.some</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mySome</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">mySome</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index, arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;number&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.prototype.reduce</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList = list.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pre, item, index, arr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList2 = list.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pre, item, index, arr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myReduce</span> = <span class=\"keyword\">function</span>(<span class=\"params\">cb, initVal</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result </span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(initVal) &#123;</span><br><span class=\"line\">    result = initVal</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = <span class=\"variable language_\">this</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">    start = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = start; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    result = <span class=\"title function_\">cb</span>(result, <span class=\"variable language_\">this</span>[i], i, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList3 = list.<span class=\"title function_\">myReduce</span>(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pre, item, index, arr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newList4 = list.<span class=\"title function_\">myReduce</span>(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pre, item, index, arr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newList4)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>reduce</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clf6yh1q300058cupafgy93oz","tag_id":"clf6yh1q000038cupbc1v6vk5","_id":"clf6yh1q500088cup6x0b5gye"},{"post_id":"clf6yh1pu00018cup6qfw8xqh","tag_id":"clf6yh1q000038cupbc1v6vk5","_id":"clf6yh1q6000a8cup7r2b23be"},{"post_id":"clf6yh1py00028cup0vxk724h","tag_id":"clf6yh1q000038cupbc1v6vk5","_id":"clf6yh1q8000d8cup1nqq7ihv"},{"post_id":"clf6yh1q100048cup8um27ydy","tag_id":"clf6yh1q000038cupbc1v6vk5","_id":"clf6yh1qa000h8cup84unfd51"},{"post_id":"clf6yh1qa000i8cupdtdad8kb","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1qc000l8cup40ce9bsp"},{"post_id":"clf6yh1q300068cup6yns36dg","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1qd000n8cupcohac9yp"},{"post_id":"clf6yh1qb000j8cup30gn6mwc","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1qf000q8cup2nmx66pb"},{"post_id":"clf6yh1qc000m8cup3weuc9j9","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1qg000s8cupf7398zmm"},{"post_id":"clf6yh1q600098cupadgg904t","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1qh000v8cupcfdadbuo"},{"post_id":"clf6yh1qd000o8cup0vdi83es","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1qi000x8cup6lsnfg80"},{"post_id":"clf6yh1qf000r8cupfhvmawuu","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1qj00108cup1p778dx9"},{"post_id":"clf6yh1q6000b8cup92xn1lq3","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1qk00128cup5f8x0um4"},{"post_id":"clf6yh1q8000e8cupg459cup5","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1qk00158cup0ktrbhtp"},{"post_id":"clf6yh1q9000f8cup0y4xdj40","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6yh1ql00178cup0he16j4h"},{"post_id":"clf6yh1qg000t8cupcgj9e5ua","tag_id":"clf6yh1qk00148cupcix92qtm","_id":"clf6yh1qm00198cupeeyxekex"},{"post_id":"clf6yh1qh000w8cuphevmeq12","tag_id":"clf6yh1qk00148cupcix92qtm","_id":"clf6yh1qm001b8cup3cs80z2x"},{"post_id":"clf6yh1qi000y8cup8ztk3k8w","tag_id":"clf6yh1qm001a8cup9yyig0ry","_id":"clf6yh1qn001d8cup4c3gfzkg"},{"post_id":"clf6yh1qj00118cupcbcxaylk","tag_id":"clf6yh1qk00148cupcix92qtm","_id":"clf6yh1qn001f8cupguu52ikf"},{"post_id":"clf6yh1qk00138cupah6oec85","tag_id":"clf6yh1qm001a8cup9yyig0ry","_id":"clf6yh1qo001h8cup0lf9c31s"},{"post_id":"clf6yh1ql00168cupgr9wbnet","tag_id":"clf6yh1qm001a8cup9yyig0ry","_id":"clf6yh1qo001i8cup4bhvgvc2"},{"post_id":"clf6z48870000gsup8i9v597v","tag_id":"clf6yh1qa000g8cuphbok7j7o","_id":"clf6z488c0001gsupf349c2hl"}],"Tag":[{"name":"CSS","_id":"clf6yh1q000038cupbc1v6vk5"},{"name":"JS","_id":"clf6yh1qa000g8cuphbok7j7o"},{"name":"Vue","_id":"clf6yh1qk00148cupcix92qtm"},{"name":"网络","_id":"clf6yh1qm001a8cup9yyig0ry"}]}}